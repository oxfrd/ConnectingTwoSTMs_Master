
ConnectingTwoSTM_disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800a768  0800a768  0001a768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a958  0800a958  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800a958  0800a958  0001a958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a960  0800a960  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a960  0800a960  0001a960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a964  0800a964  0001a964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000374c  20000010  0800a978  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000375c  0800a978  0002375c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022469  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046b1  00000000  00000000  000424a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  00046b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a30  00000000  00000000  00048768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a800  00000000  00000000  0004a198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021b17  00000000  00000000  00074998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100d33  00000000  00000000  000964af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001971e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077b0  00000000  00000000  00197234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a750 	.word	0x0800a750

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800a750 	.word	0x0800a750

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <RingBuffWrite>:
 *      Author: oxford
 */
#include "RingBuffer.h"

uint8_t RingBuffWrite(RingBuffer_t *buffer, uint8_t *data, uint8_t size)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	71fb      	strb	r3, [r7, #7]
	for(int i=0 ; i < size ; i++ )
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	e023      	b.n	8000e6c <RingBuffWrite+0x5c>
	{
		uint8_t next = ((buffer->head)+1) % RINGBUFF_SIZE;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	7c5b      	ldrb	r3, [r3, #17]
 8000e28:	1c5a      	adds	r2, r3, #1
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <RingBuffWrite+0x74>)
 8000e2c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e30:	10d9      	asrs	r1, r3, #3
 8000e32:	17d3      	asrs	r3, r2, #31
 8000e34:	1ac9      	subs	r1, r1, r3
 8000e36:	460b      	mov	r3, r1
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	440b      	add	r3, r1
 8000e3c:	1ad1      	subs	r1, r2, r3
 8000e3e:	460b      	mov	r3, r1
 8000e40:	74fb      	strb	r3, [r7, #19]

		if(next == buffer->tail)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	7c9b      	ldrb	r3, [r3, #18]
 8000e46:	7cfa      	ldrb	r2, [r7, #19]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d101      	bne.n	8000e50 <RingBuffWrite+0x40>
		{
			return 1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e012      	b.n	8000e76 <RingBuffWrite+0x66>
		} else
		{
			buffer->buff[buffer->head] = data[i];
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	4413      	add	r3, r2
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	7c52      	ldrb	r2, [r2, #17]
 8000e5a:	7819      	ldrb	r1, [r3, #0]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	5499      	strb	r1, [r3, r2]
			buffer->head = next;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	7cfa      	ldrb	r2, [r7, #19]
 8000e64:	745a      	strb	r2, [r3, #17]
	for(int i=0 ; i < size ; i++ )
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbd7      	blt.n	8000e24 <RingBuffWrite+0x14>
		}
	}
	return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	371c      	adds	r7, #28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	78787879 	.word	0x78787879

08000e88 <RingBuffReadSome>:

uint8_t RingBuffReadSome(RingBuffer_t *buffer, uint8_t *data, uint8_t size)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	4613      	mov	r3, r2
 8000e94:	71fb      	strb	r3, [r7, #7]
	for(int i=0 ; i < size ; i++ )
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	e025      	b.n	8000ee8 <RingBuffReadSome+0x60>
	{
		uint8_t next = ((buffer->tail)+1) % RINGBUFF_SIZE;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	7c9b      	ldrb	r3, [r3, #18]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <RingBuffReadSome+0x78>)
 8000ea4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ea8:	10d9      	asrs	r1, r3, #3
 8000eaa:	17d3      	asrs	r3, r2, #31
 8000eac:	1ac9      	subs	r1, r1, r3
 8000eae:	460b      	mov	r3, r1
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	440b      	add	r3, r1
 8000eb4:	1ad1      	subs	r1, r2, r3
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	74fb      	strb	r3, [r7, #19]

		data[i] = buffer->buff[buffer->tail];
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	7c9b      	ldrb	r3, [r3, #18]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	5c52      	ldrb	r2, [r2, r1]
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	701a      	strb	r2, [r3, #0]
		buffer->tail = next;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	7cfa      	ldrb	r2, [r7, #19]
 8000ed2:	749a      	strb	r2, [r3, #18]

		if(next == buffer->head)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	7c5b      	ldrb	r3, [r3, #17]
 8000ed8:	7cfa      	ldrb	r2, [r7, #19]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d101      	bne.n	8000ee2 <RingBuffReadSome+0x5a>
		{
		 	return 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e007      	b.n	8000ef2 <RingBuffReadSome+0x6a>
	for(int i=0 ; i < size ; i++ )
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	dbd5      	blt.n	8000e9c <RingBuffReadSome+0x14>
		}
	}
	return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	371c      	adds	r7, #28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	78787879 	.word	0x78787879

08000f04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_DMA_Init+0x70>)
 8000f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f0e:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <MX_DMA_Init+0x70>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6493      	str	r3, [r2, #72]	; 0x48
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <MX_DMA_Init+0x70>)
 8000f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_DMA_Init+0x70>)
 8000f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f26:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <MX_DMA_Init+0x70>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6493      	str	r3, [r2, #72]	; 0x48
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_DMA_Init+0x70>)
 8000f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2105      	movs	r1, #5
 8000f3e:	2010      	movs	r0, #16
 8000f40:	f002 fb20 	bl	8003584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000f44:	2010      	movs	r0, #16
 8000f46:	f002 fb39 	bl	80035bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2105      	movs	r1, #5
 8000f4e:	2011      	movs	r0, #17
 8000f50:	f002 fb18 	bl	8003584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000f54:	2011      	movs	r0, #17
 8000f56:	f002 fb31 	bl	80035bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	203c      	movs	r0, #60	; 0x3c
 8000f60:	f002 fb10 	bl	8003584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000f64:	203c      	movs	r0, #60	; 0x3c
 8000f66:	f002 fb29 	bl	80035bc <HAL_NVIC_EnableIRQ>

}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000

08000f78 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreUART2 */
  SemaphoreUART2Handle = osSemaphoreNew(1, 1, &SemaphoreUART2_attributes);
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <MX_FREERTOS_Init+0x58>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	2001      	movs	r0, #1
 8000f82:	f006 fb2c 	bl	80075de <osSemaphoreNew>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <MX_FREERTOS_Init+0x5c>)
 8000f8a:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreUART1 */
  SemaphoreUART1Handle = osSemaphoreNew(1, 1, &SemaphoreUART1_attributes);
 8000f8c:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <MX_FREERTOS_Init+0x60>)
 8000f8e:	2101      	movs	r1, #1
 8000f90:	2001      	movs	r0, #1
 8000f92:	f006 fb24 	bl	80075de <osSemaphoreNew>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <MX_FREERTOS_Init+0x64>)
 8000f9a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HBTask */
  HBTaskHandle = osThreadNew(StartHearthBeatTask, NULL, &HBTask_attributes);
 8000f9c:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <MX_FREERTOS_Init+0x68>)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4810      	ldr	r0, [pc, #64]	; (8000fe4 <MX_FREERTOS_Init+0x6c>)
 8000fa2:	f006 fa6f 	bl	8007484 <osThreadNew>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <MX_FREERTOS_Init+0x70>)
 8000faa:	6013      	str	r3, [r2, #0]

  /* creation of PrintToPCTask */
  PrintToPCTaskHandle = osThreadNew(StartPrintToPCTask, NULL, &PrintToPCTask_attributes);
 8000fac:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <MX_FREERTOS_Init+0x74>)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	480f      	ldr	r0, [pc, #60]	; (8000ff0 <MX_FREERTOS_Init+0x78>)
 8000fb2:	f006 fa67 	bl	8007484 <osThreadNew>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <MX_FREERTOS_Init+0x7c>)
 8000fba:	6013      	str	r3, [r2, #0]

  /* creation of ToNucleoTask */
  ToNucleoTaskHandle = osThreadNew(StartToNucleoTask, NULL, &ToNucleoTask_attributes);
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <MX_FREERTOS_Init+0x80>)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	480e      	ldr	r0, [pc, #56]	; (8000ffc <MX_FREERTOS_Init+0x84>)
 8000fc2:	f006 fa5f 	bl	8007484 <osThreadNew>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <MX_FREERTOS_Init+0x88>)
 8000fca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	0800a89c 	.word	0x0800a89c
 8000fd4:	20000070 	.word	0x20000070
 8000fd8:	0800a8ac 	.word	0x0800a8ac
 8000fdc:	20000074 	.word	0x20000074
 8000fe0:	0800a830 	.word	0x0800a830
 8000fe4:	08001005 	.word	0x08001005
 8000fe8:	20000064 	.word	0x20000064
 8000fec:	0800a854 	.word	0x0800a854
 8000ff0:	08001025 	.word	0x08001025
 8000ff4:	20000068 	.word	0x20000068
 8000ff8:	0800a878 	.word	0x0800a878
 8000ffc:	080010b9 	.word	0x080010b9
 8001000:	2000006c 	.word	0x2000006c

08001004 <StartHearthBeatTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartHearthBeatTask */
void StartHearthBeatTask(void *argument)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHearthBeatTask */

	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800100c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <StartHearthBeatTask+0x1c>)
 8001012:	f002 ff19 	bl	8003e48 <HAL_GPIO_TogglePin>
		osDelay(200);
 8001016:	20c8      	movs	r0, #200	; 0xc8
 8001018:	f006 fac6 	bl	80075a8 <osDelay>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800101c:	e7f6      	b.n	800100c <StartHearthBeatTask+0x8>
 800101e:	bf00      	nop
 8001020:	48001000 	.word	0x48001000

08001024 <StartPrintToPCTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPrintToPCTask */
void StartPrintToPCTask(void *argument)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
 800102a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrintToPCTask */
	HAL_UART_Receive_DMA(&huart2,
 800102c:	2204      	movs	r2, #4
 800102e:	491a      	ldr	r1, [pc, #104]	; (8001098 <StartPrintToPCTask+0x74>)
 8001030:	481a      	ldr	r0, [pc, #104]	; (800109c <StartPrintToPCTask+0x78>)
 8001032:	f004 ff69 	bl	8005f08 <HAL_UART_Receive_DMA>
			tempUART2, SIZE_SAMPLE_UART2);
	uint8_t errorerUart2;
	printf("Hello PC, it's Discovery board here!!\n\r");
 8001036:	481a      	ldr	r0, [pc, #104]	; (80010a0 <StartPrintToPCTask+0x7c>)
 8001038:	f001 fef2 	bl	8002e20 <printf_>
	xSemaphoreTake(SemaphoreUART2Handle, portMAX_DELAY);
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <StartPrintToPCTask+0x80>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	4618      	mov	r0, r3
 8001046:	f007 f8e9 	bl	800821c <xQueueSemaphoreTake>

	/* Infinite loop */
	for(;;)
	{
		xSemaphoreTake(SemaphoreUART2Handle, portMAX_DELAY);
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <StartPrintToPCTask+0x80>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f04f 31ff 	mov.w	r1, #4294967295
 8001052:	4618      	mov	r0, r3
 8001054:	f007 f8e2 	bl	800821c <xQueueSemaphoreTake>
		errorerUart2 = RingBuffReadSome(&Buff_RxUart2, Buff_TxUart2, SIZE_TXBUF_UART2);
 8001058:	2204      	movs	r2, #4
 800105a:	4913      	ldr	r1, [pc, #76]	; (80010a8 <StartPrintToPCTask+0x84>)
 800105c:	4813      	ldr	r0, [pc, #76]	; (80010ac <StartPrintToPCTask+0x88>)
 800105e:	f7ff ff13 	bl	8000e88 <RingBuffReadSome>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
		if(errorerUart2 != 0)
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <StartPrintToPCTask+0x50>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800106c:	2104      	movs	r1, #4
 800106e:	4810      	ldr	r0, [pc, #64]	; (80010b0 <StartPrintToPCTask+0x8c>)
 8001070:	f002 feea 	bl	8003e48 <HAL_GPIO_TogglePin>

		printf("Echo: %c%c%c%c\n\r", Buff_TxUart2[0],
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <StartPrintToPCTask+0x84>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
				Buff_TxUart2[1],
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <StartPrintToPCTask+0x84>)
 800107c:	785b      	ldrb	r3, [r3, #1]
		printf("Echo: %c%c%c%c\n\r", Buff_TxUart2[0],
 800107e:	461a      	mov	r2, r3
				Buff_TxUart2[2],
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <StartPrintToPCTask+0x84>)
 8001082:	789b      	ldrb	r3, [r3, #2]
		printf("Echo: %c%c%c%c\n\r", Buff_TxUart2[0],
 8001084:	4618      	mov	r0, r3
				Buff_TxUart2[3]);
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <StartPrintToPCTask+0x84>)
 8001088:	78db      	ldrb	r3, [r3, #3]
		printf("Echo: %c%c%c%c\n\r", Buff_TxUart2[0],
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	4603      	mov	r3, r0
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <StartPrintToPCTask+0x90>)
 8001090:	f001 fec6 	bl	8002e20 <printf_>
		xSemaphoreTake(SemaphoreUART2Handle, portMAX_DELAY);
 8001094:	e7d9      	b.n	800104a <StartPrintToPCTask+0x26>
 8001096:	bf00      	nop
 8001098:	20000038 	.word	0x20000038
 800109c:	200001e4 	.word	0x200001e4
 80010a0:	0800a7b0 	.word	0x0800a7b0
 80010a4:	20000070 	.word	0x20000070
 80010a8:	20000030 	.word	0x20000030
 80010ac:	20000050 	.word	0x20000050
 80010b0:	48000400 	.word	0x48000400
 80010b4:	0800a7d8 	.word	0x0800a7d8

080010b8 <StartToNucleoTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartToNucleoTask */
void StartToNucleoTask(void *argument)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartToNucleoTask */
	HAL_UART_Receive_DMA(&huart4, tempUART1, SIZE_SAMPLE_UART1);
 80010c0:	2204      	movs	r2, #4
 80010c2:	4918      	ldr	r1, [pc, #96]	; (8001124 <StartToNucleoTask+0x6c>)
 80010c4:	4818      	ldr	r0, [pc, #96]	; (8001128 <StartToNucleoTask+0x70>)
 80010c6:	f004 ff1f 	bl	8005f08 <HAL_UART_Receive_DMA>
	xSemaphoreTake(SemaphoreUART1Handle, portMAX_DELAY);
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <StartToNucleoTask+0x74>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f04f 31ff 	mov.w	r1, #4294967295
 80010d2:	4618      	mov	r0, r3
 80010d4:	f007 f8a2 	bl	800821c <xQueueSemaphoreTake>
	uint8_t errorerUart1;
	/* Infinite loop */
	for(;;)
	{
		xSemaphoreTake(SemaphoreUART1Handle, portMAX_DELAY);
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <StartToNucleoTask+0x74>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	4618      	mov	r0, r3
 80010e2:	f007 f89b 	bl	800821c <xQueueSemaphoreTake>
		errorerUart1 = RingBuffReadSome(&Buff_RxUart1, Buff_TxUart1, SIZE_TXBUF_UART1);
 80010e6:	2204      	movs	r2, #4
 80010e8:	4911      	ldr	r1, [pc, #68]	; (8001130 <StartToNucleoTask+0x78>)
 80010ea:	4812      	ldr	r0, [pc, #72]	; (8001134 <StartToNucleoTask+0x7c>)
 80010ec:	f7ff fecc 	bl	8000e88 <RingBuffReadSome>
 80010f0:	4603      	mov	r3, r0
 80010f2:	73fb      	strb	r3, [r7, #15]
		if(errorerUart1 != 0)
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <StartToNucleoTask+0x4a>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80010fa:	2104      	movs	r1, #4
 80010fc:	480e      	ldr	r0, [pc, #56]	; (8001138 <StartToNucleoTask+0x80>)
 80010fe:	f002 fea3 	bl	8003e48 <HAL_GPIO_TogglePin>
		printf("NUCLEO: %c%c%c%c\n\r", Buff_TxUart1[0],
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <StartToNucleoTask+0x78>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4619      	mov	r1, r3
				Buff_TxUart1[1],
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <StartToNucleoTask+0x78>)
 800110a:	785b      	ldrb	r3, [r3, #1]
		printf("NUCLEO: %c%c%c%c\n\r", Buff_TxUart1[0],
 800110c:	461a      	mov	r2, r3
				Buff_TxUart1[2],
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <StartToNucleoTask+0x78>)
 8001110:	789b      	ldrb	r3, [r3, #2]
		printf("NUCLEO: %c%c%c%c\n\r", Buff_TxUart1[0],
 8001112:	4618      	mov	r0, r3
				Buff_TxUart1[3]);
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <StartToNucleoTask+0x78>)
 8001116:	78db      	ldrb	r3, [r3, #3]
		printf("NUCLEO: %c%c%c%c\n\r", Buff_TxUart1[0],
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	4603      	mov	r3, r0
 800111c:	4807      	ldr	r0, [pc, #28]	; (800113c <StartToNucleoTask+0x84>)
 800111e:	f001 fe7f 	bl	8002e20 <printf_>
		xSemaphoreTake(SemaphoreUART1Handle, portMAX_DELAY);
 8001122:	e7d9      	b.n	80010d8 <StartToNucleoTask+0x20>
 8001124:	20000034 	.word	0x20000034
 8001128:	20000160 	.word	0x20000160
 800112c:	20000074 	.word	0x20000074
 8001130:	2000002c 	.word	0x2000002c
 8001134:	2000003c 	.word	0x2000003c
 8001138:	48000400 	.word	0x48000400
 800113c:	0800a7ec 	.word	0x0800a7ec

08001140 <_putchar>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t *) &character, 1, 1000);
 800114a:	1df9      	adds	r1, r7, #7
 800114c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001150:	2201      	movs	r2, #1
 8001152:	4803      	ldr	r0, [pc, #12]	; (8001160 <_putchar+0x20>)
 8001154:	f004 fe44 	bl	8005de0 <HAL_UART_Transmit>

	// send char to console etc.
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200001e4 	.word	0x200001e4

08001164 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	uint8_t errorInISR;
	/************************************************************************************/
	if(huart == &huart4)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_UART_RxCpltCallback+0x80>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d115      	bne.n	80011a0 <HAL_UART_RxCpltCallback+0x3c>
	{
		HAL_UART_Receive_DMA(&huart4, tempUART1, SIZE_SAMPLE_UART1);
 8001174:	2204      	movs	r2, #4
 8001176:	491c      	ldr	r1, [pc, #112]	; (80011e8 <HAL_UART_RxCpltCallback+0x84>)
 8001178:	481a      	ldr	r0, [pc, #104]	; (80011e4 <HAL_UART_RxCpltCallback+0x80>)
 800117a:	f004 fec5 	bl	8005f08 <HAL_UART_Receive_DMA>

		errorInISR = RingBuffWrite(&Buff_RxUart1, tempUART1, SIZE_SAMPLE_UART1);
 800117e:	2204      	movs	r2, #4
 8001180:	4919      	ldr	r1, [pc, #100]	; (80011e8 <HAL_UART_RxCpltCallback+0x84>)
 8001182:	481a      	ldr	r0, [pc, #104]	; (80011ec <HAL_UART_RxCpltCallback+0x88>)
 8001184:	f7ff fe44 	bl	8000e10 <RingBuffWrite>
 8001188:	4603      	mov	r3, r0
 800118a:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800118c:	2104      	movs	r1, #4
 800118e:	4818      	ldr	r0, [pc, #96]	; (80011f0 <HAL_UART_RxCpltCallback+0x8c>)
 8001190:	f002 fe5a 	bl	8003e48 <HAL_GPIO_TogglePin>
		//if(errorInISR != 0)
			//HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		xSemaphoreGiveFromISR(SemaphoreUART1Handle, pdTRUE);
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <HAL_UART_RxCpltCallback+0x90>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2101      	movs	r1, #1
 800119a:	4618      	mov	r0, r3
 800119c:	f006 fed1 	bl	8007f42 <xQueueGiveFromISR>
	}
	/**************************************************************************************/
	if(huart == &huart2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a15      	ldr	r2, [pc, #84]	; (80011f8 <HAL_UART_RxCpltCallback+0x94>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d118      	bne.n	80011da <HAL_UART_RxCpltCallback+0x76>
		{
			HAL_UART_Receive_DMA(&huart2, tempUART2, SIZE_SAMPLE_UART2);
 80011a8:	2204      	movs	r2, #4
 80011aa:	4914      	ldr	r1, [pc, #80]	; (80011fc <HAL_UART_RxCpltCallback+0x98>)
 80011ac:	4812      	ldr	r0, [pc, #72]	; (80011f8 <HAL_UART_RxCpltCallback+0x94>)
 80011ae:	f004 feab 	bl	8005f08 <HAL_UART_Receive_DMA>
			errorInISR = RingBuffWrite(&Buff_RxUart2, tempUART2, SIZE_SAMPLE_UART2);
 80011b2:	2204      	movs	r2, #4
 80011b4:	4911      	ldr	r1, [pc, #68]	; (80011fc <HAL_UART_RxCpltCallback+0x98>)
 80011b6:	4812      	ldr	r0, [pc, #72]	; (8001200 <HAL_UART_RxCpltCallback+0x9c>)
 80011b8:	f7ff fe2a 	bl	8000e10 <RingBuffWrite>
 80011bc:	4603      	mov	r3, r0
 80011be:	73fb      	strb	r3, [r7, #15]
			if(errorInISR != 0)
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_UART_RxCpltCallback+0x6a>
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80011c6:	2104      	movs	r1, #4
 80011c8:	4809      	ldr	r0, [pc, #36]	; (80011f0 <HAL_UART_RxCpltCallback+0x8c>)
 80011ca:	f002 fe3d 	bl	8003e48 <HAL_GPIO_TogglePin>
			xSemaphoreGiveFromISR(SemaphoreUART2Handle, pdTRUE);
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_UART_RxCpltCallback+0xa0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2101      	movs	r1, #1
 80011d4:	4618      	mov	r0, r3
 80011d6:	f006 feb4 	bl	8007f42 <xQueueGiveFromISR>

		}
	/**************************************************************************************/
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000160 	.word	0x20000160
 80011e8:	20000034 	.word	0x20000034
 80011ec:	2000003c 	.word	0x2000003c
 80011f0:	48000400 	.word	0x48000400
 80011f4:	20000074 	.word	0x20000074
 80011f8:	200001e4 	.word	0x200001e4
 80011fc:	20000038 	.word	0x20000038
 8001200:	20000050 	.word	0x20000050
 8001204:	20000070 	.word	0x20000070

08001208 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <MX_GPIO_Init+0xe8>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a33      	ldr	r2, [pc, #204]	; (80012f0 <MX_GPIO_Init+0xe8>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <MX_GPIO_Init+0xe8>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <MX_GPIO_Init+0xe8>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a2d      	ldr	r2, [pc, #180]	; (80012f0 <MX_GPIO_Init+0xe8>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <MX_GPIO_Init+0xe8>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <MX_GPIO_Init+0xe8>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a27      	ldr	r2, [pc, #156]	; (80012f0 <MX_GPIO_Init+0xe8>)
 8001254:	f043 0310 	orr.w	r3, r3, #16
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <MX_GPIO_Init+0xe8>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <MX_GPIO_Init+0xe8>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a21      	ldr	r2, [pc, #132]	; (80012f0 <MX_GPIO_Init+0xe8>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <MX_GPIO_Init+0xe8>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2104      	movs	r1, #4
 8001282:	481c      	ldr	r0, [pc, #112]	; (80012f4 <MX_GPIO_Init+0xec>)
 8001284:	f002 fdc8 	bl	8003e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800128e:	481a      	ldr	r0, [pc, #104]	; (80012f8 <MX_GPIO_Init+0xf0>)
 8001290:	f002 fdc2 	bl	8003e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8001294:	2304      	movs	r3, #4
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012aa:	f002 fc0b 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80012ae:	2304      	movs	r3, #4
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <MX_GPIO_Init+0xec>)
 80012c6:	f002 fbfd 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80012ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_GPIO_Init+0xf0>)
 80012e4:	f002 fbee 	bl	8003ac4 <HAL_GPIO_Init>

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40021000 	.word	0x40021000
 80012f4:	48000400 	.word	0x48000400
 80012f8:	48001000 	.word	0x48001000

080012fc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_I2C1_Init+0x74>)
 8001302:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <MX_I2C1_Init+0x78>)
 8001304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_I2C1_Init+0x74>)
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <MX_I2C1_Init+0x7c>)
 800130a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_I2C1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_I2C1_Init+0x74>)
 8001314:	2201      	movs	r2, #1
 8001316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_I2C1_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_I2C1_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <MX_I2C1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_I2C1_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_I2C1_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001336:	480e      	ldr	r0, [pc, #56]	; (8001370 <MX_I2C1_Init+0x74>)
 8001338:	f002 fda0 	bl	8003e7c <HAL_I2C_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001342:	f000 f92b 	bl	800159c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001346:	2100      	movs	r1, #0
 8001348:	4809      	ldr	r0, [pc, #36]	; (8001370 <MX_I2C1_Init+0x74>)
 800134a:	f002 fe40 	bl	8003fce <HAL_I2CEx_ConfigAnalogFilter>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001354:	f000 f922 	bl	800159c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001358:	2100      	movs	r1, #0
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_I2C1_Init+0x74>)
 800135c:	f002 fe82 	bl	8004064 <HAL_I2CEx_ConfigDigitalFilter>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001366:	f000 f919 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000078 	.word	0x20000078
 8001374:	40005400 	.word	0x40005400
 8001378:	00702991 	.word	0x00702991

0800137c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b0ac      	sub	sp, #176	; 0xb0
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2288      	movs	r2, #136	; 0x88
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f009 f9cf 	bl	800a740 <memset>
  if(i2cHandle->Instance==I2C1)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a39      	ldr	r2, [pc, #228]	; (800148c <HAL_I2C_MspInit+0x110>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d16b      	bne.n	8001484 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013ac:	2340      	movs	r3, #64	; 0x40
 80013ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fd35 	bl	8004e28 <HAL_RCCEx_PeriphCLKConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013c4:	f000 f8ea 	bl	800159c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c8:	4b31      	ldr	r3, [pc, #196]	; (8001490 <HAL_I2C_MspInit+0x114>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013cc:	4a30      	ldr	r2, [pc, #192]	; (8001490 <HAL_I2C_MspInit+0x114>)
 80013ce:	f043 0302 	orr.w	r3, r3, #2
 80013d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <HAL_I2C_MspInit+0x114>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013e0:	23c0      	movs	r3, #192	; 0xc0
 80013e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e6:	2312      	movs	r3, #18
 80013e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f8:	2304      	movs	r3, #4
 80013fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001402:	4619      	mov	r1, r3
 8001404:	4823      	ldr	r0, [pc, #140]	; (8001494 <HAL_I2C_MspInit+0x118>)
 8001406:	f002 fb5d 	bl	8003ac4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800140a:	4b21      	ldr	r3, [pc, #132]	; (8001490 <HAL_I2C_MspInit+0x114>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	4a20      	ldr	r2, [pc, #128]	; (8001490 <HAL_I2C_MspInit+0x114>)
 8001410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001414:	6593      	str	r3, [r2, #88]	; 0x58
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <HAL_I2C_MspInit+0x114>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_I2C_MspInit+0x11c>)
 8001424:	4a1d      	ldr	r2, [pc, #116]	; (800149c <HAL_I2C_MspInit+0x120>)
 8001426:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_I2C_MspInit+0x11c>)
 800142a:	2203      	movs	r2, #3
 800142c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HAL_I2C_MspInit+0x11c>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_I2C_MspInit+0x11c>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_I2C_MspInit+0x11c>)
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_I2C_MspInit+0x11c>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_I2C_MspInit+0x11c>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_I2C_MspInit+0x11c>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_I2C_MspInit+0x11c>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001458:	480f      	ldr	r0, [pc, #60]	; (8001498 <HAL_I2C_MspInit+0x11c>)
 800145a:	f002 f8bd 	bl	80035d8 <HAL_DMA_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_I2C_MspInit+0xec>
    {
      Error_Handler();
 8001464:	f000 f89a 	bl	800159c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <HAL_I2C_MspInit+0x11c>)
 800146c:	63da      	str	r2, [r3, #60]	; 0x3c
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_I2C_MspInit+0x11c>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	2105      	movs	r1, #5
 8001478:	201f      	movs	r0, #31
 800147a:	f002 f883 	bl	8003584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800147e:	201f      	movs	r0, #31
 8001480:	f002 f89c 	bl	80035bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001484:	bf00      	nop
 8001486:	37b0      	adds	r7, #176	; 0xb0
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40005400 	.word	0x40005400
 8001490:	40021000 	.word	0x40021000
 8001494:	48000400 	.word	0x48000400
 8001498:	200000cc 	.word	0x200000cc
 800149c:	40020080 	.word	0x40020080

080014a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a4:	f001 ff7d 	bl	80033a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a8:	f000 f813 	bl	80014d2 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80014ac:	f7ff fd2a 	bl	8000f04 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b0:	f7ff feaa 	bl	8001208 <MX_GPIO_Init>
  MX_DMA_Init();
 80014b4:	f7ff fd26 	bl	8000f04 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014b8:	f001 fe0e 	bl	80030d8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80014bc:	f001 fddc 	bl	8003078 <MX_UART4_Init>
  MX_I2C1_Init();
 80014c0:	f7ff ff1c 	bl	80012fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80014c4:	f005 ff94 	bl	80073f0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80014c8:	f7ff fd56 	bl	8000f78 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014cc:	f005 ffb4 	bl	8007438 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <main+0x30>

080014d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b096      	sub	sp, #88	; 0x58
 80014d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2244      	movs	r2, #68	; 0x44
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f009 f92d 	bl	800a740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e6:	463b      	mov	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014f8:	f002 fe0e 	bl	8004118 <HAL_PWREx_ControlVoltageScaling>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001502:	f000 f84b 	bl	800159c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001506:	2310      	movs	r3, #16
 8001508:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800150a:	2301      	movs	r3, #1
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001512:	2360      	movs	r3, #96	; 0x60
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001516:	2302      	movs	r3, #2
 8001518:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800151a:	2301      	movs	r3, #1
 800151c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800151e:	2301      	movs	r3, #1
 8001520:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001522:	2328      	movs	r3, #40	; 0x28
 8001524:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001526:	2307      	movs	r3, #7
 8001528:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800152a:	2302      	movs	r3, #2
 800152c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800152e:	2302      	movs	r3, #2
 8001530:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4618      	mov	r0, r3
 8001538:	f002 fe44 	bl	80041c4 <HAL_RCC_OscConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001542:	f000 f82b 	bl	800159c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001546:	230f      	movs	r3, #15
 8001548:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154a:	2303      	movs	r3, #3
 800154c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800155a:	463b      	mov	r3, r7
 800155c:	2104      	movs	r1, #4
 800155e:	4618      	mov	r0, r3
 8001560:	f003 fa0c 	bl	800497c <HAL_RCC_ClockConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800156a:	f000 f817 	bl	800159c <Error_Handler>
  }
}
 800156e:	bf00      	nop
 8001570:	3758      	adds	r7, #88	; 0x58
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d101      	bne.n	800158e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800158a:	f001 ff23 	bl	80033d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40001400 	.word	0x40001400

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
}
 80015a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <Error_Handler+0x8>

080015a6 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4603      	mov	r3, r0
 80015b4:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	4603      	mov	r3, r0
 80015d0:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <_out_char+0x1e>
    _putchar(character);
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fdb0 	bl	8001140 <_putchar>
  }
}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	e002      	b.n	80015fe <_strnlen_s+0x16>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3301      	adds	r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d004      	beq.n	8001610 <_strnlen_s+0x28>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	1e5a      	subs	r2, r3, #1
 800160a:	603a      	str	r2, [r7, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f3      	bne.n	80015f8 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	1ad3      	subs	r3, r2, r3
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	2b2f      	cmp	r3, #47	; 0x2f
 8001630:	d904      	bls.n	800163c <_is_digit+0x1a>
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	2b39      	cmp	r3, #57	; 0x39
 8001636:	d801      	bhi.n	800163c <_is_digit+0x1a>
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <_is_digit+0x1c>
 800163c:	2300      	movs	r3, #0
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800165c:	e00e      	b.n	800167c <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4618      	mov	r0, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	1c59      	adds	r1, r3, #1
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6011      	str	r1, [r2, #0]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4403      	add	r3, r0
 8001678:	3b30      	subs	r3, #48	; 0x30
 800167a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ffcd 	bl	8001622 <_is_digit>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1e7      	bne.n	800165e <_atoi+0xe>
  }
  return i;
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80016aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d125      	bne.n	8001700 <_out_rev+0x68>
 80016b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d120      	bne.n	8001700 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80016be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e00a      	b.n	80016da <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	1c53      	adds	r3, r2, #1
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	68fc      	ldr	r4, [r7, #12]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	2020      	movs	r0, #32
 80016d2:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016de:	429a      	cmp	r2, r3
 80016e0:	d3f0      	bcc.n	80016c4 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80016e2:	e00d      	b.n	8001700 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80016e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e6:	3b01      	subs	r3, #1
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ee:	4413      	add	r3, r2
 80016f0:	7818      	ldrb	r0, [r3, #0]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	1c53      	adds	r3, r2, #1
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	68fc      	ldr	r4, [r7, #12]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	47a0      	blx	r4
  while (len) {
 8001700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1ee      	bne.n	80016e4 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00e      	beq.n	800172e <_out_rev+0x96>
    while (idx - start_idx < width) {
 8001710:	e007      	b.n	8001722 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	1c53      	adds	r3, r2, #1
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	68fc      	ldr	r4, [r7, #12]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	2020      	movs	r0, #32
 8001720:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800172a:	429a      	cmp	r2, r3
 800172c:	d8f1      	bhi.n	8001712 <_out_rev+0x7a>
    }
  }

  return idx;
 800172e:	687b      	ldr	r3, [r7, #4]
}
 8001730:	4618      	mov	r0, r3
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}

08001738 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af04      	add	r7, sp, #16
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d136      	bne.n	80017be <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d018      	beq.n	8001788 <_ntoa_format+0x50>
 8001756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <_ntoa_format+0x50>
 8001760:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d104      	bne.n	8001772 <_ntoa_format+0x3a>
 8001768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00a      	beq.n	8001788 <_ntoa_format+0x50>
      width--;
 8001772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001774:	3b01      	subs	r3, #1
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001778:	e006      	b.n	8001788 <_ntoa_format+0x50>
      buf[len++] = '0';
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	61fa      	str	r2, [r7, #28]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4413      	add	r3, r2
 8001784:	2230      	movs	r2, #48	; 0x30
 8001786:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178c:	429a      	cmp	r2, r3
 800178e:	d20a      	bcs.n	80017a6 <_ntoa_format+0x6e>
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	2b1f      	cmp	r3, #31
 8001794:	d9f1      	bls.n	800177a <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001796:	e006      	b.n	80017a6 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	61fa      	str	r2, [r7, #28]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4413      	add	r3, r2
 80017a2:	2230      	movs	r2, #48	; 0x30
 80017a4:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80017a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d006      	beq.n	80017be <_ntoa_format+0x86>
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d202      	bcs.n	80017be <_ntoa_format+0x86>
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	2b1f      	cmp	r3, #31
 80017bc:	d9ec      	bls.n	8001798 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80017be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d058      	beq.n	800187a <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80017c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <_ntoa_format+0xc8>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d013      	beq.n	8001800 <_ntoa_format+0xc8>
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017dc:	429a      	cmp	r2, r3
 80017de:	d003      	beq.n	80017e8 <_ntoa_format+0xb0>
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d10b      	bne.n	8001800 <_ntoa_format+0xc8>
      len--;
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <_ntoa_format+0xc8>
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	2b10      	cmp	r3, #16
 80017f8:	d102      	bne.n	8001800 <_ntoa_format+0xc8>
        len--;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	2b10      	cmp	r3, #16
 8001804:	d10f      	bne.n	8001826 <_ntoa_format+0xee>
 8001806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10a      	bne.n	8001826 <_ntoa_format+0xee>
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	2b1f      	cmp	r3, #31
 8001814:	d807      	bhi.n	8001826 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	61fa      	str	r2, [r7, #28]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4413      	add	r3, r2
 8001820:	2278      	movs	r2, #120	; 0x78
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	e01f      	b.n	8001866 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	2b10      	cmp	r3, #16
 800182a:	d10f      	bne.n	800184c <_ntoa_format+0x114>
 800182c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00a      	beq.n	800184c <_ntoa_format+0x114>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	2b1f      	cmp	r3, #31
 800183a:	d807      	bhi.n	800184c <_ntoa_format+0x114>
      buf[len++] = 'X';
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	61fa      	str	r2, [r7, #28]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4413      	add	r3, r2
 8001846:	2258      	movs	r2, #88	; 0x58
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	e00c      	b.n	8001866 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	2b02      	cmp	r3, #2
 8001850:	d109      	bne.n	8001866 <_ntoa_format+0x12e>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	2b1f      	cmp	r3, #31
 8001856:	d806      	bhi.n	8001866 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	61fa      	str	r2, [r7, #28]
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4413      	add	r3, r2
 8001862:	2262      	movs	r2, #98	; 0x62
 8001864:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	2b1f      	cmp	r3, #31
 800186a:	d806      	bhi.n	800187a <_ntoa_format+0x142>
      buf[len++] = '0';
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	61fa      	str	r2, [r7, #28]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4413      	add	r3, r2
 8001876:	2230      	movs	r2, #48	; 0x30
 8001878:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	2b1f      	cmp	r3, #31
 800187e:	d824      	bhi.n	80018ca <_ntoa_format+0x192>
    if (negative) {
 8001880:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d007      	beq.n	8001898 <_ntoa_format+0x160>
      buf[len++] = '-';
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	61fa      	str	r2, [r7, #28]
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4413      	add	r3, r2
 8001892:	222d      	movs	r2, #45	; 0x2d
 8001894:	701a      	strb	r2, [r3, #0]
 8001896:	e018      	b.n	80018ca <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	61fa      	str	r2, [r7, #28]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4413      	add	r3, r2
 80018ac:	222b      	movs	r2, #43	; 0x2b
 80018ae:	701a      	strb	r2, [r3, #0]
 80018b0:	e00b      	b.n	80018ca <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80018b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <_ntoa_format+0x192>
      buf[len++] = ' ';
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	61fa      	str	r2, [r7, #28]
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4413      	add	r3, r2
 80018c6:	2220      	movs	r2, #32
 80018c8:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80018ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018cc:	9303      	str	r3, [sp, #12]
 80018ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	68b9      	ldr	r1, [r7, #8]
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f7ff fed9 	bl	8001698 <_out_rev>
 80018e6:	4603      	mov	r3, r0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b096      	sub	sp, #88	; 0x58
 80018f4:	af08      	add	r7, sp, #32
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001904:	2b00      	cmp	r3, #0
 8001906:	d103      	bne.n	8001910 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8001908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190a:	f023 0310 	bic.w	r3, r3, #16
 800190e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <_ntoa_long+0x30>
 800191a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800191c:	2b00      	cmp	r3, #0
 800191e:	d032      	beq.n	8001986 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8001920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001922:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001924:	fbb3 f2f2 	udiv	r2, r3, r2
 8001928:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800192a:	fb01 f202 	mul.w	r2, r1, r2
 800192e:	1a9b      	subs	r3, r3, r2
 8001930:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001934:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001938:	2b09      	cmp	r3, #9
 800193a:	d804      	bhi.n	8001946 <_ntoa_long+0x56>
 800193c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001940:	3330      	adds	r3, #48	; 0x30
 8001942:	b2da      	uxtb	r2, r3
 8001944:	e00d      	b.n	8001962 <_ntoa_long+0x72>
 8001946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001948:	f003 0320 	and.w	r3, r3, #32
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <_ntoa_long+0x64>
 8001950:	2241      	movs	r2, #65	; 0x41
 8001952:	e000      	b.n	8001956 <_ntoa_long+0x66>
 8001954:	2261      	movs	r2, #97	; 0x61
 8001956:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800195a:	4413      	add	r3, r2
 800195c:	b2db      	uxtb	r3, r3
 800195e:	3b0a      	subs	r3, #10
 8001960:	b2da      	uxtb	r2, r3
 8001962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001964:	1c59      	adds	r1, r3, #1
 8001966:	6379      	str	r1, [r7, #52]	; 0x34
 8001968:	3338      	adds	r3, #56	; 0x38
 800196a:	443b      	add	r3, r7
 800196c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001970:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001974:	fbb2 f3f3 	udiv	r3, r2, r3
 8001978:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800197a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <_ntoa_long+0x96>
 8001980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001982:	2b1f      	cmp	r3, #31
 8001984:	d9cc      	bls.n	8001920 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001988:	9306      	str	r3, [sp, #24]
 800198a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800198c:	9305      	str	r3, [sp, #20]
 800198e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001990:	9304      	str	r3, [sp, #16]
 8001992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001994:	9303      	str	r3, [sp, #12]
 8001996:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800199a:	9302      	str	r3, [sp, #8]
 800199c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff fec3 	bl	8001738 <_ntoa_format>
 80019b2:	4603      	mov	r3, r0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3738      	adds	r7, #56	; 0x38
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b096      	sub	sp, #88	; 0x58
 80019c0:	af08      	add	r7, sp, #32
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80019ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80019d2:	4313      	orrs	r3, r2
 80019d4:	d103      	bne.n	80019de <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80019d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019d8:	f023 0310 	bic.w	r3, r3, #16
 80019dc:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80019de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <_ntoa_long_long+0x34>
 80019e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80019ec:	4313      	orrs	r3, r2
 80019ee:	d037      	beq.n	8001a60 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 80019f0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80019f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80019f8:	f7ff f888 	bl	8000b0c <__aeabi_uldivmod>
 80019fc:	4613      	mov	r3, r2
 80019fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001a02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a06:	2b09      	cmp	r3, #9
 8001a08:	d804      	bhi.n	8001a14 <_ntoa_long_long+0x58>
 8001a0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a0e:	3330      	adds	r3, #48	; 0x30
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	e00d      	b.n	8001a30 <_ntoa_long_long+0x74>
 8001a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <_ntoa_long_long+0x66>
 8001a1e:	2241      	movs	r2, #65	; 0x41
 8001a20:	e000      	b.n	8001a24 <_ntoa_long_long+0x68>
 8001a22:	2261      	movs	r2, #97	; 0x61
 8001a24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a28:	4413      	add	r3, r2
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	3b0a      	subs	r3, #10
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a32:	1c59      	adds	r1, r3, #1
 8001a34:	6379      	str	r1, [r7, #52]	; 0x34
 8001a36:	3338      	adds	r3, #56	; 0x38
 8001a38:	443b      	add	r3, r7
 8001a3a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001a3e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001a42:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001a46:	f7ff f861 	bl	8000b0c <__aeabi_uldivmod>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001a52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001a56:	4313      	orrs	r3, r2
 8001a58:	d002      	beq.n	8001a60 <_ntoa_long_long+0xa4>
 8001a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5c:	2b1f      	cmp	r3, #31
 8001a5e:	d9c7      	bls.n	80019f0 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a64:	9206      	str	r2, [sp, #24]
 8001a66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a68:	9205      	str	r2, [sp, #20]
 8001a6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a6c:	9204      	str	r2, [sp, #16]
 8001a6e:	9303      	str	r3, [sp, #12]
 8001a70:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff fe56 	bl	8001738 <_ntoa_format>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3738      	adds	r7, #56	; 0x38
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b09d      	sub	sp, #116	; 0x74
 8001a9c:	af04      	add	r7, sp, #16
 8001a9e:	6178      	str	r0, [r7, #20]
 8001aa0:	6139      	str	r1, [r7, #16]
 8001aa2:	60fa      	str	r2, [r7, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8001aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001abe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ac2:	f7fe ffa9 	bl	8000a18 <__aeabi_dcmpeq>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10f      	bne.n	8001aec <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ace:	9303      	str	r3, [sp, #12]
 8001ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	4ba7      	ldr	r3, [pc, #668]	; (8001d78 <_ftoa+0x2e0>)
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	6939      	ldr	r1, [r7, #16]
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f7ff fdd8 	bl	8001698 <_out_rev>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	e222      	b.n	8001f32 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001af4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001af8:	f7fe ff98 	bl	8000a2c <__aeabi_dcmplt>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00f      	beq.n	8001b22 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b04:	9303      	str	r3, [sp, #12]
 8001b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b08:	9302      	str	r3, [sp, #8]
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	4b9b      	ldr	r3, [pc, #620]	; (8001d7c <_ftoa+0x2e4>)
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	6939      	ldr	r1, [r7, #16]
 8001b18:	6978      	ldr	r0, [r7, #20]
 8001b1a:	f7ff fdbd 	bl	8001698 <_out_rev>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	e207      	b.n	8001f32 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8001b22:	f04f 32ff 	mov.w	r2, #4294967295
 8001b26:	4b96      	ldr	r3, [pc, #600]	; (8001d80 <_ftoa+0x2e8>)
 8001b28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b2c:	f7fe ff9c 	bl	8000a68 <__aeabi_dcmpgt>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d01d      	beq.n	8001b72 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <_ftoa+0xac>
 8001b40:	4b90      	ldr	r3, [pc, #576]	; (8001d84 <_ftoa+0x2ec>)
 8001b42:	e000      	b.n	8001b46 <_ftoa+0xae>
 8001b44:	4b90      	ldr	r3, [pc, #576]	; (8001d88 <_ftoa+0x2f0>)
 8001b46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b48:	f002 0204 	and.w	r2, r2, #4
 8001b4c:	2a00      	cmp	r2, #0
 8001b4e:	d001      	beq.n	8001b54 <_ftoa+0xbc>
 8001b50:	2204      	movs	r2, #4
 8001b52:	e000      	b.n	8001b56 <_ftoa+0xbe>
 8001b54:	2203      	movs	r2, #3
 8001b56:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001b58:	9103      	str	r1, [sp, #12]
 8001b5a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001b5c:	9102      	str	r1, [sp, #8]
 8001b5e:	9201      	str	r2, [sp, #4]
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	6939      	ldr	r1, [r7, #16]
 8001b68:	6978      	ldr	r0, [r7, #20]
 8001b6a:	f7ff fd95 	bl	8001698 <_out_rev>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	e1df      	b.n	8001f32 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8001b72:	a37d      	add	r3, pc, #500	; (adr r3, 8001d68 <_ftoa+0x2d0>)
 8001b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b7c:	f7fe ff74 	bl	8000a68 <__aeabi_dcmpgt>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <_ftoa+0x102>
 8001b86:	a37a      	add	r3, pc, #488	; (adr r3, 8001d70 <_ftoa+0x2d8>)
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b90:	f7fe ff4c 	bl	8000a2c <__aeabi_dcmplt>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00f      	beq.n	8001bba <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001b9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b9c:	9302      	str	r3, [sp, #8]
 8001b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	ed97 0b00 	vldr	d0, [r7]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	6939      	ldr	r1, [r7, #16]
 8001bb0:	6978      	ldr	r0, [r7, #20]
 8001bb2:	f000 f9c9 	bl	8001f48 <_etoa>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	e1bb      	b.n	8001f32 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bcc:	f7fe ff2e 	bl	8000a2c <__aeabi_dcmplt>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00e      	beq.n	8001bf4 <_ftoa+0x15c>
    negative = true;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8001bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	f7fe faf6 	bl	80001d8 <__aeabi_dsub>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10d      	bne.n	8001c1a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001bfe:	2306      	movs	r3, #6
 8001c00:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001c02:	e00a      	b.n	8001c1a <_ftoa+0x182>
    buf[len++] = '0';
 8001c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c0a:	3360      	adds	r3, #96	; 0x60
 8001c0c:	443b      	add	r3, r7
 8001c0e:	2230      	movs	r2, #48	; 0x30
 8001c10:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8001c14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c16:	3b01      	subs	r3, #1
 8001c18:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1c:	2b1f      	cmp	r3, #31
 8001c1e:	d802      	bhi.n	8001c26 <_ftoa+0x18e>
 8001c20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c22:	2b09      	cmp	r3, #9
 8001c24:	d8ee      	bhi.n	8001c04 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8001c26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c2a:	f7fe ff27 	bl	8000a7c <__aeabi_d2iz>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8001c32:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001c34:	f7fe fc1e 	bl	8000474 <__aeabi_i2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c40:	f7fe faca 	bl	80001d8 <__aeabi_dsub>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4a4f      	ldr	r2, [pc, #316]	; (8001d8c <_ftoa+0x2f4>)
 8001c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	f7fe fc76 	bl	8000548 <__aeabi_dmul>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8001c64:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c68:	f7fe ff30 	bl	8000acc <__aeabi_d2uiz>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8001c70:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c72:	f7fe fbef 	bl	8000454 <__aeabi_ui2d>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c7e:	f7fe faab 	bl	80001d8 <__aeabi_dsub>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b40      	ldr	r3, [pc, #256]	; (8001d90 <_ftoa+0x2f8>)
 8001c90:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c94:	f7fe fee8 	bl	8000a68 <__aeabi_dcmpgt>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d016      	beq.n	8001ccc <_ftoa+0x234>
    ++frac;
 8001c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8001ca4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001ca6:	f7fe fbd5 	bl	8000454 <__aeabi_ui2d>
 8001caa:	4a38      	ldr	r2, [pc, #224]	; (8001d8c <_ftoa+0x2f4>)
 8001cac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	f7fe fecd 	bl	8000a54 <__aeabi_dcmpge>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d01a      	beq.n	8001cf6 <_ftoa+0x25e>
      frac = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8001cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	657b      	str	r3, [r7, #84]	; 0x54
 8001cca:	e014      	b.n	8001cf6 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <_ftoa+0x2f8>)
 8001cd2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001cd6:	f7fe fea9 	bl	8000a2c <__aeabi_dcmplt>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10a      	bne.n	8001cf6 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8001ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d004      	beq.n	8001cf0 <_ftoa+0x258>
 8001ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8001cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8001cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d14b      	bne.n	8001d94 <_ftoa+0x2fc>
    diff = value - (double)whole;
 8001cfc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001cfe:	f7fe fbb9 	bl	8000474 <__aeabi_i2d>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d0a:	f7fe fa65 	bl	80001d8 <__aeabi_dsub>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8001d16:	2301      	movs	r3, #1
 8001d18:	461c      	mov	r4, r3
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <_ftoa+0x2f8>)
 8001d20:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d24:	f7fe fe82 	bl	8000a2c <__aeabi_dcmplt>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <_ftoa+0x29a>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	461c      	mov	r4, r3
 8001d32:	b2e3      	uxtb	r3, r4
 8001d34:	f083 0301 	eor.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <_ftoa+0x2ba>
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <_ftoa+0x2f8>)
 8001d44:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d48:	f7fe fe8e 	bl	8000a68 <__aeabi_dcmpgt>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d064      	beq.n	8001e1c <_ftoa+0x384>
 8001d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 8081 	beq.w	8001e60 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8001d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d60:	3301      	adds	r3, #1
 8001d62:	657b      	str	r3, [r7, #84]	; 0x54
 8001d64:	e07c      	b.n	8001e60 <_ftoa+0x3c8>
 8001d66:	bf00      	nop
 8001d68:	00000000 	.word	0x00000000
 8001d6c:	41cdcd65 	.word	0x41cdcd65
 8001d70:	00000000 	.word	0x00000000
 8001d74:	c1cdcd65 	.word	0xc1cdcd65
 8001d78:	0800a800 	.word	0x0800a800
 8001d7c:	0800a804 	.word	0x0800a804
 8001d80:	7fefffff 	.word	0x7fefffff
 8001d84:	0800a80c 	.word	0x0800a80c
 8001d88:	0800a814 	.word	0x0800a814
 8001d8c:	0800a8c0 	.word	0x0800a8c0
 8001d90:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8001d94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d96:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001d98:	e01f      	b.n	8001dda <_ftoa+0x342>
      --count;
 8001d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8001da0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001da2:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <_ftoa+0x4a4>)
 8001da4:	fba3 2301 	umull	r2, r3, r3, r1
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	1aca      	subs	r2, r1, r3
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001db8:	1c59      	adds	r1, r3, #1
 8001dba:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001dbc:	3230      	adds	r2, #48	; 0x30
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	3360      	adds	r3, #96	; 0x60
 8001dc2:	443b      	add	r3, r7
 8001dc4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8001dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dca:	4a5c      	ldr	r2, [pc, #368]	; (8001f3c <_ftoa+0x4a4>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	653b      	str	r3, [r7, #80]	; 0x50
 8001dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ddc:	2b1f      	cmp	r3, #31
 8001dde:	d9dc      	bls.n	8001d9a <_ftoa+0x302>
 8001de0:	e009      	b.n	8001df6 <_ftoa+0x35e>
        break;
 8001de2:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001de4:	e007      	b.n	8001df6 <_ftoa+0x35e>
      buf[len++] = '0';
 8001de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001dec:	3360      	adds	r3, #96	; 0x60
 8001dee:	443b      	add	r3, r7
 8001df0:	2230      	movs	r2, #48	; 0x30
 8001df2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df8:	2b1f      	cmp	r3, #31
 8001dfa:	d804      	bhi.n	8001e06 <_ftoa+0x36e>
 8001dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dfe:	1e5a      	subs	r2, r3, #1
 8001e00:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1ef      	bne.n	8001de6 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e08:	2b1f      	cmp	r3, #31
 8001e0a:	d829      	bhi.n	8001e60 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8001e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e12:	3360      	adds	r3, #96	; 0x60
 8001e14:	443b      	add	r3, r7
 8001e16:	222e      	movs	r2, #46	; 0x2e
 8001e18:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001e1c:	e020      	b.n	8001e60 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8001e1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e20:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <_ftoa+0x4a8>)
 8001e22:	fb83 1302 	smull	r1, r3, r3, r2
 8001e26:	1099      	asrs	r1, r3, #2
 8001e28:	17d3      	asrs	r3, r2, #31
 8001e2a:	1ac9      	subs	r1, r1, r3
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	1ad1      	subs	r1, r2, r3
 8001e36:	b2ca      	uxtb	r2, r1
 8001e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e3a:	1c59      	adds	r1, r3, #1
 8001e3c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001e3e:	3230      	adds	r2, #48	; 0x30
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	3360      	adds	r3, #96	; 0x60
 8001e44:	443b      	add	r3, r7
 8001e46:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8001e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4c:	4a3c      	ldr	r2, [pc, #240]	; (8001f40 <_ftoa+0x4a8>)
 8001e4e:	fb82 1203 	smull	r1, r2, r2, r3
 8001e52:	1092      	asrs	r2, r2, #2
 8001e54:	17db      	asrs	r3, r3, #31
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	657b      	str	r3, [r7, #84]	; 0x54
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e62:	2b1f      	cmp	r3, #31
 8001e64:	d9db      	bls.n	8001e1e <_ftoa+0x386>
 8001e66:	e000      	b.n	8001e6a <_ftoa+0x3d2>
      break;
 8001e68:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8001e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d123      	bne.n	8001ebc <_ftoa+0x424>
 8001e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d01e      	beq.n	8001ebc <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d014      	beq.n	8001eae <_ftoa+0x416>
 8001e84:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d104      	bne.n	8001e96 <_ftoa+0x3fe>
 8001e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <_ftoa+0x416>
      width--;
 8001e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001e9c:	e007      	b.n	8001eae <_ftoa+0x416>
      buf[len++] = '0';
 8001e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001ea4:	3360      	adds	r3, #96	; 0x60
 8001ea6:	443b      	add	r3, r7
 8001ea8:	2230      	movs	r2, #48	; 0x30
 8001eaa:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001eae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d202      	bcs.n	8001ebc <_ftoa+0x424>
 8001eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eb8:	2b1f      	cmp	r3, #31
 8001eba:	d9f0      	bls.n	8001e9e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ebe:	2b1f      	cmp	r3, #31
 8001ec0:	d827      	bhi.n	8001f12 <_ftoa+0x47a>
    if (negative) {
 8001ec2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <_ftoa+0x444>
      buf[len++] = '-';
 8001eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001ed0:	3360      	adds	r3, #96	; 0x60
 8001ed2:	443b      	add	r3, r7
 8001ed4:	222d      	movs	r2, #45	; 0x2d
 8001ed6:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001eda:	e01a      	b.n	8001f12 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8001edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001eec:	3360      	adds	r3, #96	; 0x60
 8001eee:	443b      	add	r3, r7
 8001ef0:	222b      	movs	r2, #43	; 0x2b
 8001ef2:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001ef6:	e00c      	b.n	8001f12 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8001ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <_ftoa+0x47a>
      buf[len++] = ' ';
 8001f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001f08:	3360      	adds	r3, #96	; 0x60
 8001f0a:	443b      	add	r3, r7
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f14:	9303      	str	r3, [sp, #12]
 8001f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f18:	9302      	str	r3, [sp, #8]
 8001f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	f107 0318 	add.w	r3, r7, #24
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	6939      	ldr	r1, [r7, #16]
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f7ff fbb4 	bl	8001698 <_out_rev>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3764      	adds	r7, #100	; 0x64
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd90      	pop	{r4, r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	cccccccd 	.word	0xcccccccd
 8001f40:	66666667 	.word	0x66666667
 8001f44:	00000000 	.word	0x00000000

08001f48 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f4c:	b09f      	sub	sp, #124	; 0x7c
 8001f4e:	af06      	add	r7, sp, #24
 8001f50:	6278      	str	r0, [r7, #36]	; 0x24
 8001f52:	6239      	str	r1, [r7, #32]
 8001f54:	61fa      	str	r2, [r7, #28]
 8001f56:	61bb      	str	r3, [r7, #24]
 8001f58:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8001f5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f64:	f7fe fd58 	bl	8000a18 <__aeabi_dcmpeq>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d014      	beq.n	8001f98 <_etoa+0x50>
 8001f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f72:	4bc1      	ldr	r3, [pc, #772]	; (8002278 <_etoa+0x330>)
 8001f74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f78:	f7fe fd76 	bl	8000a68 <__aeabi_dcmpgt>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10a      	bne.n	8001f98 <_etoa+0x50>
 8001f82:	f04f 32ff 	mov.w	r2, #4294967295
 8001f86:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001f8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f8e:	f7fe fd4d 	bl	8000a2c <__aeabi_dcmplt>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d012      	beq.n	8001fbe <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001f98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f9c:	9302      	str	r3, [sp, #8]
 8001f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	ed97 0b04 	vldr	d0, [r7, #16]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	6a39      	ldr	r1, [r7, #32]
 8001fb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fb6:	f7ff fd6f 	bl	8001a98 <_ftoa>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	e23f      	b.n	800243e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	461e      	mov	r6, r3
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fce:	f7fe fd2d 	bl	8000a2c <__aeabi_dcmplt>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <_etoa+0x94>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	461e      	mov	r6, r3
 8001fdc:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8001fe0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d009      	beq.n	8001ffc <_etoa+0xb4>
    value = -value;
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	ed97 7b00 	vldr	d7, [r7]
 8001ff8:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8001ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002008:	2306      	movs	r3, #6
 800200a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800200e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002012:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002016:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	0d0a      	lsrs	r2, r1, #20
 8002024:	2300      	movs	r3, #0
 8002026:	4613      	mov	r3, r2
 8002028:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800202c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002030:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002032:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002036:	4690      	mov	r8, r2
 8002038:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800203c:	4644      	mov	r4, r8
 800203e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8002042:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002046:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800204a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800204c:	f7fe fa12 	bl	8000474 <__aeabi_i2d>
 8002050:	a37d      	add	r3, pc, #500	; (adr r3, 8002248 <_etoa+0x300>)
 8002052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002056:	f7fe fa77 	bl	8000548 <__aeabi_dmul>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	a37b      	add	r3, pc, #492	; (adr r3, 8002250 <_etoa+0x308>)
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	f7fe f8b8 	bl	80001dc <__adddf3>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4614      	mov	r4, r2
 8002072:	461d      	mov	r5, r3
 8002074:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	4b7f      	ldr	r3, [pc, #508]	; (800227c <_etoa+0x334>)
 800207e:	f7fe f8ab 	bl	80001d8 <__aeabi_dsub>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	a373      	add	r3, pc, #460	; (adr r3, 8002258 <_etoa+0x310>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f7fe fa5a 	bl	8000548 <__aeabi_dmul>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4620      	mov	r0, r4
 800209a:	4629      	mov	r1, r5
 800209c:	f7fe f89e 	bl	80001dc <__adddf3>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7fe fce8 	bl	8000a7c <__aeabi_d2iz>
 80020ac:	4603      	mov	r3, r0
 80020ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80020b0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80020b2:	f7fe f9df 	bl	8000474 <__aeabi_i2d>
 80020b6:	a36a      	add	r3, pc, #424	; (adr r3, 8002260 <_etoa+0x318>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe fa44 	bl	8000548 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	4b6c      	ldr	r3, [pc, #432]	; (8002280 <_etoa+0x338>)
 80020ce:	f7fe f885 	bl	80001dc <__adddf3>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f7fe fccf 	bl	8000a7c <__aeabi_d2iz>
 80020de:	4603      	mov	r3, r0
 80020e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80020e2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80020e4:	f7fe f9c6 	bl	8000474 <__aeabi_i2d>
 80020e8:	a35f      	add	r3, pc, #380	; (adr r3, 8002268 <_etoa+0x320>)
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	f7fe fa2b 	bl	8000548 <__aeabi_dmul>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4614      	mov	r4, r2
 80020f8:	461d      	mov	r5, r3
 80020fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80020fc:	f7fe f9ba 	bl	8000474 <__aeabi_i2d>
 8002100:	a35b      	add	r3, pc, #364	; (adr r3, 8002270 <_etoa+0x328>)
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	f7fe fa1f 	bl	8000548 <__aeabi_dmul>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4620      	mov	r0, r4
 8002110:	4629      	mov	r1, r5
 8002112:	f7fe f861 	bl	80001d8 <__aeabi_dsub>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800211e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002122:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002126:	f7fe fa0f 	bl	8000548 <__aeabi_dmul>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002134:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002138:	17da      	asrs	r2, r3, #31
 800213a:	469a      	mov	sl, r3
 800213c:	4693      	mov	fp, r2
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800214a:	2200      	movs	r2, #0
 800214c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002150:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002154:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	f7fe f83e 	bl	80001dc <__adddf3>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4690      	mov	r8, r2
 8002166:	4699      	mov	r9, r3
 8002168:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800216c:	f04f 0000 	mov.w	r0, #0
 8002170:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002174:	f7fe f830 	bl	80001d8 <__aeabi_dsub>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4692      	mov	sl, r2
 800217e:	469b      	mov	fp, r3
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <_etoa+0x33c>)
 8002186:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800218a:	f7fe fb07 	bl	800079c <__aeabi_ddiv>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	4b3b      	ldr	r3, [pc, #236]	; (8002288 <_etoa+0x340>)
 800219c:	f7fe f81e 	bl	80001dc <__adddf3>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80021a8:	f7fe faf8 	bl	800079c <__aeabi_ddiv>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	4b34      	ldr	r3, [pc, #208]	; (800228c <_etoa+0x344>)
 80021ba:	f7fe f80f 	bl	80001dc <__adddf3>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80021c6:	f7fe fae9 	bl	800079c <__aeabi_ddiv>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4650      	mov	r0, sl
 80021d0:	4659      	mov	r1, fp
 80021d2:	f7fe f803 	bl	80001dc <__adddf3>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4640      	mov	r0, r8
 80021dc:	4649      	mov	r1, r9
 80021de:	f7fe fadd 	bl	800079c <__aeabi_ddiv>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	4b28      	ldr	r3, [pc, #160]	; (8002290 <_etoa+0x348>)
 80021f0:	f7fd fff4 	bl	80001dc <__adddf3>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4620      	mov	r0, r4
 80021fa:	4629      	mov	r1, r5
 80021fc:	f7fe f9a4 	bl	8000548 <__aeabi_dmul>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8002208:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800220c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002210:	f7fe fc0c 	bl	8000a2c <__aeabi_dcmplt>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00d      	beq.n	8002236 <_etoa+0x2ee>
    expval--;
 800221a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800221c:	3b01      	subs	r3, #1
 800221e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8002220:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <_etoa+0x340>)
 800222a:	f7fe fab7 	bl	800079c <__aeabi_ddiv>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002238:	2b63      	cmp	r3, #99	; 0x63
 800223a:	dc2b      	bgt.n	8002294 <_etoa+0x34c>
 800223c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800223e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002242:	db27      	blt.n	8002294 <_etoa+0x34c>
 8002244:	2304      	movs	r3, #4
 8002246:	e026      	b.n	8002296 <_etoa+0x34e>
 8002248:	509f79fb 	.word	0x509f79fb
 800224c:	3fd34413 	.word	0x3fd34413
 8002250:	8b60c8b3 	.word	0x8b60c8b3
 8002254:	3fc68a28 	.word	0x3fc68a28
 8002258:	636f4361 	.word	0x636f4361
 800225c:	3fd287a7 	.word	0x3fd287a7
 8002260:	0979a371 	.word	0x0979a371
 8002264:	400a934f 	.word	0x400a934f
 8002268:	bbb55516 	.word	0xbbb55516
 800226c:	40026bb1 	.word	0x40026bb1
 8002270:	fefa39ef 	.word	0xfefa39ef
 8002274:	3fe62e42 	.word	0x3fe62e42
 8002278:	7fefffff 	.word	0x7fefffff
 800227c:	3ff80000 	.word	0x3ff80000
 8002280:	3fe00000 	.word	0x3fe00000
 8002284:	402c0000 	.word	0x402c0000
 8002288:	40240000 	.word	0x40240000
 800228c:	40180000 	.word	0x40180000
 8002290:	3ff00000 	.word	0x3ff00000
 8002294:	2305      	movs	r3, #5
 8002296:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002298:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800229c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d03d      	beq.n	8002320 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80022a4:	a368      	add	r3, pc, #416	; (adr r3, 8002448 <_etoa+0x500>)
 80022a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022ae:	f7fe fbd1 	bl	8000a54 <__aeabi_dcmpge>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d024      	beq.n	8002302 <_etoa+0x3ba>
 80022b8:	a365      	add	r3, pc, #404	; (adr r3, 8002450 <_etoa+0x508>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022c2:	f7fe fbb3 	bl	8000a2c <__aeabi_dcmplt>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01a      	beq.n	8002302 <_etoa+0x3ba>
      if ((int)prec > expval) {
 80022cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80022d2:	429a      	cmp	r2, r3
 80022d4:	da07      	bge.n	80022e6 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 80022d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80022da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	3b01      	subs	r3, #1
 80022e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022e4:	e002      	b.n	80022ec <_etoa+0x3a4>
      }
      else {
        prec = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80022ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002300:	e00e      	b.n	8002320 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002302:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <_etoa+0x3d8>
 800230a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800230e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002312:	2b00      	cmp	r3, #0
 8002314:	d004      	beq.n	8002320 <_etoa+0x3d8>
        --prec;
 8002316:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800231a:	3b01      	subs	r3, #1
 800231c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002320:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002324:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8002326:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800232a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800232c:	429a      	cmp	r2, r3
 800232e:	d904      	bls.n	800233a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002330:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	657b      	str	r3, [r7, #84]	; 0x54
 8002338:	e001      	b.n	800233e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800233e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d004      	beq.n	8002354 <_etoa+0x40c>
 800234a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8002354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <_etoa+0x426>
    value /= conv.F;
 800235a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800235e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002362:	f7fe fa1b 	bl	800079c <__aeabi_ddiv>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002372:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002376:	2b00      	cmp	r3, #0
 8002378:	d006      	beq.n	8002388 <_etoa+0x440>
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	e003      	b.n	8002390 <_etoa+0x448>
 8002388:	ed97 7b04 	vldr	d7, [r7, #16]
 800238c:	ed87 7b02 	vstr	d7, [r7, #8]
 8002390:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002398:	9302      	str	r3, [sp, #8]
 800239a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	ed97 0b02 	vldr	d0, [r7, #8]
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	6a39      	ldr	r1, [r7, #32]
 80023ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023b0:	f7ff fb72 	bl	8001a98 <_ftoa>
 80023b4:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 80023b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d03f      	beq.n	800243c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80023bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <_etoa+0x484>
 80023c8:	2045      	movs	r0, #69	; 0x45
 80023ca:	e000      	b.n	80023ce <_etoa+0x486>
 80023cc:	2065      	movs	r0, #101	; 0x65
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	1c53      	adds	r3, r2, #1
 80023d2:	61fb      	str	r3, [r7, #28]
 80023d4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	6a39      	ldr	r1, [r7, #32]
 80023da:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80023dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bfb8      	it	lt
 80023e2:	425b      	neglt	r3, r3
 80023e4:	4618      	mov	r0, r3
 80023e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e8:	0fdb      	lsrs	r3, r3, #31
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023ee:	3a01      	subs	r2, #1
 80023f0:	2105      	movs	r1, #5
 80023f2:	9105      	str	r1, [sp, #20]
 80023f4:	9204      	str	r2, [sp, #16]
 80023f6:	2200      	movs	r2, #0
 80023f8:	9203      	str	r2, [sp, #12]
 80023fa:	220a      	movs	r2, #10
 80023fc:	9202      	str	r2, [sp, #8]
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	9000      	str	r0, [sp, #0]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	6a39      	ldr	r1, [r7, #32]
 8002408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800240a:	f7ff fa71 	bl	80018f0 <_ntoa_long>
 800240e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002410:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00f      	beq.n	800243c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800241c:	e007      	b.n	800242e <_etoa+0x4e6>
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	1c53      	adds	r3, r2, #1
 8002422:	61fb      	str	r3, [r7, #28]
 8002424:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	6a39      	ldr	r1, [r7, #32]
 800242a:	2020      	movs	r0, #32
 800242c:	47a0      	blx	r4
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002438:	429a      	cmp	r2, r3
 800243a:	d8f0      	bhi.n	800241e <_etoa+0x4d6>
    }
  }
  return idx;
 800243c:	69fb      	ldr	r3, [r7, #28]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3764      	adds	r7, #100	; 0x64
 8002442:	46bd      	mov	sp, r7
 8002444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002448:	eb1c432d 	.word	0xeb1c432d
 800244c:	3f1a36e2 	.word	0x3f1a36e2
 8002450:	00000000 	.word	0x00000000
 8002454:	412e8480 	.word	0x412e8480

08002458 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800245c:	b0a3      	sub	sp, #140	; 0x8c
 800245e:	af0a      	add	r7, sp, #40	; 0x28
 8002460:	6178      	str	r0, [r7, #20]
 8002462:	6139      	str	r1, [r7, #16]
 8002464:	60fa      	str	r2, [r7, #12]
 8002466:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 84be 	bne.w	8002df0 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 8002474:	4ba3      	ldr	r3, [pc, #652]	; (8002704 <_vsnprintf+0x2ac>)
 8002476:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8002478:	f000 bcba 	b.w	8002df0 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b25      	cmp	r3, #37	; 0x25
 8002482:	d00d      	beq.n	80024a0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	7818      	ldrb	r0, [r3, #0]
 8002488:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800248a:	1c53      	adds	r3, r2, #1
 800248c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800248e:	697c      	ldr	r4, [r7, #20]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6939      	ldr	r1, [r7, #16]
 8002494:	47a0      	blx	r4
      format++;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	3301      	adds	r3, #1
 800249a:	60bb      	str	r3, [r7, #8]
      continue;
 800249c:	f000 bca8 	b.w	8002df0 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	3301      	adds	r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	3b20      	subs	r3, #32
 80024b0:	2b10      	cmp	r3, #16
 80024b2:	d857      	bhi.n	8002564 <_vsnprintf+0x10c>
 80024b4:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <_vsnprintf+0x64>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	0800253d 	.word	0x0800253d
 80024c0:	08002565 	.word	0x08002565
 80024c4:	08002565 	.word	0x08002565
 80024c8:	08002551 	.word	0x08002551
 80024cc:	08002565 	.word	0x08002565
 80024d0:	08002565 	.word	0x08002565
 80024d4:	08002565 	.word	0x08002565
 80024d8:	08002565 	.word	0x08002565
 80024dc:	08002565 	.word	0x08002565
 80024e0:	08002565 	.word	0x08002565
 80024e4:	08002565 	.word	0x08002565
 80024e8:	08002529 	.word	0x08002529
 80024ec:	08002565 	.word	0x08002565
 80024f0:	08002515 	.word	0x08002515
 80024f4:	08002565 	.word	0x08002565
 80024f8:	08002565 	.word	0x08002565
 80024fc:	08002501 	.word	0x08002501
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	3301      	adds	r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	2301      	movs	r3, #1
 8002510:	653b      	str	r3, [r7, #80]	; 0x50
 8002512:	e02a      	b.n	800256a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	3301      	adds	r3, #1
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	2301      	movs	r3, #1
 8002524:	653b      	str	r3, [r7, #80]	; 0x50
 8002526:	e020      	b.n	800256a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	3301      	adds	r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	2301      	movs	r3, #1
 8002538:	653b      	str	r3, [r7, #80]	; 0x50
 800253a:	e016      	b.n	800256a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800253c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800253e:	f043 0308 	orr.w	r3, r3, #8
 8002542:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	3301      	adds	r3, #1
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	2301      	movs	r3, #1
 800254c:	653b      	str	r3, [r7, #80]	; 0x50
 800254e:	e00c      	b.n	800256a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002552:	f043 0310 	orr.w	r3, r3, #16
 8002556:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	3301      	adds	r3, #1
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	2301      	movs	r3, #1
 8002560:	653b      	str	r3, [r7, #80]	; 0x50
 8002562:	e002      	b.n	800256a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8002564:	2300      	movs	r3, #0
 8002566:	653b      	str	r3, [r7, #80]	; 0x50
 8002568:	bf00      	nop
      }
    } while (n);
 800256a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800256c:	2b00      	cmp	r3, #0
 800256e:	d19c      	bne.n	80024aa <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff f852 	bl	8001622 <_is_digit>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff f861 	bl	8001650 <_atoi>
 800258e:	65b8      	str	r0, [r7, #88]	; 0x58
 8002590:	e01a      	b.n	80025c8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b2a      	cmp	r3, #42	; 0x2a
 8002598:	d116      	bne.n	80025c8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800259a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800259e:	1d1a      	adds	r2, r3, #4
 80025a0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 80025a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	da07      	bge.n	80025be <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 80025ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b8:	425b      	negs	r3, r3
 80025ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80025bc:	e001      	b.n	80025c2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 80025be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	3301      	adds	r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b2e      	cmp	r3, #46	; 0x2e
 80025d2:	d127      	bne.n	8002624 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80025d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025da:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	3301      	adds	r3, #1
 80025e0:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff f81b 	bl	8001622 <_is_digit>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 80025f2:	f107 0308 	add.w	r3, r7, #8
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff f82a 	bl	8001650 <_atoi>
 80025fc:	6578      	str	r0, [r7, #84]	; 0x54
 80025fe:	e011      	b.n	8002624 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b2a      	cmp	r3, #42	; 0x2a
 8002606:	d10d      	bne.n	8002624 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8002608:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800260c:	1d1a      	adds	r2, r3, #4
 800260e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002618:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800261c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	3301      	adds	r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	3b68      	subs	r3, #104	; 0x68
 800262a:	2b12      	cmp	r3, #18
 800262c:	d866      	bhi.n	80026fc <_vsnprintf+0x2a4>
 800262e:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <_vsnprintf+0x1dc>)
 8002630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002634:	080026a7 	.word	0x080026a7
 8002638:	080026fd 	.word	0x080026fd
 800263c:	080026dd 	.word	0x080026dd
 8002640:	080026fd 	.word	0x080026fd
 8002644:	08002681 	.word	0x08002681
 8002648:	080026fd 	.word	0x080026fd
 800264c:	080026fd 	.word	0x080026fd
 8002650:	080026fd 	.word	0x080026fd
 8002654:	080026fd 	.word	0x080026fd
 8002658:	080026fd 	.word	0x080026fd
 800265c:	080026fd 	.word	0x080026fd
 8002660:	080026fd 	.word	0x080026fd
 8002664:	080026cd 	.word	0x080026cd
 8002668:	080026fd 	.word	0x080026fd
 800266c:	080026fd 	.word	0x080026fd
 8002670:	080026fd 	.word	0x080026fd
 8002674:	080026fd 	.word	0x080026fd
 8002678:	080026fd 	.word	0x080026fd
 800267c:	080026ed 	.word	0x080026ed
      case 'l' :
        flags |= FLAGS_LONG;
 8002680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002686:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	3301      	adds	r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b6c      	cmp	r3, #108	; 0x6c
 8002694:	d134      	bne.n	8002700 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8002696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800269c:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	3301      	adds	r3, #1
 80026a2:	60bb      	str	r3, [r7, #8]
        }
        break;
 80026a4:	e02c      	b.n	8002700 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 80026a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ac:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3301      	adds	r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b68      	cmp	r3, #104	; 0x68
 80026ba:	d125      	bne.n	8002708 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 80026bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026c2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	3301      	adds	r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
        }
        break;
 80026ca:	e01d      	b.n	8002708 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80026cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	3301      	adds	r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
        break;
 80026da:	e016      	b.n	800270a <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80026dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	3301      	adds	r3, #1
 80026e8:	60bb      	str	r3, [r7, #8]
        break;
 80026ea:	e00e      	b.n	800270a <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80026ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	3301      	adds	r3, #1
 80026f8:	60bb      	str	r3, [r7, #8]
        break;
 80026fa:	e006      	b.n	800270a <_vsnprintf+0x2b2>
      default :
        break;
 80026fc:	bf00      	nop
 80026fe:	e004      	b.n	800270a <_vsnprintf+0x2b2>
        break;
 8002700:	bf00      	nop
 8002702:	e002      	b.n	800270a <_vsnprintf+0x2b2>
 8002704:	080015a7 	.word	0x080015a7
        break;
 8002708:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	3b25      	subs	r3, #37	; 0x25
 8002710:	2b53      	cmp	r3, #83	; 0x53
 8002712:	f200 8360 	bhi.w	8002dd6 <_vsnprintf+0x97e>
 8002716:	a201      	add	r2, pc, #4	; (adr r2, 800271c <_vsnprintf+0x2c4>)
 8002718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271c:	08002dbf 	.word	0x08002dbf
 8002720:	08002dd7 	.word	0x08002dd7
 8002724:	08002dd7 	.word	0x08002dd7
 8002728:	08002dd7 	.word	0x08002dd7
 800272c:	08002dd7 	.word	0x08002dd7
 8002730:	08002dd7 	.word	0x08002dd7
 8002734:	08002dd7 	.word	0x08002dd7
 8002738:	08002dd7 	.word	0x08002dd7
 800273c:	08002dd7 	.word	0x08002dd7
 8002740:	08002dd7 	.word	0x08002dd7
 8002744:	08002dd7 	.word	0x08002dd7
 8002748:	08002dd7 	.word	0x08002dd7
 800274c:	08002dd7 	.word	0x08002dd7
 8002750:	08002dd7 	.word	0x08002dd7
 8002754:	08002dd7 	.word	0x08002dd7
 8002758:	08002dd7 	.word	0x08002dd7
 800275c:	08002dd7 	.word	0x08002dd7
 8002760:	08002dd7 	.word	0x08002dd7
 8002764:	08002dd7 	.word	0x08002dd7
 8002768:	08002dd7 	.word	0x08002dd7
 800276c:	08002dd7 	.word	0x08002dd7
 8002770:	08002dd7 	.word	0x08002dd7
 8002774:	08002dd7 	.word	0x08002dd7
 8002778:	08002dd7 	.word	0x08002dd7
 800277c:	08002dd7 	.word	0x08002dd7
 8002780:	08002dd7 	.word	0x08002dd7
 8002784:	08002dd7 	.word	0x08002dd7
 8002788:	08002dd7 	.word	0x08002dd7
 800278c:	08002dd7 	.word	0x08002dd7
 8002790:	08002dd7 	.word	0x08002dd7
 8002794:	08002dd7 	.word	0x08002dd7
 8002798:	08002dd7 	.word	0x08002dd7
 800279c:	08002b73 	.word	0x08002b73
 80027a0:	08002b23 	.word	0x08002b23
 80027a4:	08002b73 	.word	0x08002b73
 80027a8:	08002dd7 	.word	0x08002dd7
 80027ac:	08002dd7 	.word	0x08002dd7
 80027b0:	08002dd7 	.word	0x08002dd7
 80027b4:	08002dd7 	.word	0x08002dd7
 80027b8:	08002dd7 	.word	0x08002dd7
 80027bc:	08002dd7 	.word	0x08002dd7
 80027c0:	08002dd7 	.word	0x08002dd7
 80027c4:	08002dd7 	.word	0x08002dd7
 80027c8:	08002dd7 	.word	0x08002dd7
 80027cc:	08002dd7 	.word	0x08002dd7
 80027d0:	08002dd7 	.word	0x08002dd7
 80027d4:	08002dd7 	.word	0x08002dd7
 80027d8:	08002dd7 	.word	0x08002dd7
 80027dc:	08002dd7 	.word	0x08002dd7
 80027e0:	08002dd7 	.word	0x08002dd7
 80027e4:	08002dd7 	.word	0x08002dd7
 80027e8:	0800286d 	.word	0x0800286d
 80027ec:	08002dd7 	.word	0x08002dd7
 80027f0:	08002dd7 	.word	0x08002dd7
 80027f4:	08002dd7 	.word	0x08002dd7
 80027f8:	08002dd7 	.word	0x08002dd7
 80027fc:	08002dd7 	.word	0x08002dd7
 8002800:	08002dd7 	.word	0x08002dd7
 8002804:	08002dd7 	.word	0x08002dd7
 8002808:	08002dd7 	.word	0x08002dd7
 800280c:	08002dd7 	.word	0x08002dd7
 8002810:	0800286d 	.word	0x0800286d
 8002814:	08002be3 	.word	0x08002be3
 8002818:	0800286d 	.word	0x0800286d
 800281c:	08002b73 	.word	0x08002b73
 8002820:	08002b23 	.word	0x08002b23
 8002824:	08002b73 	.word	0x08002b73
 8002828:	08002dd7 	.word	0x08002dd7
 800282c:	0800286d 	.word	0x0800286d
 8002830:	08002dd7 	.word	0x08002dd7
 8002834:	08002dd7 	.word	0x08002dd7
 8002838:	08002dd7 	.word	0x08002dd7
 800283c:	08002dd7 	.word	0x08002dd7
 8002840:	08002dd7 	.word	0x08002dd7
 8002844:	0800286d 	.word	0x0800286d
 8002848:	08002d23 	.word	0x08002d23
 800284c:	08002dd7 	.word	0x08002dd7
 8002850:	08002dd7 	.word	0x08002dd7
 8002854:	08002c5b 	.word	0x08002c5b
 8002858:	08002dd7 	.word	0x08002dd7
 800285c:	0800286d 	.word	0x0800286d
 8002860:	08002dd7 	.word	0x08002dd7
 8002864:	08002dd7 	.word	0x08002dd7
 8002868:	0800286d 	.word	0x0800286d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b78      	cmp	r3, #120	; 0x78
 8002872:	d003      	beq.n	800287c <_vsnprintf+0x424>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b58      	cmp	r3, #88	; 0x58
 800287a:	d102      	bne.n	8002882 <_vsnprintf+0x42a>
          base = 16U;
 800287c:	2310      	movs	r3, #16
 800287e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002880:	e013      	b.n	80028aa <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b6f      	cmp	r3, #111	; 0x6f
 8002888:	d102      	bne.n	8002890 <_vsnprintf+0x438>
          base =  8U;
 800288a:	2308      	movs	r3, #8
 800288c:	64bb      	str	r3, [r7, #72]	; 0x48
 800288e:	e00c      	b.n	80028aa <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b62      	cmp	r3, #98	; 0x62
 8002896:	d102      	bne.n	800289e <_vsnprintf+0x446>
          base =  2U;
 8002898:	2302      	movs	r3, #2
 800289a:	64bb      	str	r3, [r7, #72]	; 0x48
 800289c:	e005      	b.n	80028aa <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 800289e:	230a      	movs	r3, #10
 80028a0:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80028a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028a4:	f023 0310 	bic.w	r3, r3, #16
 80028a8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b58      	cmp	r3, #88	; 0x58
 80028b0:	d103      	bne.n	80028ba <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 80028b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b4:	f043 0320 	orr.w	r3, r3, #32
 80028b8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b69      	cmp	r3, #105	; 0x69
 80028c0:	d007      	beq.n	80028d2 <_vsnprintf+0x47a>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d003      	beq.n	80028d2 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80028ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028cc:	f023 030c 	bic.w	r3, r3, #12
 80028d0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80028d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 80028dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b69      	cmp	r3, #105	; 0x69
 80028ea:	d004      	beq.n	80028f6 <_vsnprintf+0x49e>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b64      	cmp	r3, #100	; 0x64
 80028f2:	f040 8098 	bne.w	8002a26 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80028f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d031      	beq.n	8002964 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8002900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002904:	3307      	adds	r3, #7
 8002906:	f023 0307 	bic.w	r3, r3, #7
 800290a:	f103 0208 	add.w	r2, r3, #8
 800290e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800291a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	da06      	bge.n	8002930 <_vsnprintf+0x4d8>
 8002922:	2100      	movs	r1, #0
 8002924:	f1d2 0800 	rsbs	r8, r2, #0
 8002928:	eb61 0903 	sbc.w	r9, r1, r3
 800292c:	4642      	mov	r2, r8
 800292e:	464b      	mov	r3, r9
 8002930:	69f9      	ldr	r1, [r7, #28]
 8002932:	0fc9      	lsrs	r1, r1, #31
 8002934:	b2c9      	uxtb	r1, r1
 8002936:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002938:	2400      	movs	r4, #0
 800293a:	4682      	mov	sl, r0
 800293c:	46a3      	mov	fp, r4
 800293e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002940:	9008      	str	r0, [sp, #32]
 8002942:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002944:	9007      	str	r0, [sp, #28]
 8002946:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002948:	9006      	str	r0, [sp, #24]
 800294a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800294e:	9102      	str	r1, [sp, #8]
 8002950:	e9cd 2300 	strd	r2, r3, [sp]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002958:	6939      	ldr	r1, [r7, #16]
 800295a:	6978      	ldr	r0, [r7, #20]
 800295c:	f7ff f82e 	bl	80019bc <_ntoa_long_long>
 8002960:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002962:	e0da      	b.n	8002b1a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d020      	beq.n	80029b0 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 800296e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002972:	1d1a      	adds	r2, r3, #4
 8002974:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	2b00      	cmp	r3, #0
 8002980:	bfb8      	it	lt
 8002982:	425b      	neglt	r3, r3
 8002984:	4619      	mov	r1, r3
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	0fdb      	lsrs	r3, r3, #31
 800298a:	b2db      	uxtb	r3, r3
 800298c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800298e:	9205      	str	r2, [sp, #20]
 8002990:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002992:	9204      	str	r2, [sp, #16]
 8002994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002996:	9203      	str	r2, [sp, #12]
 8002998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800299a:	9202      	str	r2, [sp, #8]
 800299c:	9301      	str	r3, [sp, #4]
 800299e:	9100      	str	r1, [sp, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029a4:	6939      	ldr	r1, [r7, #16]
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f7fe ffa2 	bl	80018f0 <_ntoa_long>
 80029ac:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80029ae:	e0b4      	b.n	8002b1a <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80029b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <_vsnprintf+0x572>
 80029ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029be:	1d1a      	adds	r2, r3, #4
 80029c0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	e012      	b.n	80029f0 <_vsnprintf+0x598>
 80029ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <_vsnprintf+0x58c>
 80029d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029d8:	1d1a      	adds	r2, r3, #4
 80029da:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	b21b      	sxth	r3, r3
 80029e2:	e005      	b.n	80029f0 <_vsnprintf+0x598>
 80029e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029e8:	1d1a      	adds	r2, r3, #4
 80029ea:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bfb8      	it	lt
 80029f8:	425b      	neglt	r3, r3
 80029fa:	4619      	mov	r1, r3
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	0fdb      	lsrs	r3, r3, #31
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a04:	9205      	str	r2, [sp, #20]
 8002a06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a08:	9204      	str	r2, [sp, #16]
 8002a0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a0c:	9203      	str	r2, [sp, #12]
 8002a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a10:	9202      	str	r2, [sp, #8]
 8002a12:	9301      	str	r3, [sp, #4]
 8002a14:	9100      	str	r1, [sp, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a1a:	6939      	ldr	r1, [r7, #16]
 8002a1c:	6978      	ldr	r0, [r7, #20]
 8002a1e:	f7fe ff67 	bl	80018f0 <_ntoa_long>
 8002a22:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002a24:	e079      	b.n	8002b1a <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d022      	beq.n	8002a76 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8002a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a34:	3307      	adds	r3, #7
 8002a36:	f023 0307 	bic.w	r3, r3, #7
 8002a3a:	f103 0208 	add.w	r2, r3, #8
 8002a3e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002a48:	2000      	movs	r0, #0
 8002a4a:	460d      	mov	r5, r1
 8002a4c:	4606      	mov	r6, r0
 8002a4e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002a50:	9108      	str	r1, [sp, #32]
 8002a52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a54:	9107      	str	r1, [sp, #28]
 8002a56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a58:	9106      	str	r1, [sp, #24]
 8002a5a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8002a5e:	2100      	movs	r1, #0
 8002a60:	9102      	str	r1, [sp, #8]
 8002a62:	e9cd 2300 	strd	r2, r3, [sp]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a6a:	6939      	ldr	r1, [r7, #16]
 8002a6c:	6978      	ldr	r0, [r7, #20]
 8002a6e:	f7fe ffa5 	bl	80019bc <_ntoa_long_long>
 8002a72:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002a74:	e051      	b.n	8002b1a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d018      	beq.n	8002ab2 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a84:	1d1a      	adds	r2, r3, #4
 8002a86:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a8e:	9205      	str	r2, [sp, #20]
 8002a90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a92:	9204      	str	r2, [sp, #16]
 8002a94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a96:	9203      	str	r2, [sp, #12]
 8002a98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a9a:	9202      	str	r2, [sp, #8]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	9201      	str	r2, [sp, #4]
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002aa6:	6939      	ldr	r1, [r7, #16]
 8002aa8:	6978      	ldr	r0, [r7, #20]
 8002aaa:	f7fe ff21 	bl	80018f0 <_ntoa_long>
 8002aae:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002ab0:	e033      	b.n	8002b1a <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <_vsnprintf+0x674>
 8002abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ac0:	1d1a      	adds	r2, r3, #4
 8002ac2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	e012      	b.n	8002af2 <_vsnprintf+0x69a>
 8002acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <_vsnprintf+0x68e>
 8002ad6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ada:	1d1a      	adds	r2, r3, #4
 8002adc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	e005      	b.n	8002af2 <_vsnprintf+0x69a>
 8002ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aea:	1d1a      	adds	r2, r3, #4
 8002aec:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8002af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af6:	9305      	str	r3, [sp, #20]
 8002af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002afa:	9304      	str	r3, [sp, #16]
 8002afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afe:	9303      	str	r3, [sp, #12]
 8002b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b02:	9302      	str	r3, [sp, #8]
 8002b04:	2300      	movs	r3, #0
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b10:	6939      	ldr	r1, [r7, #16]
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f7fe feec 	bl	80018f0 <_ntoa_long>
 8002b18:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
        break;
 8002b20:	e166      	b.n	8002df0 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b46      	cmp	r3, #70	; 0x46
 8002b28:	d103      	bne.n	8002b32 <_vsnprintf+0x6da>
 8002b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2c:	f043 0320 	orr.w	r3, r3, #32
 8002b30:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002b32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b36:	3307      	adds	r3, #7
 8002b38:	f023 0307 	bic.w	r3, r3, #7
 8002b3c:	f103 0208 	add.w	r2, r3, #8
 8002b40:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002b44:	ed93 7b00 	vldr	d7, [r3]
 8002b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b4a:	9302      	str	r3, [sp, #8]
 8002b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	eeb0 0a47 	vmov.f32	s0, s14
 8002b58:	eef0 0a67 	vmov.f32	s1, s15
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b60:	6939      	ldr	r1, [r7, #16]
 8002b62:	6978      	ldr	r0, [r7, #20]
 8002b64:	f7fe ff98 	bl	8001a98 <_ftoa>
 8002b68:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	60bb      	str	r3, [r7, #8]
        break;
 8002b70:	e13e      	b.n	8002df0 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b67      	cmp	r3, #103	; 0x67
 8002b78:	d003      	beq.n	8002b82 <_vsnprintf+0x72a>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b47      	cmp	r3, #71	; 0x47
 8002b80:	d103      	bne.n	8002b8a <_vsnprintf+0x732>
 8002b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b88:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b45      	cmp	r3, #69	; 0x45
 8002b90:	d003      	beq.n	8002b9a <_vsnprintf+0x742>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b47      	cmp	r3, #71	; 0x47
 8002b98:	d103      	bne.n	8002ba2 <_vsnprintf+0x74a>
 8002b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9c:	f043 0320 	orr.w	r3, r3, #32
 8002ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ba6:	3307      	adds	r3, #7
 8002ba8:	f023 0307 	bic.w	r3, r3, #7
 8002bac:	f103 0208 	add.w	r2, r3, #8
 8002bb0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002bb4:	ed93 7b00 	vldr	d7, [r3]
 8002bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bba:	9302      	str	r3, [sp, #8]
 8002bbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	eeb0 0a47 	vmov.f32	s0, s14
 8002bc8:	eef0 0a67 	vmov.f32	s1, s15
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bd0:	6939      	ldr	r1, [r7, #16]
 8002bd2:	6978      	ldr	r0, [r7, #20]
 8002bd4:	f7ff f9b8 	bl	8001f48 <_etoa>
 8002bd8:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
        break;
 8002be0:	e106      	b.n	8002df0 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8002be2:	2301      	movs	r3, #1
 8002be4:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10e      	bne.n	8002c0e <_vsnprintf+0x7b6>
          while (l++ < width) {
 8002bf0:	e007      	b.n	8002c02 <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8002bf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bf4:	1c53      	adds	r3, r2, #1
 8002bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf8:	697c      	ldr	r4, [r7, #20]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6939      	ldr	r1, [r7, #16]
 8002bfe:	2020      	movs	r0, #32
 8002c00:	47a0      	blx	r4
          while (l++ < width) {
 8002c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	647a      	str	r2, [r7, #68]	; 0x44
 8002c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d8f1      	bhi.n	8002bf2 <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002c0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c12:	1d1a      	adds	r2, r3, #4
 8002c14:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	b2d8      	uxtb	r0, r3
 8002c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c1e:	1c53      	adds	r3, r2, #1
 8002c20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c22:	697c      	ldr	r4, [r7, #20]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6939      	ldr	r1, [r7, #16]
 8002c28:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8002c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00e      	beq.n	8002c52 <_vsnprintf+0x7fa>
          while (l++ < width) {
 8002c34:	e007      	b.n	8002c46 <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 8002c36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c38:	1c53      	adds	r3, r2, #1
 8002c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c3c:	697c      	ldr	r4, [r7, #20]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6939      	ldr	r1, [r7, #16]
 8002c42:	2020      	movs	r0, #32
 8002c44:	47a0      	blx	r4
          while (l++ < width) {
 8002c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	647a      	str	r2, [r7, #68]	; 0x44
 8002c4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d8f1      	bhi.n	8002c36 <_vsnprintf+0x7de>
          }
        }
        format++;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3301      	adds	r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
        break;
 8002c58:	e0ca      	b.n	8002df0 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8002c5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c5e:	1d1a      	adds	r2, r3, #4
 8002c60:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8002c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <_vsnprintf+0x81a>
 8002c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c70:	e001      	b.n	8002c76 <_vsnprintf+0x81e>
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
 8002c76:	4619      	mov	r1, r3
 8002c78:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002c7a:	f7fe fcb5 	bl	80015e8 <_strnlen_s>
 8002c7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8002c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 8002c8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	bf28      	it	cs
 8002c92:	4613      	movcs	r3, r2
 8002c94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8002c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d11a      	bne.n	8002cd6 <_vsnprintf+0x87e>
          while (l++ < width) {
 8002ca0:	e007      	b.n	8002cb2 <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 8002ca2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ca4:	1c53      	adds	r3, r2, #1
 8002ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca8:	697c      	ldr	r4, [r7, #20]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6939      	ldr	r1, [r7, #16]
 8002cae:	2020      	movs	r0, #32
 8002cb0:	47a0      	blx	r4
          while (l++ < width) {
 8002cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d8f1      	bhi.n	8002ca2 <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002cbe:	e00a      	b.n	8002cd6 <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 8002cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	643a      	str	r2, [r7, #64]	; 0x40
 8002cc6:	7818      	ldrb	r0, [r3, #0]
 8002cc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cca:	1c53      	adds	r3, r2, #1
 8002ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cce:	697c      	ldr	r4, [r7, #20]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6939      	ldr	r1, [r7, #16]
 8002cd4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <_vsnprintf+0x89a>
 8002cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0eb      	beq.n	8002cc0 <_vsnprintf+0x868>
 8002ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cea:	1e5a      	subs	r2, r3, #1
 8002cec:	657a      	str	r2, [r7, #84]	; 0x54
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1e6      	bne.n	8002cc0 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8002cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00e      	beq.n	8002d1a <_vsnprintf+0x8c2>
          while (l++ < width) {
 8002cfc:	e007      	b.n	8002d0e <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 8002cfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d00:	1c53      	adds	r3, r2, #1
 8002d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d04:	697c      	ldr	r4, [r7, #20]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6939      	ldr	r1, [r7, #16]
 8002d0a:	2020      	movs	r0, #32
 8002d0c:	47a0      	blx	r4
          while (l++ < width) {
 8002d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d8f1      	bhi.n	8002cfe <_vsnprintf+0x8a6>
          }
        }
        format++;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	60bb      	str	r3, [r7, #8]
        break;
 8002d20:	e066      	b.n	8002df0 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8002d22:	2308      	movs	r3, #8
 8002d24:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8002d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d28:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8002d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8002d34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d023      	beq.n	8002d84 <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8002d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d40:	1d1a      	adds	r2, r3, #4
 8002d42:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	603a      	str	r2, [r7, #0]
 8002d4e:	607b      	str	r3, [r7, #4]
 8002d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d52:	9308      	str	r3, [sp, #32]
 8002d54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d56:	9307      	str	r3, [sp, #28]
 8002d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5a:	9306      	str	r3, [sp, #24]
 8002d5c:	f04f 0210 	mov.w	r2, #16
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	9302      	str	r3, [sp, #8]
 8002d6c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002d70:	e9cd 3400 	strd	r3, r4, [sp]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d78:	6939      	ldr	r1, [r7, #16]
 8002d7a:	6978      	ldr	r0, [r7, #20]
 8002d7c:	f7fe fe1e 	bl	80019bc <_ntoa_long_long>
 8002d80:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002d82:	e018      	b.n	8002db6 <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8002d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d88:	1d1a      	adds	r2, r3, #4
 8002d8a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d94:	9305      	str	r3, [sp, #20]
 8002d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d98:	9304      	str	r3, [sp, #16]
 8002d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d9c:	9303      	str	r3, [sp, #12]
 8002d9e:	2310      	movs	r3, #16
 8002da0:	9302      	str	r3, [sp, #8]
 8002da2:	2300      	movs	r3, #0
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	9200      	str	r2, [sp, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dac:	6939      	ldr	r1, [r7, #16]
 8002dae:	6978      	ldr	r0, [r7, #20]
 8002db0:	f7fe fd9e 	bl	80018f0 <_ntoa_long>
 8002db4:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	3301      	adds	r3, #1
 8002dba:	60bb      	str	r3, [r7, #8]
        break;
 8002dbc:	e018      	b.n	8002df0 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8002dbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dc0:	1c53      	adds	r3, r2, #1
 8002dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc4:	697c      	ldr	r4, [r7, #20]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6939      	ldr	r1, [r7, #16]
 8002dca:	2025      	movs	r0, #37	; 0x25
 8002dcc:	47a0      	blx	r4
        format++;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
        break;
 8002dd4:	e00c      	b.n	8002df0 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	7818      	ldrb	r0, [r3, #0]
 8002dda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ddc:	1c53      	adds	r3, r2, #1
 8002dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de0:	697c      	ldr	r4, [r7, #20]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6939      	ldr	r1, [r7, #16]
 8002de6:	47a0      	blx	r4
        format++;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	3301      	adds	r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
        break;
 8002dee:	bf00      	nop
  while (*format)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f47f ab41 	bne.w	800247c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8002dfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <_vsnprintf+0x9b0>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1e5a      	subs	r2, r3, #1
 8002e06:	e000      	b.n	8002e0a <_vsnprintf+0x9b2>
 8002e08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e0a:	697c      	ldr	r4, [r7, #20]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6939      	ldr	r1, [r7, #16]
 8002e10:	2000      	movs	r0, #0
 8002e12:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8002e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3764      	adds	r7, #100	; 0x64
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002e20 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8002e20:	b40f      	push	{r0, r1, r2, r3}
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8002e2e:	1d39      	adds	r1, r7, #4
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3a:	4806      	ldr	r0, [pc, #24]	; (8002e54 <printf_+0x34>)
 8002e3c:	f7ff fb0c 	bl	8002458 <_vsnprintf>
 8002e40:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8002e42:	68fb      	ldr	r3, [r7, #12]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e4e:	b004      	add	sp, #16
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	080015c3 	.word	0x080015c3

08002e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <HAL_MspInit+0x4c>)
 8002e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e62:	4a10      	ldr	r2, [pc, #64]	; (8002ea4 <HAL_MspInit+0x4c>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6613      	str	r3, [r2, #96]	; 0x60
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <HAL_MspInit+0x4c>)
 8002e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_MspInit+0x4c>)
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <HAL_MspInit+0x4c>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	6593      	str	r3, [r2, #88]	; 0x58
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <HAL_MspInit+0x4c>)
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	210f      	movs	r1, #15
 8002e92:	f06f 0001 	mvn.w	r0, #1
 8002e96:	f000 fb75 	bl	8003584 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000

08002ea8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08e      	sub	sp, #56	; 0x38
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002eb6:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <HAL_InitTick+0xe0>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eba:	4a33      	ldr	r2, [pc, #204]	; (8002f88 <HAL_InitTick+0xe0>)
 8002ebc:	f043 0320 	orr.w	r3, r3, #32
 8002ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec2:	4b31      	ldr	r3, [pc, #196]	; (8002f88 <HAL_InitTick+0xe0>)
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ece:	f107 0210 	add.w	r2, r7, #16
 8002ed2:	f107 0314 	add.w	r3, r7, #20
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f001 ff13 	bl	8004d04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d103      	bne.n	8002ef0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ee8:	f001 fee0 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 8002eec:	6378      	str	r0, [r7, #52]	; 0x34
 8002eee:	e004      	b.n	8002efa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ef0:	f001 fedc 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efc:	4a23      	ldr	r2, [pc, #140]	; (8002f8c <HAL_InitTick+0xe4>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	0c9b      	lsrs	r3, r3, #18
 8002f04:	3b01      	subs	r3, #1
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002f08:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_InitTick+0xe8>)
 8002f0a:	4a22      	ldr	r2, [pc, #136]	; (8002f94 <HAL_InitTick+0xec>)
 8002f0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002f0e:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <HAL_InitTick+0xe8>)
 8002f10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f14:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002f16:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <HAL_InitTick+0xe8>)
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002f1c:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <HAL_InitTick+0xe8>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f22:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <HAL_InitTick+0xe8>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_InitTick+0xe8>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002f2e:	4818      	ldr	r0, [pc, #96]	; (8002f90 <HAL_InitTick+0xe8>)
 8002f30:	f002 fc36 	bl	80057a0 <HAL_TIM_Base_Init>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002f3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d11b      	bne.n	8002f7a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002f42:	4813      	ldr	r0, [pc, #76]	; (8002f90 <HAL_InitTick+0xe8>)
 8002f44:	f002 fc8e 	bl	8005864 <HAL_TIM_Base_Start_IT>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002f4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d111      	bne.n	8002f7a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002f56:	2037      	movs	r0, #55	; 0x37
 8002f58:	f000 fb30 	bl	80035bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b0f      	cmp	r3, #15
 8002f60:	d808      	bhi.n	8002f74 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002f62:	2200      	movs	r2, #0
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	2037      	movs	r0, #55	; 0x37
 8002f68:	f000 fb0c 	bl	8003584 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f6c:	4a0a      	ldr	r2, [pc, #40]	; (8002f98 <HAL_InitTick+0xf0>)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e002      	b.n	8002f7a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002f7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3738      	adds	r7, #56	; 0x38
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	431bde83 	.word	0x431bde83
 8002f90:	20000114 	.word	0x20000114
 8002f94:	40001400 	.word	0x40001400
 8002f98:	20000004 	.word	0x20000004

08002f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fa0:	e7fe      	b.n	8002fa0 <NMI_Handler+0x4>

08002fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa6:	e7fe      	b.n	8002fa6 <HardFault_Handler+0x4>

08002fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fac:	e7fe      	b.n	8002fac <MemManage_Handler+0x4>

08002fae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fb2:	e7fe      	b.n	8002fb2 <BusFault_Handler+0x4>

08002fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb8:	e7fe      	b.n	8002fb8 <UsageFault_Handler+0x4>

08002fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002fcc:	4802      	ldr	r0, [pc, #8]	; (8002fd8 <DMA1_Channel6_IRQHandler+0x10>)
 8002fce:	f000 fc9a 	bl	8003906 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	200002b0 	.word	0x200002b0

08002fdc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002fe0:	4802      	ldr	r0, [pc, #8]	; (8002fec <DMA1_Channel7_IRQHandler+0x10>)
 8002fe2:	f000 fc90 	bl	8003906 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	200000cc 	.word	0x200000cc

08002ff0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ff4:	4802      	ldr	r0, [pc, #8]	; (8003000 <I2C1_EV_IRQHandler+0x10>)
 8002ff6:	f000 ffd0 	bl	8003f9a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20000078 	.word	0x20000078

08003004 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <USART2_IRQHandler+0x10>)
 800300a:	f002 ffd3 	bl	8005fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200001e4 	.word	0x200001e4

08003018 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800301c:	4802      	ldr	r0, [pc, #8]	; (8003028 <UART4_IRQHandler+0x10>)
 800301e:	f002 ffc9 	bl	8005fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000160 	.word	0x20000160

0800302c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003030:	4802      	ldr	r0, [pc, #8]	; (800303c <TIM7_IRQHandler+0x10>)
 8003032:	f002 fc87 	bl	8005944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000114 	.word	0x20000114

08003040 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <DMA2_Channel5_IRQHandler+0x10>)
 8003046:	f000 fc5e 	bl	8003906 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000268 	.word	0x20000268

08003054 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <SystemInit+0x20>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	4a05      	ldr	r2, [pc, #20]	; (8003074 <SystemInit+0x20>)
 8003060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800307c:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <MX_UART4_Init+0x58>)
 800307e:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <MX_UART4_Init+0x5c>)
 8003080:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <MX_UART4_Init+0x58>)
 8003084:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003088:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <MX_UART4_Init+0x58>)
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <MX_UART4_Init+0x58>)
 8003092:	2200      	movs	r2, #0
 8003094:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <MX_UART4_Init+0x58>)
 8003098:	2200      	movs	r2, #0
 800309a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <MX_UART4_Init+0x58>)
 800309e:	220c      	movs	r2, #12
 80030a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <MX_UART4_Init+0x58>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <MX_UART4_Init+0x58>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <MX_UART4_Init+0x58>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <MX_UART4_Init+0x58>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80030ba:	4805      	ldr	r0, [pc, #20]	; (80030d0 <MX_UART4_Init+0x58>)
 80030bc:	f002 fe42 	bl	8005d44 <HAL_UART_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80030c6:	f7fe fa69 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000160 	.word	0x20000160
 80030d4:	40004c00 	.word	0x40004c00

080030d8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030dc:	4b14      	ldr	r3, [pc, #80]	; (8003130 <MX_USART2_UART_Init+0x58>)
 80030de:	4a15      	ldr	r2, [pc, #84]	; (8003134 <MX_USART2_UART_Init+0x5c>)
 80030e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80030e2:	4b13      	ldr	r3, [pc, #76]	; (8003130 <MX_USART2_UART_Init+0x58>)
 80030e4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80030e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030ea:	4b11      	ldr	r3, [pc, #68]	; (8003130 <MX_USART2_UART_Init+0x58>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <MX_USART2_UART_Init+0x58>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030f6:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <MX_USART2_UART_Init+0x58>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <MX_USART2_UART_Init+0x58>)
 80030fe:	220c      	movs	r2, #12
 8003100:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <MX_USART2_UART_Init+0x58>)
 8003104:	2200      	movs	r2, #0
 8003106:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <MX_USART2_UART_Init+0x58>)
 800310a:	2200      	movs	r2, #0
 800310c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800310e:	4b08      	ldr	r3, [pc, #32]	; (8003130 <MX_USART2_UART_Init+0x58>)
 8003110:	2200      	movs	r2, #0
 8003112:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <MX_USART2_UART_Init+0x58>)
 8003116:	2200      	movs	r2, #0
 8003118:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800311a:	4805      	ldr	r0, [pc, #20]	; (8003130 <MX_USART2_UART_Init+0x58>)
 800311c:	f002 fe12 	bl	8005d44 <HAL_UART_Init>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003126:	f7fe fa39 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200001e4 	.word	0x200001e4
 8003134:	40004400 	.word	0x40004400

08003138 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b0ae      	sub	sp, #184	; 0xb8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003150:	f107 031c 	add.w	r3, r7, #28
 8003154:	2288      	movs	r2, #136	; 0x88
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f007 faf1 	bl	800a740 <memset>
  if(uartHandle->Instance==UART4)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a73      	ldr	r2, [pc, #460]	; (8003330 <HAL_UART_MspInit+0x1f8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d16d      	bne.n	8003244 <HAL_UART_MspInit+0x10c>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003168:	2308      	movs	r3, #8
 800316a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800316c:	2300      	movs	r3, #0
 800316e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003170:	f107 031c 	add.w	r3, r7, #28
 8003174:	4618      	mov	r0, r3
 8003176:	f001 fe57 	bl	8004e28 <HAL_RCCEx_PeriphCLKConfig>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003180:	f7fe fa0c 	bl	800159c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003184:	4b6b      	ldr	r3, [pc, #428]	; (8003334 <HAL_UART_MspInit+0x1fc>)
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	4a6a      	ldr	r2, [pc, #424]	; (8003334 <HAL_UART_MspInit+0x1fc>)
 800318a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800318e:	6593      	str	r3, [r2, #88]	; 0x58
 8003190:	4b68      	ldr	r3, [pc, #416]	; (8003334 <HAL_UART_MspInit+0x1fc>)
 8003192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319c:	4b65      	ldr	r3, [pc, #404]	; (8003334 <HAL_UART_MspInit+0x1fc>)
 800319e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a0:	4a64      	ldr	r2, [pc, #400]	; (8003334 <HAL_UART_MspInit+0x1fc>)
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031a8:	4b62      	ldr	r3, [pc, #392]	; (8003334 <HAL_UART_MspInit+0x1fc>)
 80031aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031b4:	2303      	movs	r3, #3
 80031b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c6:	2303      	movs	r3, #3
 80031c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80031cc:	2308      	movs	r3, #8
 80031ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80031d6:	4619      	mov	r1, r3
 80031d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031dc:	f000 fc72 	bl	8003ac4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 80031e0:	4b55      	ldr	r3, [pc, #340]	; (8003338 <HAL_UART_MspInit+0x200>)
 80031e2:	4a56      	ldr	r2, [pc, #344]	; (800333c <HAL_UART_MspInit+0x204>)
 80031e4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 80031e6:	4b54      	ldr	r3, [pc, #336]	; (8003338 <HAL_UART_MspInit+0x200>)
 80031e8:	2202      	movs	r2, #2
 80031ea:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ec:	4b52      	ldr	r3, [pc, #328]	; (8003338 <HAL_UART_MspInit+0x200>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f2:	4b51      	ldr	r3, [pc, #324]	; (8003338 <HAL_UART_MspInit+0x200>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031f8:	4b4f      	ldr	r3, [pc, #316]	; (8003338 <HAL_UART_MspInit+0x200>)
 80031fa:	2280      	movs	r2, #128	; 0x80
 80031fc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031fe:	4b4e      	ldr	r3, [pc, #312]	; (8003338 <HAL_UART_MspInit+0x200>)
 8003200:	2200      	movs	r2, #0
 8003202:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003204:	4b4c      	ldr	r3, [pc, #304]	; (8003338 <HAL_UART_MspInit+0x200>)
 8003206:	2200      	movs	r2, #0
 8003208:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800320a:	4b4b      	ldr	r3, [pc, #300]	; (8003338 <HAL_UART_MspInit+0x200>)
 800320c:	2200      	movs	r2, #0
 800320e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003210:	4b49      	ldr	r3, [pc, #292]	; (8003338 <HAL_UART_MspInit+0x200>)
 8003212:	2200      	movs	r2, #0
 8003214:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003216:	4848      	ldr	r0, [pc, #288]	; (8003338 <HAL_UART_MspInit+0x200>)
 8003218:	f000 f9de 	bl	80035d8 <HAL_DMA_Init>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8003222:	f7fe f9bb 	bl	800159c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a43      	ldr	r2, [pc, #268]	; (8003338 <HAL_UART_MspInit+0x200>)
 800322a:	671a      	str	r2, [r3, #112]	; 0x70
 800322c:	4a42      	ldr	r2, [pc, #264]	; (8003338 <HAL_UART_MspInit+0x200>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003232:	2200      	movs	r2, #0
 8003234:	2105      	movs	r1, #5
 8003236:	2034      	movs	r0, #52	; 0x34
 8003238:	f000 f9a4 	bl	8003584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800323c:	2034      	movs	r0, #52	; 0x34
 800323e:	f000 f9bd 	bl	80035bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003242:	e070      	b.n	8003326 <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==USART2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a3d      	ldr	r2, [pc, #244]	; (8003340 <HAL_UART_MspInit+0x208>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d16b      	bne.n	8003326 <HAL_UART_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800324e:	2302      	movs	r3, #2
 8003250:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003252:	2300      	movs	r3, #0
 8003254:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003256:	f107 031c 	add.w	r3, r7, #28
 800325a:	4618      	mov	r0, r3
 800325c:	f001 fde4 	bl	8004e28 <HAL_RCCEx_PeriphCLKConfig>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_UART_MspInit+0x132>
      Error_Handler();
 8003266:	f7fe f999 	bl	800159c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800326a:	4b32      	ldr	r3, [pc, #200]	; (8003334 <HAL_UART_MspInit+0x1fc>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	4a31      	ldr	r2, [pc, #196]	; (8003334 <HAL_UART_MspInit+0x1fc>)
 8003270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003274:	6593      	str	r3, [r2, #88]	; 0x58
 8003276:	4b2f      	ldr	r3, [pc, #188]	; (8003334 <HAL_UART_MspInit+0x1fc>)
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003282:	4b2c      	ldr	r3, [pc, #176]	; (8003334 <HAL_UART_MspInit+0x1fc>)
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	4a2b      	ldr	r2, [pc, #172]	; (8003334 <HAL_UART_MspInit+0x1fc>)
 8003288:	f043 0308 	orr.w	r3, r3, #8
 800328c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800328e:	4b29      	ldr	r3, [pc, #164]	; (8003334 <HAL_UART_MspInit+0x1fc>)
 8003290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800329a:	2360      	movs	r3, #96	; 0x60
 800329c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a0:	2302      	movs	r3, #2
 80032a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ac:	2303      	movs	r3, #3
 80032ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032b2:	2307      	movs	r3, #7
 80032b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80032bc:	4619      	mov	r1, r3
 80032be:	4821      	ldr	r0, [pc, #132]	; (8003344 <HAL_UART_MspInit+0x20c>)
 80032c0:	f000 fc00 	bl	8003ac4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80032c4:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_UART_MspInit+0x210>)
 80032c6:	4a21      	ldr	r2, [pc, #132]	; (800334c <HAL_UART_MspInit+0x214>)
 80032c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80032ca:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <HAL_UART_MspInit+0x210>)
 80032cc:	2202      	movs	r2, #2
 80032ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032d0:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_UART_MspInit+0x210>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032d6:	4b1c      	ldr	r3, [pc, #112]	; (8003348 <HAL_UART_MspInit+0x210>)
 80032d8:	2200      	movs	r2, #0
 80032da:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032dc:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_UART_MspInit+0x210>)
 80032de:	2280      	movs	r2, #128	; 0x80
 80032e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032e2:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_UART_MspInit+0x210>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032e8:	4b17      	ldr	r3, [pc, #92]	; (8003348 <HAL_UART_MspInit+0x210>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_UART_MspInit+0x210>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032f4:	4b14      	ldr	r3, [pc, #80]	; (8003348 <HAL_UART_MspInit+0x210>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80032fa:	4813      	ldr	r0, [pc, #76]	; (8003348 <HAL_UART_MspInit+0x210>)
 80032fc:	f000 f96c 	bl	80035d8 <HAL_DMA_Init>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8003306:	f7fe f949 	bl	800159c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a0e      	ldr	r2, [pc, #56]	; (8003348 <HAL_UART_MspInit+0x210>)
 800330e:	671a      	str	r2, [r3, #112]	; 0x70
 8003310:	4a0d      	ldr	r2, [pc, #52]	; (8003348 <HAL_UART_MspInit+0x210>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003316:	2200      	movs	r2, #0
 8003318:	2105      	movs	r1, #5
 800331a:	2026      	movs	r0, #38	; 0x26
 800331c:	f000 f932 	bl	8003584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003320:	2026      	movs	r0, #38	; 0x26
 8003322:	f000 f94b 	bl	80035bc <HAL_NVIC_EnableIRQ>
}
 8003326:	bf00      	nop
 8003328:	37b8      	adds	r7, #184	; 0xb8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40004c00 	.word	0x40004c00
 8003334:	40021000 	.word	0x40021000
 8003338:	20000268 	.word	0x20000268
 800333c:	40020458 	.word	0x40020458
 8003340:	40004400 	.word	0x40004400
 8003344:	48000c00 	.word	0x48000c00
 8003348:	200002b0 	.word	0x200002b0
 800334c:	4002006c 	.word	0x4002006c

08003350 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003388 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003354:	f7ff fe7e 	bl	8003054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003358:	480c      	ldr	r0, [pc, #48]	; (800338c <LoopForever+0x6>)
  ldr r1, =_edata
 800335a:	490d      	ldr	r1, [pc, #52]	; (8003390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800335c:	4a0d      	ldr	r2, [pc, #52]	; (8003394 <LoopForever+0xe>)
  movs r3, #0
 800335e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003360:	e002      	b.n	8003368 <LoopCopyDataInit>

08003362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003366:	3304      	adds	r3, #4

08003368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800336a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800336c:	d3f9      	bcc.n	8003362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003370:	4c0a      	ldr	r4, [pc, #40]	; (800339c <LoopForever+0x16>)
  movs r3, #0
 8003372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003374:	e001      	b.n	800337a <LoopFillZerobss>

08003376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003378:	3204      	adds	r2, #4

0800337a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800337a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800337c:	d3fb      	bcc.n	8003376 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800337e:	f007 f9ad 	bl	800a6dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003382:	f7fe f88d 	bl	80014a0 <main>

08003386 <LoopForever>:

LoopForever:
    b LoopForever
 8003386:	e7fe      	b.n	8003386 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003388:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800338c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003390:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003394:	0800a968 	.word	0x0800a968
  ldr r2, =_sbss
 8003398:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800339c:	2000375c 	.word	0x2000375c

080033a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033a0:	e7fe      	b.n	80033a0 <ADC1_2_IRQHandler>

080033a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033ac:	2003      	movs	r0, #3
 80033ae:	f000 f8de 	bl	800356e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033b2:	200f      	movs	r0, #15
 80033b4:	f7ff fd78 	bl	8002ea8 <HAL_InitTick>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	71fb      	strb	r3, [r7, #7]
 80033c2:	e001      	b.n	80033c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033c4:	f7ff fd48 	bl	8002e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033c8:	79fb      	ldrb	r3, [r7, #7]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_IncTick+0x20>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_IncTick+0x24>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4413      	add	r3, r2
 80033e4:	4a04      	ldr	r2, [pc, #16]	; (80033f8 <HAL_IncTick+0x24>)
 80033e6:	6013      	str	r3, [r2, #0]
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000008 	.word	0x20000008
 80033f8:	200002f8 	.word	0x200002f8

080033fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <HAL_GetTick+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	200002f8 	.word	0x200002f8

08003414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <__NVIC_SetPriorityGrouping+0x44>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003430:	4013      	ands	r3, r2
 8003432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800343c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003446:	4a04      	ldr	r2, [pc, #16]	; (8003458 <__NVIC_SetPriorityGrouping+0x44>)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	60d3      	str	r3, [r2, #12]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <__NVIC_GetPriorityGrouping+0x18>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	f003 0307 	and.w	r3, r3, #7
}
 800346a:	4618      	mov	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003486:	2b00      	cmp	r3, #0
 8003488:	db0b      	blt.n	80034a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	f003 021f 	and.w	r2, r3, #31
 8003490:	4907      	ldr	r1, [pc, #28]	; (80034b0 <__NVIC_EnableIRQ+0x38>)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	2001      	movs	r0, #1
 800349a:	fa00 f202 	lsl.w	r2, r0, r2
 800349e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	e000e100 	.word	0xe000e100

080034b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	6039      	str	r1, [r7, #0]
 80034be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	db0a      	blt.n	80034de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	490c      	ldr	r1, [pc, #48]	; (8003500 <__NVIC_SetPriority+0x4c>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	0112      	lsls	r2, r2, #4
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	440b      	add	r3, r1
 80034d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034dc:	e00a      	b.n	80034f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	4908      	ldr	r1, [pc, #32]	; (8003504 <__NVIC_SetPriority+0x50>)
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	3b04      	subs	r3, #4
 80034ec:	0112      	lsls	r2, r2, #4
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	440b      	add	r3, r1
 80034f2:	761a      	strb	r2, [r3, #24]
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000e100 	.word	0xe000e100
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003508:	b480      	push	{r7}
 800350a:	b089      	sub	sp, #36	; 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f1c3 0307 	rsb	r3, r3, #7
 8003522:	2b04      	cmp	r3, #4
 8003524:	bf28      	it	cs
 8003526:	2304      	movcs	r3, #4
 8003528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3304      	adds	r3, #4
 800352e:	2b06      	cmp	r3, #6
 8003530:	d902      	bls.n	8003538 <NVIC_EncodePriority+0x30>
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3b03      	subs	r3, #3
 8003536:	e000      	b.n	800353a <NVIC_EncodePriority+0x32>
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	f04f 32ff 	mov.w	r2, #4294967295
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43da      	mvns	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	401a      	ands	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003550:	f04f 31ff 	mov.w	r1, #4294967295
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	fa01 f303 	lsl.w	r3, r1, r3
 800355a:	43d9      	mvns	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003560:	4313      	orrs	r3, r2
         );
}
 8003562:	4618      	mov	r0, r3
 8003564:	3724      	adds	r7, #36	; 0x24
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff ff4c 	bl	8003414 <__NVIC_SetPriorityGrouping>
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003596:	f7ff ff61 	bl	800345c <__NVIC_GetPriorityGrouping>
 800359a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	6978      	ldr	r0, [r7, #20]
 80035a2:	f7ff ffb1 	bl	8003508 <NVIC_EncodePriority>
 80035a6:	4602      	mov	r2, r0
 80035a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff ff80 	bl	80034b4 <__NVIC_SetPriority>
}
 80035b4:	bf00      	nop
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff ff54 	bl	8003478 <__NVIC_EnableIRQ>
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e098      	b.n	800371c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	4b4d      	ldr	r3, [pc, #308]	; (8003728 <HAL_DMA_Init+0x150>)
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d80f      	bhi.n	8003616 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b4b      	ldr	r3, [pc, #300]	; (800372c <HAL_DMA_Init+0x154>)
 80035fe:	4413      	add	r3, r2
 8003600:	4a4b      	ldr	r2, [pc, #300]	; (8003730 <HAL_DMA_Init+0x158>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	009a      	lsls	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a48      	ldr	r2, [pc, #288]	; (8003734 <HAL_DMA_Init+0x15c>)
 8003612:	641a      	str	r2, [r3, #64]	; 0x40
 8003614:	e00e      	b.n	8003634 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	4b46      	ldr	r3, [pc, #280]	; (8003738 <HAL_DMA_Init+0x160>)
 800361e:	4413      	add	r3, r2
 8003620:	4a43      	ldr	r2, [pc, #268]	; (8003730 <HAL_DMA_Init+0x158>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	009a      	lsls	r2, r3, #2
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a42      	ldr	r2, [pc, #264]	; (800373c <HAL_DMA_Init+0x164>)
 8003632:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003658:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003664:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003670:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800368e:	d039      	beq.n	8003704 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	4a27      	ldr	r2, [pc, #156]	; (8003734 <HAL_DMA_Init+0x15c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d11a      	bne.n	80036d0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800369a:	4b29      	ldr	r3, [pc, #164]	; (8003740 <HAL_DMA_Init+0x168>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f003 031c 	and.w	r3, r3, #28
 80036a6:	210f      	movs	r1, #15
 80036a8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	4924      	ldr	r1, [pc, #144]	; (8003740 <HAL_DMA_Init+0x168>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036b4:	4b22      	ldr	r3, [pc, #136]	; (8003740 <HAL_DMA_Init+0x168>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c0:	f003 031c 	and.w	r3, r3, #28
 80036c4:	fa01 f303 	lsl.w	r3, r1, r3
 80036c8:	491d      	ldr	r1, [pc, #116]	; (8003740 <HAL_DMA_Init+0x168>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]
 80036ce:	e019      	b.n	8003704 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80036d0:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <HAL_DMA_Init+0x16c>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	f003 031c 	and.w	r3, r3, #28
 80036dc:	210f      	movs	r1, #15
 80036de:	fa01 f303 	lsl.w	r3, r1, r3
 80036e2:	43db      	mvns	r3, r3
 80036e4:	4917      	ldr	r1, [pc, #92]	; (8003744 <HAL_DMA_Init+0x16c>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036ea:	4b16      	ldr	r3, [pc, #88]	; (8003744 <HAL_DMA_Init+0x16c>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6859      	ldr	r1, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	f003 031c 	and.w	r3, r3, #28
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	4911      	ldr	r1, [pc, #68]	; (8003744 <HAL_DMA_Init+0x16c>)
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	40020407 	.word	0x40020407
 800372c:	bffdfff8 	.word	0xbffdfff8
 8003730:	cccccccd 	.word	0xcccccccd
 8003734:	40020000 	.word	0x40020000
 8003738:	bffdfbf8 	.word	0xbffdfbf8
 800373c:	40020400 	.word	0x40020400
 8003740:	400200a8 	.word	0x400200a8
 8003744:	400204a8 	.word	0x400204a8

08003748 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_DMA_Start_IT+0x20>
 8003764:	2302      	movs	r3, #2
 8003766:	e04b      	b.n	8003800 <HAL_DMA_Start_IT+0xb8>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b01      	cmp	r3, #1
 800377a:	d13a      	bne.n	80037f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f95f 	bl	8003a64 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 020e 	orr.w	r2, r2, #14
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e00f      	b.n	80037e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0204 	bic.w	r2, r2, #4
 80037ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 020a 	orr.w	r2, r2, #10
 80037de:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e005      	b.n	80037fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037fa:	2302      	movs	r3, #2
 80037fc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d008      	beq.n	8003832 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2204      	movs	r2, #4
 8003824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e022      	b.n	8003878 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 020e 	bic.w	r2, r2, #14
 8003840:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f003 021c 	and.w	r2, r3, #28
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	2101      	movs	r1, #1
 8003860:	fa01 f202 	lsl.w	r2, r1, r2
 8003864:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003876:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d005      	beq.n	80038a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2204      	movs	r2, #4
 80038a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
 80038a6:	e029      	b.n	80038fc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 020e 	bic.w	r2, r2, #14
 80038b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	f003 021c 	and.w	r2, r3, #28
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	2101      	movs	r1, #1
 80038d6:	fa01 f202 	lsl.w	r2, r1, r2
 80038da:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
    }
  }
  return status;
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f003 031c 	and.w	r3, r3, #28
 8003926:	2204      	movs	r2, #4
 8003928:	409a      	lsls	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4013      	ands	r3, r2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d026      	beq.n	8003980 <HAL_DMA_IRQHandler+0x7a>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d021      	beq.n	8003980 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d107      	bne.n	800395a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0204 	bic.w	r2, r2, #4
 8003958:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f003 021c 	and.w	r2, r3, #28
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	2104      	movs	r1, #4
 8003968:	fa01 f202 	lsl.w	r2, r1, r2
 800396c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	2b00      	cmp	r3, #0
 8003974:	d071      	beq.n	8003a5a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800397e:	e06c      	b.n	8003a5a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003984:	f003 031c 	and.w	r3, r3, #28
 8003988:	2202      	movs	r2, #2
 800398a:	409a      	lsls	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d02e      	beq.n	80039f2 <HAL_DMA_IRQHandler+0xec>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d029      	beq.n	80039f2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10b      	bne.n	80039c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 020a 	bic.w	r2, r2, #10
 80039ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c8:	f003 021c 	and.w	r2, r3, #28
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	2102      	movs	r1, #2
 80039d2:	fa01 f202 	lsl.w	r2, r1, r2
 80039d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d038      	beq.n	8003a5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80039f0:	e033      	b.n	8003a5a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f003 031c 	and.w	r3, r3, #28
 80039fa:	2208      	movs	r2, #8
 80039fc:	409a      	lsls	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d02a      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x156>
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d025      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 020e 	bic.w	r2, r2, #14
 8003a1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a24:	f003 021c 	and.w	r2, r3, #28
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a5a:	bf00      	nop
 8003a5c:	bf00      	nop
}
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f003 021c 	and.w	r2, r3, #28
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	2101      	movs	r1, #1
 8003a80:	fa01 f202 	lsl.w	r2, r1, r2
 8003a84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d108      	bne.n	8003aa8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003aa6:	e007      	b.n	8003ab8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	60da      	str	r2, [r3, #12]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad2:	e17f      	b.n	8003dd4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	2101      	movs	r1, #1
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 8171 	beq.w	8003dce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d005      	beq.n	8003b04 <HAL_GPIO_Init+0x40>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d130      	bne.n	8003b66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	2203      	movs	r2, #3
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	f003 0201 	and.w	r2, r3, #1
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d118      	bne.n	8003ba4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003b78:	2201      	movs	r2, #1
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	08db      	lsrs	r3, r3, #3
 8003b8e:	f003 0201 	and.w	r2, r3, #1
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d017      	beq.n	8003be0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	2203      	movs	r2, #3
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d123      	bne.n	8003c34 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	08da      	lsrs	r2, r3, #3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3208      	adds	r2, #8
 8003bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	220f      	movs	r2, #15
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	08da      	lsrs	r2, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3208      	adds	r2, #8
 8003c2e:	6939      	ldr	r1, [r7, #16]
 8003c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	2203      	movs	r2, #3
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0203 	and.w	r2, r3, #3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80ac 	beq.w	8003dce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c76:	4b5f      	ldr	r3, [pc, #380]	; (8003df4 <HAL_GPIO_Init+0x330>)
 8003c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c7a:	4a5e      	ldr	r2, [pc, #376]	; (8003df4 <HAL_GPIO_Init+0x330>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	6613      	str	r3, [r2, #96]	; 0x60
 8003c82:	4b5c      	ldr	r3, [pc, #368]	; (8003df4 <HAL_GPIO_Init+0x330>)
 8003c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	60bb      	str	r3, [r7, #8]
 8003c8c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c8e:	4a5a      	ldr	r2, [pc, #360]	; (8003df8 <HAL_GPIO_Init+0x334>)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	3302      	adds	r3, #2
 8003c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	220f      	movs	r2, #15
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cb8:	d025      	beq.n	8003d06 <HAL_GPIO_Init+0x242>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a4f      	ldr	r2, [pc, #316]	; (8003dfc <HAL_GPIO_Init+0x338>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01f      	beq.n	8003d02 <HAL_GPIO_Init+0x23e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a4e      	ldr	r2, [pc, #312]	; (8003e00 <HAL_GPIO_Init+0x33c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d019      	beq.n	8003cfe <HAL_GPIO_Init+0x23a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a4d      	ldr	r2, [pc, #308]	; (8003e04 <HAL_GPIO_Init+0x340>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_GPIO_Init+0x236>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a4c      	ldr	r2, [pc, #304]	; (8003e08 <HAL_GPIO_Init+0x344>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00d      	beq.n	8003cf6 <HAL_GPIO_Init+0x232>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a4b      	ldr	r2, [pc, #300]	; (8003e0c <HAL_GPIO_Init+0x348>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d007      	beq.n	8003cf2 <HAL_GPIO_Init+0x22e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a4a      	ldr	r2, [pc, #296]	; (8003e10 <HAL_GPIO_Init+0x34c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d101      	bne.n	8003cee <HAL_GPIO_Init+0x22a>
 8003cea:	2306      	movs	r3, #6
 8003cec:	e00c      	b.n	8003d08 <HAL_GPIO_Init+0x244>
 8003cee:	2307      	movs	r3, #7
 8003cf0:	e00a      	b.n	8003d08 <HAL_GPIO_Init+0x244>
 8003cf2:	2305      	movs	r3, #5
 8003cf4:	e008      	b.n	8003d08 <HAL_GPIO_Init+0x244>
 8003cf6:	2304      	movs	r3, #4
 8003cf8:	e006      	b.n	8003d08 <HAL_GPIO_Init+0x244>
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e004      	b.n	8003d08 <HAL_GPIO_Init+0x244>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e002      	b.n	8003d08 <HAL_GPIO_Init+0x244>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_GPIO_Init+0x244>
 8003d06:	2300      	movs	r3, #0
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	f002 0203 	and.w	r2, r2, #3
 8003d0e:	0092      	lsls	r2, r2, #2
 8003d10:	4093      	lsls	r3, r2
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d18:	4937      	ldr	r1, [pc, #220]	; (8003df8 <HAL_GPIO_Init+0x334>)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	089b      	lsrs	r3, r3, #2
 8003d1e:	3302      	adds	r3, #2
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d26:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <HAL_GPIO_Init+0x350>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4013      	ands	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d4a:	4a32      	ldr	r2, [pc, #200]	; (8003e14 <HAL_GPIO_Init+0x350>)
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d50:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <HAL_GPIO_Init+0x350>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d74:	4a27      	ldr	r2, [pc, #156]	; (8003e14 <HAL_GPIO_Init+0x350>)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d7a:	4b26      	ldr	r3, [pc, #152]	; (8003e14 <HAL_GPIO_Init+0x350>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	43db      	mvns	r3, r3
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d9e:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <HAL_GPIO_Init+0x350>)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003da4:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <HAL_GPIO_Init+0x350>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4013      	ands	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dc8:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <HAL_GPIO_Init+0x350>)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	fa22 f303 	lsr.w	r3, r2, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f47f ae78 	bne.w	8003ad4 <HAL_GPIO_Init+0x10>
  }
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	48000400 	.word	0x48000400
 8003e00:	48000800 	.word	0x48000800
 8003e04:	48000c00 	.word	0x48000c00
 8003e08:	48001000 	.word	0x48001000
 8003e0c:	48001400 	.word	0x48001400
 8003e10:	48001800 	.word	0x48001800
 8003e14:	40010400 	.word	0x40010400

08003e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	807b      	strh	r3, [r7, #2]
 8003e24:	4613      	mov	r3, r2
 8003e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e28:	787b      	ldrb	r3, [r7, #1]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e2e:	887a      	ldrh	r2, [r7, #2]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e34:	e002      	b.n	8003e3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e36:	887a      	ldrh	r2, [r7, #2]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e5a:	887a      	ldrh	r2, [r7, #2]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	041a      	lsls	r2, r3, #16
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	43d9      	mvns	r1, r3
 8003e66:	887b      	ldrh	r3, [r7, #2]
 8003e68:	400b      	ands	r3, r1
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	619a      	str	r2, [r3, #24]
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e081      	b.n	8003f92 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fd fa6a 	bl	800137c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2224      	movs	r2, #36	; 0x24
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ecc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003edc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d107      	bne.n	8003ef6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ef2:	609a      	str	r2, [r3, #8]
 8003ef4:	e006      	b.n	8003f04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d104      	bne.n	8003f16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69d9      	ldr	r1, [r3, #28]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1a      	ldr	r2, [r3, #32]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	68f9      	ldr	r1, [r7, #12]
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	4798      	blx	r3
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d138      	bne.n	8004056 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e032      	b.n	8004058 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2224      	movs	r2, #36	; 0x24
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004020:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e000      	b.n	8004058 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
  }
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b20      	cmp	r3, #32
 8004078:	d139      	bne.n	80040ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004084:	2302      	movs	r3, #2
 8004086:	e033      	b.n	80040f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2224      	movs	r2, #36	; 0x24
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	e000      	b.n	80040f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040ee:	2302      	movs	r3, #2
  }
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <HAL_PWREx_GetVoltageRange+0x18>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004108:	4618      	mov	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40007000 	.word	0x40007000

08004118 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004126:	d130      	bne.n	800418a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004128:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004134:	d038      	beq.n	80041a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004136:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800413e:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004140:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004144:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004146:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2232      	movs	r2, #50	; 0x32
 800414c:	fb02 f303 	mul.w	r3, r2, r3
 8004150:	4a1b      	ldr	r2, [pc, #108]	; (80041c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	0c9b      	lsrs	r3, r3, #18
 8004158:	3301      	adds	r3, #1
 800415a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800415c:	e002      	b.n	8004164 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3b01      	subs	r3, #1
 8004162:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004164:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004170:	d102      	bne.n	8004178 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f2      	bne.n	800415e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004178:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004184:	d110      	bne.n	80041a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e00f      	b.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004196:	d007      	beq.n	80041a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004198:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041a0:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40007000 	.word	0x40007000
 80041bc:	20000000 	.word	0x20000000
 80041c0:	431bde83 	.word	0x431bde83

080041c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e3ca      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d6:	4b97      	ldr	r3, [pc, #604]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041e0:	4b94      	ldr	r3, [pc, #592]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 80e4 	beq.w	80043c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_RCC_OscConfig+0x4a>
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b0c      	cmp	r3, #12
 8004202:	f040 808b 	bne.w	800431c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b01      	cmp	r3, #1
 800420a:	f040 8087 	bne.w	800431c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800420e:	4b89      	ldr	r3, [pc, #548]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <HAL_RCC_OscConfig+0x62>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e3a2      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1a      	ldr	r2, [r3, #32]
 800422a:	4b82      	ldr	r3, [pc, #520]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d004      	beq.n	8004240 <HAL_RCC_OscConfig+0x7c>
 8004236:	4b7f      	ldr	r3, [pc, #508]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800423e:	e005      	b.n	800424c <HAL_RCC_OscConfig+0x88>
 8004240:	4b7c      	ldr	r3, [pc, #496]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004246:	091b      	lsrs	r3, r3, #4
 8004248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800424c:	4293      	cmp	r3, r2
 800424e:	d223      	bcs.n	8004298 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fd87 	bl	8004d68 <RCC_SetFlashLatencyFromMSIRange>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e383      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004264:	4b73      	ldr	r3, [pc, #460]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a72      	ldr	r2, [pc, #456]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 800426a:	f043 0308 	orr.w	r3, r3, #8
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	4b70      	ldr	r3, [pc, #448]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	496d      	ldr	r1, [pc, #436]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004282:	4b6c      	ldr	r3, [pc, #432]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	4968      	ldr	r1, [pc, #416]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004292:	4313      	orrs	r3, r2
 8004294:	604b      	str	r3, [r1, #4]
 8004296:	e025      	b.n	80042e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004298:	4b66      	ldr	r3, [pc, #408]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a65      	ldr	r2, [pc, #404]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 800429e:	f043 0308 	orr.w	r3, r3, #8
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	4b63      	ldr	r3, [pc, #396]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	4960      	ldr	r1, [pc, #384]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042b6:	4b5f      	ldr	r3, [pc, #380]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	495b      	ldr	r1, [pc, #364]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d109      	bne.n	80042e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fd47 	bl	8004d68 <RCC_SetFlashLatencyFromMSIRange>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e343      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042e4:	f000 fc4a 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b52      	ldr	r3, [pc, #328]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	091b      	lsrs	r3, r3, #4
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	4950      	ldr	r1, [pc, #320]	; (8004438 <HAL_RCC_OscConfig+0x274>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004300:	4a4e      	ldr	r2, [pc, #312]	; (800443c <HAL_RCC_OscConfig+0x278>)
 8004302:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004304:	4b4e      	ldr	r3, [pc, #312]	; (8004440 <HAL_RCC_OscConfig+0x27c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe fdcd 	bl	8002ea8 <HAL_InitTick>
 800430e:	4603      	mov	r3, r0
 8004310:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d052      	beq.n	80043be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	e327      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d032      	beq.n	800438a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004324:	4b43      	ldr	r3, [pc, #268]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a42      	ldr	r2, [pc, #264]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004330:	f7ff f864 	bl	80033fc <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004338:	f7ff f860 	bl	80033fc <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e310      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800434a:	4b3a      	ldr	r3, [pc, #232]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004356:	4b37      	ldr	r3, [pc, #220]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a36      	ldr	r2, [pc, #216]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 800435c:	f043 0308 	orr.w	r3, r3, #8
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4b34      	ldr	r3, [pc, #208]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4931      	ldr	r1, [pc, #196]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004374:	4b2f      	ldr	r3, [pc, #188]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	492c      	ldr	r1, [pc, #176]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004384:	4313      	orrs	r3, r2
 8004386:	604b      	str	r3, [r1, #4]
 8004388:	e01a      	b.n	80043c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800438a:	4b2a      	ldr	r3, [pc, #168]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a29      	ldr	r2, [pc, #164]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004396:	f7ff f831 	bl	80033fc <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800439e:	f7ff f82d 	bl	80033fc <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e2dd      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043b0:	4b20      	ldr	r3, [pc, #128]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f0      	bne.n	800439e <HAL_RCC_OscConfig+0x1da>
 80043bc:	e000      	b.n	80043c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d074      	beq.n	80044b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d005      	beq.n	80043de <HAL_RCC_OscConfig+0x21a>
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b0c      	cmp	r3, #12
 80043d6:	d10e      	bne.n	80043f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d10b      	bne.n	80043f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043de:	4b15      	ldr	r3, [pc, #84]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d064      	beq.n	80044b4 <HAL_RCC_OscConfig+0x2f0>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d160      	bne.n	80044b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e2ba      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fe:	d106      	bne.n	800440e <HAL_RCC_OscConfig+0x24a>
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0b      	ldr	r2, [pc, #44]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	e026      	b.n	800445c <HAL_RCC_OscConfig+0x298>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004416:	d115      	bne.n	8004444 <HAL_RCC_OscConfig+0x280>
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a05      	ldr	r2, [pc, #20]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 800441e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a02      	ldr	r2, [pc, #8]	; (8004434 <HAL_RCC_OscConfig+0x270>)
 800442a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	e014      	b.n	800445c <HAL_RCC_OscConfig+0x298>
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000
 8004438:	0800a910 	.word	0x0800a910
 800443c:	20000000 	.word	0x20000000
 8004440:	20000004 	.word	0x20000004
 8004444:	4ba0      	ldr	r3, [pc, #640]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a9f      	ldr	r2, [pc, #636]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 800444a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	4b9d      	ldr	r3, [pc, #628]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a9c      	ldr	r2, [pc, #624]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 8004456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800445a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d013      	beq.n	800448c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004464:	f7fe ffca 	bl	80033fc <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800446c:	f7fe ffc6 	bl	80033fc <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	; 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e276      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800447e:	4b92      	ldr	r3, [pc, #584]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCC_OscConfig+0x2a8>
 800448a:	e014      	b.n	80044b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448c:	f7fe ffb6 	bl	80033fc <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004494:	f7fe ffb2 	bl	80033fc <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b64      	cmp	r3, #100	; 0x64
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e262      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044a6:	4b88      	ldr	r3, [pc, #544]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x2d0>
 80044b2:	e000      	b.n	80044b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d060      	beq.n	8004584 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_OscConfig+0x310>
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2b0c      	cmp	r3, #12
 80044cc:	d119      	bne.n	8004502 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d116      	bne.n	8004502 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d4:	4b7c      	ldr	r3, [pc, #496]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_OscConfig+0x328>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e23f      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ec:	4b76      	ldr	r3, [pc, #472]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	061b      	lsls	r3, r3, #24
 80044fa:	4973      	ldr	r1, [pc, #460]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004500:	e040      	b.n	8004584 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d023      	beq.n	8004552 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800450a:	4b6f      	ldr	r3, [pc, #444]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a6e      	ldr	r2, [pc, #440]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 8004510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004516:	f7fe ff71 	bl	80033fc <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451e:	f7fe ff6d 	bl	80033fc <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e21d      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004530:	4b65      	ldr	r3, [pc, #404]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453c:	4b62      	ldr	r3, [pc, #392]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	061b      	lsls	r3, r3, #24
 800454a:	495f      	ldr	r1, [pc, #380]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 800454c:	4313      	orrs	r3, r2
 800454e:	604b      	str	r3, [r1, #4]
 8004550:	e018      	b.n	8004584 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004552:	4b5d      	ldr	r3, [pc, #372]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a5c      	ldr	r2, [pc, #368]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 8004558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800455c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455e:	f7fe ff4d 	bl	80033fc <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004566:	f7fe ff49 	bl	80033fc <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e1f9      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004578:	4b53      	ldr	r3, [pc, #332]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f0      	bne.n	8004566 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d03c      	beq.n	800460a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01c      	beq.n	80045d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004598:	4b4b      	ldr	r3, [pc, #300]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 800459a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800459e:	4a4a      	ldr	r2, [pc, #296]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fe ff28 	bl	80033fc <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b0:	f7fe ff24 	bl	80033fc <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e1d4      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045c2:	4b41      	ldr	r3, [pc, #260]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 80045c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ef      	beq.n	80045b0 <HAL_RCC_OscConfig+0x3ec>
 80045d0:	e01b      	b.n	800460a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045d2:	4b3d      	ldr	r3, [pc, #244]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 80045d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d8:	4a3b      	ldr	r2, [pc, #236]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e2:	f7fe ff0b 	bl	80033fc <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ea:	f7fe ff07 	bl	80033fc <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e1b7      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045fc:	4b32      	ldr	r3, [pc, #200]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 80045fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1ef      	bne.n	80045ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 80a6 	beq.w	8004764 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004618:	2300      	movs	r3, #0
 800461a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800461c:	4b2a      	ldr	r3, [pc, #168]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10d      	bne.n	8004644 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004628:	4b27      	ldr	r3, [pc, #156]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 800462a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462c:	4a26      	ldr	r2, [pc, #152]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 800462e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004632:	6593      	str	r3, [r2, #88]	; 0x58
 8004634:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 8004636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004640:	2301      	movs	r3, #1
 8004642:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004644:	4b21      	ldr	r3, [pc, #132]	; (80046cc <HAL_RCC_OscConfig+0x508>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d118      	bne.n	8004682 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004650:	4b1e      	ldr	r3, [pc, #120]	; (80046cc <HAL_RCC_OscConfig+0x508>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a1d      	ldr	r2, [pc, #116]	; (80046cc <HAL_RCC_OscConfig+0x508>)
 8004656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800465c:	f7fe fece 	bl	80033fc <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004664:	f7fe feca 	bl	80033fc <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e17a      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004676:	4b15      	ldr	r3, [pc, #84]	; (80046cc <HAL_RCC_OscConfig+0x508>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d108      	bne.n	800469c <HAL_RCC_OscConfig+0x4d8>
 800468a:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	4a0d      	ldr	r2, [pc, #52]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800469a:	e029      	b.n	80046f0 <HAL_RCC_OscConfig+0x52c>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b05      	cmp	r3, #5
 80046a2:	d115      	bne.n	80046d0 <HAL_RCC_OscConfig+0x50c>
 80046a4:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	4a07      	ldr	r2, [pc, #28]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 80046ac:	f043 0304 	orr.w	r3, r3, #4
 80046b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046b4:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	4a03      	ldr	r2, [pc, #12]	; (80046c8 <HAL_RCC_OscConfig+0x504>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046c4:	e014      	b.n	80046f0 <HAL_RCC_OscConfig+0x52c>
 80046c6:	bf00      	nop
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40007000 	.word	0x40007000
 80046d0:	4b9c      	ldr	r3, [pc, #624]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d6:	4a9b      	ldr	r2, [pc, #620]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046e0:	4b98      	ldr	r3, [pc, #608]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e6:	4a97      	ldr	r2, [pc, #604]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 80046e8:	f023 0304 	bic.w	r3, r3, #4
 80046ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d016      	beq.n	8004726 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f8:	f7fe fe80 	bl	80033fc <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004700:	f7fe fe7c 	bl	80033fc <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	; 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e12a      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004716:	4b8b      	ldr	r3, [pc, #556]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0ed      	beq.n	8004700 <HAL_RCC_OscConfig+0x53c>
 8004724:	e015      	b.n	8004752 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004726:	f7fe fe69 	bl	80033fc <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800472c:	e00a      	b.n	8004744 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472e:	f7fe fe65 	bl	80033fc <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f241 3288 	movw	r2, #5000	; 0x1388
 800473c:	4293      	cmp	r3, r2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e113      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004744:	4b7f      	ldr	r3, [pc, #508]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1ed      	bne.n	800472e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004752:	7ffb      	ldrb	r3, [r7, #31]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d105      	bne.n	8004764 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004758:	4b7a      	ldr	r3, [pc, #488]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 800475a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475c:	4a79      	ldr	r2, [pc, #484]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 800475e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004762:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80fe 	beq.w	800496a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	2b02      	cmp	r3, #2
 8004774:	f040 80d0 	bne.w	8004918 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004778:	4b72      	ldr	r3, [pc, #456]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f003 0203 	and.w	r2, r3, #3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	429a      	cmp	r2, r3
 800478a:	d130      	bne.n	80047ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	3b01      	subs	r3, #1
 8004798:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800479a:	429a      	cmp	r2, r3
 800479c:	d127      	bne.n	80047ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d11f      	bne.n	80047ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047b8:	2a07      	cmp	r2, #7
 80047ba:	bf14      	ite	ne
 80047bc:	2201      	movne	r2, #1
 80047be:	2200      	moveq	r2, #0
 80047c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d113      	bne.n	80047ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d0:	085b      	lsrs	r3, r3, #1
 80047d2:	3b01      	subs	r3, #1
 80047d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d109      	bne.n	80047ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	085b      	lsrs	r3, r3, #1
 80047e6:	3b01      	subs	r3, #1
 80047e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d06e      	beq.n	80048cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b0c      	cmp	r3, #12
 80047f2:	d069      	beq.n	80048c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047f4:	4b53      	ldr	r3, [pc, #332]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d105      	bne.n	800480c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004800:	4b50      	ldr	r3, [pc, #320]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0ad      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004810:	4b4c      	ldr	r3, [pc, #304]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a4b      	ldr	r2, [pc, #300]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 8004816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800481a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800481c:	f7fe fdee 	bl	80033fc <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004824:	f7fe fdea 	bl	80033fc <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e09a      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004836:	4b43      	ldr	r3, [pc, #268]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004842:	4b40      	ldr	r3, [pc, #256]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	4b40      	ldr	r3, [pc, #256]	; (8004948 <HAL_RCC_OscConfig+0x784>)
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004852:	3a01      	subs	r2, #1
 8004854:	0112      	lsls	r2, r2, #4
 8004856:	4311      	orrs	r1, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800485c:	0212      	lsls	r2, r2, #8
 800485e:	4311      	orrs	r1, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004864:	0852      	lsrs	r2, r2, #1
 8004866:	3a01      	subs	r2, #1
 8004868:	0552      	lsls	r2, r2, #21
 800486a:	4311      	orrs	r1, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004870:	0852      	lsrs	r2, r2, #1
 8004872:	3a01      	subs	r2, #1
 8004874:	0652      	lsls	r2, r2, #25
 8004876:	4311      	orrs	r1, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800487c:	0912      	lsrs	r2, r2, #4
 800487e:	0452      	lsls	r2, r2, #17
 8004880:	430a      	orrs	r2, r1
 8004882:	4930      	ldr	r1, [pc, #192]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 8004884:	4313      	orrs	r3, r2
 8004886:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004888:	4b2e      	ldr	r3, [pc, #184]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a2d      	ldr	r2, [pc, #180]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 800488e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004892:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004894:	4b2b      	ldr	r3, [pc, #172]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4a2a      	ldr	r2, [pc, #168]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 800489a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800489e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048a0:	f7fe fdac 	bl	80033fc <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fe fda8 	bl	80033fc <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e058      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ba:	4b22      	ldr	r3, [pc, #136]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f0      	beq.n	80048a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048c6:	e050      	b.n	800496a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e04f      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048cc:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d148      	bne.n	800496a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048d8:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a19      	ldr	r2, [pc, #100]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 80048de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048e4:	4b17      	ldr	r3, [pc, #92]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4a16      	ldr	r2, [pc, #88]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 80048ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048f0:	f7fe fd84 	bl	80033fc <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f8:	f7fe fd80 	bl	80033fc <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e030      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800490a:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f0      	beq.n	80048f8 <HAL_RCC_OscConfig+0x734>
 8004916:	e028      	b.n	800496a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2b0c      	cmp	r3, #12
 800491c:	d023      	beq.n	8004966 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800491e:	4b09      	ldr	r3, [pc, #36]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a08      	ldr	r2, [pc, #32]	; (8004944 <HAL_RCC_OscConfig+0x780>)
 8004924:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492a:	f7fe fd67 	bl	80033fc <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004930:	e00c      	b.n	800494c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004932:	f7fe fd63 	bl	80033fc <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d905      	bls.n	800494c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e013      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
 8004944:	40021000 	.word	0x40021000
 8004948:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800494c:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_RCC_OscConfig+0x7b0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1ec      	bne.n	8004932 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCC_OscConfig+0x7b0>)
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	4905      	ldr	r1, [pc, #20]	; (8004974 <HAL_RCC_OscConfig+0x7b0>)
 800495e:	4b06      	ldr	r3, [pc, #24]	; (8004978 <HAL_RCC_OscConfig+0x7b4>)
 8004960:	4013      	ands	r3, r2
 8004962:	60cb      	str	r3, [r1, #12]
 8004964:	e001      	b.n	800496a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3720      	adds	r7, #32
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40021000 	.word	0x40021000
 8004978:	feeefffc 	.word	0xfeeefffc

0800497c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0e7      	b.n	8004b60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004990:	4b75      	ldr	r3, [pc, #468]	; (8004b68 <HAL_RCC_ClockConfig+0x1ec>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d910      	bls.n	80049c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b72      	ldr	r3, [pc, #456]	; (8004b68 <HAL_RCC_ClockConfig+0x1ec>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 0207 	bic.w	r2, r3, #7
 80049a6:	4970      	ldr	r1, [pc, #448]	; (8004b68 <HAL_RCC_ClockConfig+0x1ec>)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	4b6e      	ldr	r3, [pc, #440]	; (8004b68 <HAL_RCC_ClockConfig+0x1ec>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0cf      	b.n	8004b60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d010      	beq.n	80049ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	4b66      	ldr	r3, [pc, #408]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049d8:	429a      	cmp	r2, r3
 80049da:	d908      	bls.n	80049ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049dc:	4b63      	ldr	r3, [pc, #396]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	4960      	ldr	r1, [pc, #384]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d04c      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d107      	bne.n	8004a12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a02:	4b5a      	ldr	r3, [pc, #360]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d121      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e0a6      	b.n	8004b60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d107      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a1a:	4b54      	ldr	r3, [pc, #336]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d115      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e09a      	b.n	8004b60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a32:	4b4e      	ldr	r3, [pc, #312]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e08e      	b.n	8004b60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a42:	4b4a      	ldr	r3, [pc, #296]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e086      	b.n	8004b60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a52:	4b46      	ldr	r3, [pc, #280]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f023 0203 	bic.w	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	4943      	ldr	r1, [pc, #268]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a64:	f7fe fcca 	bl	80033fc <HAL_GetTick>
 8004a68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6a:	e00a      	b.n	8004a82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a6c:	f7fe fcc6 	bl	80033fc <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e06e      	b.n	8004b60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a82:	4b3a      	ldr	r3, [pc, #232]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 020c 	and.w	r2, r3, #12
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d1eb      	bne.n	8004a6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d010      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	4b31      	ldr	r3, [pc, #196]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d208      	bcs.n	8004ac2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab0:	4b2e      	ldr	r3, [pc, #184]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	492b      	ldr	r1, [pc, #172]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac2:	4b29      	ldr	r3, [pc, #164]	; (8004b68 <HAL_RCC_ClockConfig+0x1ec>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d210      	bcs.n	8004af2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad0:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <HAL_RCC_ClockConfig+0x1ec>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f023 0207 	bic.w	r2, r3, #7
 8004ad8:	4923      	ldr	r1, [pc, #140]	; (8004b68 <HAL_RCC_ClockConfig+0x1ec>)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae0:	4b21      	ldr	r3, [pc, #132]	; (8004b68 <HAL_RCC_ClockConfig+0x1ec>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d001      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e036      	b.n	8004b60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d008      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004afe:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	4918      	ldr	r1, [pc, #96]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d009      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b1c:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	4910      	ldr	r1, [pc, #64]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b30:	f000 f824 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 8004b34:	4602      	mov	r2, r0
 8004b36:	4b0d      	ldr	r3, [pc, #52]	; (8004b6c <HAL_RCC_ClockConfig+0x1f0>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	490b      	ldr	r1, [pc, #44]	; (8004b70 <HAL_RCC_ClockConfig+0x1f4>)
 8004b42:	5ccb      	ldrb	r3, [r1, r3]
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4c:	4a09      	ldr	r2, [pc, #36]	; (8004b74 <HAL_RCC_ClockConfig+0x1f8>)
 8004b4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b50:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <HAL_RCC_ClockConfig+0x1fc>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe f9a7 	bl	8002ea8 <HAL_InitTick>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b5e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40022000 	.word	0x40022000
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	0800a910 	.word	0x0800a910
 8004b74:	20000000 	.word	0x20000000
 8004b78:	20000004 	.word	0x20000004

08004b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b089      	sub	sp, #36	; 0x24
 8004b80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	2300      	movs	r3, #0
 8004b88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b8a:	4b3e      	ldr	r3, [pc, #248]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b94:	4b3b      	ldr	r3, [pc, #236]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0303 	and.w	r3, r3, #3
 8004b9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b0c      	cmp	r3, #12
 8004ba8:	d121      	bne.n	8004bee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d11e      	bne.n	8004bee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004bb0:	4b34      	ldr	r3, [pc, #208]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d107      	bne.n	8004bcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bbc:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc2:	0a1b      	lsrs	r3, r3, #8
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	61fb      	str	r3, [r7, #28]
 8004bca:	e005      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004bcc:	4b2d      	ldr	r3, [pc, #180]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004bd8:	4a2b      	ldr	r2, [pc, #172]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10d      	bne.n	8004c04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bec:	e00a      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d102      	bne.n	8004bfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bf4:	4b25      	ldr	r3, [pc, #148]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x110>)
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	e004      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d101      	bne.n	8004c04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c00:	4b23      	ldr	r3, [pc, #140]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	2b0c      	cmp	r3, #12
 8004c08:	d134      	bne.n	8004c74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c0a:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d003      	beq.n	8004c22 <HAL_RCC_GetSysClockFreq+0xa6>
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d003      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0xac>
 8004c20:	e005      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c22:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x110>)
 8004c24:	617b      	str	r3, [r7, #20]
      break;
 8004c26:	e005      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c28:	4b19      	ldr	r3, [pc, #100]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c2a:	617b      	str	r3, [r7, #20]
      break;
 8004c2c:	e002      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	617b      	str	r3, [r7, #20]
      break;
 8004c32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c34:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	3301      	adds	r3, #1
 8004c40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	0a1b      	lsrs	r3, r3, #8
 8004c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	fb03 f202 	mul.w	r2, r3, r2
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	0e5b      	lsrs	r3, r3, #25
 8004c60:	f003 0303 	and.w	r3, r3, #3
 8004c64:	3301      	adds	r3, #1
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c74:	69bb      	ldr	r3, [r7, #24]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3724      	adds	r7, #36	; 0x24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40021000 	.word	0x40021000
 8004c88:	0800a928 	.word	0x0800a928
 8004c8c:	00f42400 	.word	0x00f42400
 8004c90:	007a1200 	.word	0x007a1200

08004c94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c98:	4b03      	ldr	r3, [pc, #12]	; (8004ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000000 	.word	0x20000000

08004cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004cb0:	f7ff fff0 	bl	8004c94 <HAL_RCC_GetHCLKFreq>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	0a1b      	lsrs	r3, r3, #8
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	4904      	ldr	r1, [pc, #16]	; (8004cd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cc2:	5ccb      	ldrb	r3, [r1, r3]
 8004cc4:	f003 031f 	and.w	r3, r3, #31
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	0800a920 	.word	0x0800a920

08004cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cdc:	f7ff ffda 	bl	8004c94 <HAL_RCC_GetHCLKFreq>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	0adb      	lsrs	r3, r3, #11
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	4904      	ldr	r1, [pc, #16]	; (8004d00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cee:	5ccb      	ldrb	r3, [r1, r3]
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	0800a920 	.word	0x0800a920

08004d04 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	220f      	movs	r2, #15
 8004d12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004d14:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <HAL_RCC_GetClockConfig+0x5c>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 0203 	and.w	r2, r3, #3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004d20:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <HAL_RCC_GetClockConfig+0x5c>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <HAL_RCC_GetClockConfig+0x5c>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004d38:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <HAL_RCC_GetClockConfig+0x5c>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	08db      	lsrs	r3, r3, #3
 8004d3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004d46:	4b07      	ldr	r3, [pc, #28]	; (8004d64 <HAL_RCC_GetClockConfig+0x60>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0207 	and.w	r2, r3, #7
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	601a      	str	r2, [r3, #0]
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40022000 	.word	0x40022000

08004d68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d74:	4b2a      	ldr	r3, [pc, #168]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d80:	f7ff f9bc 	bl	80040fc <HAL_PWREx_GetVoltageRange>
 8004d84:	6178      	str	r0, [r7, #20]
 8004d86:	e014      	b.n	8004db2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d88:	4b25      	ldr	r3, [pc, #148]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	4a24      	ldr	r2, [pc, #144]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d92:	6593      	str	r3, [r2, #88]	; 0x58
 8004d94:	4b22      	ldr	r3, [pc, #136]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004da0:	f7ff f9ac 	bl	80040fc <HAL_PWREx_GetVoltageRange>
 8004da4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004da6:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004daa:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db8:	d10b      	bne.n	8004dd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b80      	cmp	r3, #128	; 0x80
 8004dbe:	d919      	bls.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2ba0      	cmp	r3, #160	; 0xa0
 8004dc4:	d902      	bls.n	8004dcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	e013      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dcc:	2301      	movs	r3, #1
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	e010      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b80      	cmp	r3, #128	; 0x80
 8004dd6:	d902      	bls.n	8004dde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004dd8:	2303      	movs	r3, #3
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	e00a      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b80      	cmp	r3, #128	; 0x80
 8004de2:	d102      	bne.n	8004dea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004de4:	2302      	movs	r3, #2
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e004      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b70      	cmp	r3, #112	; 0x70
 8004dee:	d101      	bne.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004df0:	2301      	movs	r3, #1
 8004df2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f023 0207 	bic.w	r2, r3, #7
 8004dfc:	4909      	ldr	r1, [pc, #36]	; (8004e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e04:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d001      	beq.n	8004e16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40021000 	.word	0x40021000
 8004e24:	40022000 	.word	0x40022000

08004e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e30:	2300      	movs	r3, #0
 8004e32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e34:	2300      	movs	r3, #0
 8004e36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d041      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e4c:	d02a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e52:	d824      	bhi.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e58:	d008      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e5e:	d81e      	bhi.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e68:	d010      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e6a:	e018      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e6c:	4b86      	ldr	r3, [pc, #536]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4a85      	ldr	r2, [pc, #532]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e78:	e015      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	2100      	movs	r1, #0
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fabb 	bl	80053fc <RCCEx_PLLSAI1_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e8a:	e00c      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3320      	adds	r3, #32
 8004e90:	2100      	movs	r1, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fba6 	bl	80055e4 <RCCEx_PLLSAI2_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e9c:	e003      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ea6:	7cfb      	ldrb	r3, [r7, #19]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10b      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eac:	4b76      	ldr	r3, [pc, #472]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eba:	4973      	ldr	r1, [pc, #460]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ec2:	e001      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d041      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ed8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004edc:	d02a      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ede:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ee2:	d824      	bhi.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ee8:	d008      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004eea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eee:	d81e      	bhi.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ef8:	d010      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004efa:	e018      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004efc:	4b62      	ldr	r3, [pc, #392]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4a61      	ldr	r2, [pc, #388]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f08:	e015      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	2100      	movs	r1, #0
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fa73 	bl	80053fc <RCCEx_PLLSAI1_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f1a:	e00c      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3320      	adds	r3, #32
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fb5e 	bl	80055e4 <RCCEx_PLLSAI2_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f2c:	e003      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	74fb      	strb	r3, [r7, #19]
      break;
 8004f32:	e000      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10b      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f3c:	4b52      	ldr	r3, [pc, #328]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f4a:	494f      	ldr	r1, [pc, #316]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f52:	e001      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f54:	7cfb      	ldrb	r3, [r7, #19]
 8004f56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80a0 	beq.w	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f66:	2300      	movs	r3, #0
 8004f68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f6a:	4b47      	ldr	r3, [pc, #284]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00d      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f80:	4b41      	ldr	r3, [pc, #260]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f84:	4a40      	ldr	r2, [pc, #256]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f8c:	4b3e      	ldr	r3, [pc, #248]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f94:	60bb      	str	r3, [r7, #8]
 8004f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f9c:	4b3b      	ldr	r3, [pc, #236]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a3a      	ldr	r2, [pc, #232]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fa8:	f7fe fa28 	bl	80033fc <HAL_GetTick>
 8004fac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fae:	e009      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb0:	f7fe fa24 	bl	80033fc <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d902      	bls.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	74fb      	strb	r3, [r7, #19]
        break;
 8004fc2:	e005      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fc4:	4b31      	ldr	r3, [pc, #196]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0ef      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004fd0:	7cfb      	ldrb	r3, [r7, #19]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d15c      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fd6:	4b2c      	ldr	r3, [pc, #176]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01f      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d019      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ff4:	4b24      	ldr	r3, [pc, #144]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ffe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005000:	4b21      	ldr	r3, [pc, #132]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	4a20      	ldr	r2, [pc, #128]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005010:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005016:	4a1c      	ldr	r2, [pc, #112]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005020:	4a19      	ldr	r2, [pc, #100]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d016      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005032:	f7fe f9e3 	bl	80033fc <HAL_GetTick>
 8005036:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005038:	e00b      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503a:	f7fe f9df 	bl	80033fc <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	f241 3288 	movw	r2, #5000	; 0x1388
 8005048:	4293      	cmp	r3, r2
 800504a:	d902      	bls.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	74fb      	strb	r3, [r7, #19]
            break;
 8005050:	e006      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005052:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0ec      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005060:	7cfb      	ldrb	r3, [r7, #19]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10c      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005066:	4b08      	ldr	r3, [pc, #32]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005076:	4904      	ldr	r1, [pc, #16]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800507e:	e009      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005080:	7cfb      	ldrb	r3, [r7, #19]
 8005082:	74bb      	strb	r3, [r7, #18]
 8005084:	e006      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005086:	bf00      	nop
 8005088:	40021000 	.word	0x40021000
 800508c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005090:	7cfb      	ldrb	r3, [r7, #19]
 8005092:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005094:	7c7b      	ldrb	r3, [r7, #17]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d105      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800509a:	4b9e      	ldr	r3, [pc, #632]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509e:	4a9d      	ldr	r2, [pc, #628]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050b2:	4b98      	ldr	r3, [pc, #608]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b8:	f023 0203 	bic.w	r2, r3, #3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	4994      	ldr	r1, [pc, #592]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050d4:	4b8f      	ldr	r3, [pc, #572]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050da:	f023 020c 	bic.w	r2, r3, #12
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e2:	498c      	ldr	r1, [pc, #560]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050f6:	4b87      	ldr	r3, [pc, #540]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	4983      	ldr	r1, [pc, #524]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005118:	4b7e      	ldr	r3, [pc, #504]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	497b      	ldr	r1, [pc, #492]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800513a:	4b76      	ldr	r3, [pc, #472]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005148:	4972      	ldr	r1, [pc, #456]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800515c:	4b6d      	ldr	r3, [pc, #436]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005162:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516a:	496a      	ldr	r1, [pc, #424]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800517e:	4b65      	ldr	r3, [pc, #404]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005184:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518c:	4961      	ldr	r1, [pc, #388]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051a0:	4b5c      	ldr	r3, [pc, #368]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ae:	4959      	ldr	r1, [pc, #356]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051c2:	4b54      	ldr	r3, [pc, #336]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d0:	4950      	ldr	r1, [pc, #320]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051e4:	4b4b      	ldr	r3, [pc, #300]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f2:	4948      	ldr	r1, [pc, #288]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005206:	4b43      	ldr	r3, [pc, #268]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005214:	493f      	ldr	r1, [pc, #252]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d028      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005228:	4b3a      	ldr	r3, [pc, #232]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005236:	4937      	ldr	r1, [pc, #220]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005246:	d106      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005248:	4b32      	ldr	r3, [pc, #200]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4a31      	ldr	r2, [pc, #196]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005252:	60d3      	str	r3, [r2, #12]
 8005254:	e011      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800525a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800525e:	d10c      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3304      	adds	r3, #4
 8005264:	2101      	movs	r1, #1
 8005266:	4618      	mov	r0, r3
 8005268:	f000 f8c8 	bl	80053fc <RCCEx_PLLSAI1_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005270:	7cfb      	ldrb	r3, [r7, #19]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005276:	7cfb      	ldrb	r3, [r7, #19]
 8005278:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d028      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005286:	4b23      	ldr	r3, [pc, #140]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005294:	491f      	ldr	r1, [pc, #124]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052a4:	d106      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a6:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	4a1a      	ldr	r2, [pc, #104]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052b0:	60d3      	str	r3, [r2, #12]
 80052b2:	e011      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052bc:	d10c      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	2101      	movs	r1, #1
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 f899 	bl	80053fc <RCCEx_PLLSAI1_Config>
 80052ca:	4603      	mov	r3, r0
 80052cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052ce:	7cfb      	ldrb	r3, [r7, #19]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80052d4:	7cfb      	ldrb	r3, [r7, #19]
 80052d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d02b      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052e4:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f2:	4908      	ldr	r1, [pc, #32]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005302:	d109      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005304:	4b03      	ldr	r3, [pc, #12]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	4a02      	ldr	r2, [pc, #8]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800530e:	60d3      	str	r3, [r2, #12]
 8005310:	e014      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005312:	bf00      	nop
 8005314:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005320:	d10c      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	3304      	adds	r3, #4
 8005326:	2101      	movs	r1, #1
 8005328:	4618      	mov	r0, r3
 800532a:	f000 f867 	bl	80053fc <RCCEx_PLLSAI1_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005332:	7cfb      	ldrb	r3, [r7, #19]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005338:	7cfb      	ldrb	r3, [r7, #19]
 800533a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d02f      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005348:	4b2b      	ldr	r3, [pc, #172]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005356:	4928      	ldr	r1, [pc, #160]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005366:	d10d      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3304      	adds	r3, #4
 800536c:	2102      	movs	r1, #2
 800536e:	4618      	mov	r0, r3
 8005370:	f000 f844 	bl	80053fc <RCCEx_PLLSAI1_Config>
 8005374:	4603      	mov	r3, r0
 8005376:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d014      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800537e:	7cfb      	ldrb	r3, [r7, #19]
 8005380:	74bb      	strb	r3, [r7, #18]
 8005382:	e011      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800538c:	d10c      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3320      	adds	r3, #32
 8005392:	2102      	movs	r1, #2
 8005394:	4618      	mov	r0, r3
 8005396:	f000 f925 	bl	80055e4 <RCCEx_PLLSAI2_Config>
 800539a:	4603      	mov	r3, r0
 800539c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800539e:	7cfb      	ldrb	r3, [r7, #19]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053a4:	7cfb      	ldrb	r3, [r7, #19]
 80053a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053b4:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053c2:	490d      	ldr	r1, [pc, #52]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00b      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053d6:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053e6:	4904      	ldr	r1, [pc, #16]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40021000 	.word	0x40021000

080053fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800540a:	4b75      	ldr	r3, [pc, #468]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d018      	beq.n	8005448 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005416:	4b72      	ldr	r3, [pc, #456]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f003 0203 	and.w	r2, r3, #3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d10d      	bne.n	8005442 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
       ||
 800542a:	2b00      	cmp	r3, #0
 800542c:	d009      	beq.n	8005442 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800542e:	4b6c      	ldr	r3, [pc, #432]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	091b      	lsrs	r3, r3, #4
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
       ||
 800543e:	429a      	cmp	r2, r3
 8005440:	d047      	beq.n	80054d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	73fb      	strb	r3, [r7, #15]
 8005446:	e044      	b.n	80054d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b03      	cmp	r3, #3
 800544e:	d018      	beq.n	8005482 <RCCEx_PLLSAI1_Config+0x86>
 8005450:	2b03      	cmp	r3, #3
 8005452:	d825      	bhi.n	80054a0 <RCCEx_PLLSAI1_Config+0xa4>
 8005454:	2b01      	cmp	r3, #1
 8005456:	d002      	beq.n	800545e <RCCEx_PLLSAI1_Config+0x62>
 8005458:	2b02      	cmp	r3, #2
 800545a:	d009      	beq.n	8005470 <RCCEx_PLLSAI1_Config+0x74>
 800545c:	e020      	b.n	80054a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800545e:	4b60      	ldr	r3, [pc, #384]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d11d      	bne.n	80054a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800546e:	e01a      	b.n	80054a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005470:	4b5b      	ldr	r3, [pc, #364]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005478:	2b00      	cmp	r3, #0
 800547a:	d116      	bne.n	80054aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005480:	e013      	b.n	80054aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005482:	4b57      	ldr	r3, [pc, #348]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10f      	bne.n	80054ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800548e:	4b54      	ldr	r3, [pc, #336]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800549e:	e006      	b.n	80054ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
      break;
 80054a4:	e004      	b.n	80054b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054a6:	bf00      	nop
 80054a8:	e002      	b.n	80054b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054aa:	bf00      	nop
 80054ac:	e000      	b.n	80054b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10d      	bne.n	80054d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054b6:	4b4a      	ldr	r3, [pc, #296]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6819      	ldr	r1, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	430b      	orrs	r3, r1
 80054cc:	4944      	ldr	r1, [pc, #272]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d17d      	bne.n	80055d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054d8:	4b41      	ldr	r3, [pc, #260]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a40      	ldr	r2, [pc, #256]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054e4:	f7fd ff8a 	bl	80033fc <HAL_GetTick>
 80054e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054ea:	e009      	b.n	8005500 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054ec:	f7fd ff86 	bl	80033fc <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d902      	bls.n	8005500 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	73fb      	strb	r3, [r7, #15]
        break;
 80054fe:	e005      	b.n	800550c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005500:	4b37      	ldr	r3, [pc, #220]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1ef      	bne.n	80054ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d160      	bne.n	80055d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d111      	bne.n	800553c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005518:	4b31      	ldr	r3, [pc, #196]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6892      	ldr	r2, [r2, #8]
 8005528:	0211      	lsls	r1, r2, #8
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	68d2      	ldr	r2, [r2, #12]
 800552e:	0912      	lsrs	r2, r2, #4
 8005530:	0452      	lsls	r2, r2, #17
 8005532:	430a      	orrs	r2, r1
 8005534:	492a      	ldr	r1, [pc, #168]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005536:	4313      	orrs	r3, r2
 8005538:	610b      	str	r3, [r1, #16]
 800553a:	e027      	b.n	800558c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d112      	bne.n	8005568 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005542:	4b27      	ldr	r3, [pc, #156]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800554a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6892      	ldr	r2, [r2, #8]
 8005552:	0211      	lsls	r1, r2, #8
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6912      	ldr	r2, [r2, #16]
 8005558:	0852      	lsrs	r2, r2, #1
 800555a:	3a01      	subs	r2, #1
 800555c:	0552      	lsls	r2, r2, #21
 800555e:	430a      	orrs	r2, r1
 8005560:	491f      	ldr	r1, [pc, #124]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005562:	4313      	orrs	r3, r2
 8005564:	610b      	str	r3, [r1, #16]
 8005566:	e011      	b.n	800558c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005568:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005570:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6892      	ldr	r2, [r2, #8]
 8005578:	0211      	lsls	r1, r2, #8
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6952      	ldr	r2, [r2, #20]
 800557e:	0852      	lsrs	r2, r2, #1
 8005580:	3a01      	subs	r2, #1
 8005582:	0652      	lsls	r2, r2, #25
 8005584:	430a      	orrs	r2, r1
 8005586:	4916      	ldr	r1, [pc, #88]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005588:	4313      	orrs	r3, r2
 800558a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800558c:	4b14      	ldr	r3, [pc, #80]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a13      	ldr	r2, [pc, #76]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005592:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005596:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005598:	f7fd ff30 	bl	80033fc <HAL_GetTick>
 800559c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800559e:	e009      	b.n	80055b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055a0:	f7fd ff2c 	bl	80033fc <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d902      	bls.n	80055b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	73fb      	strb	r3, [r7, #15]
          break;
 80055b2:	e005      	b.n	80055c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055b4:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0ef      	beq.n	80055a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055c6:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	4904      	ldr	r1, [pc, #16]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40021000 	.word	0x40021000

080055e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055f2:	4b6a      	ldr	r3, [pc, #424]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d018      	beq.n	8005630 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80055fe:	4b67      	ldr	r3, [pc, #412]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f003 0203 	and.w	r2, r3, #3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d10d      	bne.n	800562a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
       ||
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005616:	4b61      	ldr	r3, [pc, #388]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	091b      	lsrs	r3, r3, #4
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
       ||
 8005626:	429a      	cmp	r2, r3
 8005628:	d047      	beq.n	80056ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	73fb      	strb	r3, [r7, #15]
 800562e:	e044      	b.n	80056ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b03      	cmp	r3, #3
 8005636:	d018      	beq.n	800566a <RCCEx_PLLSAI2_Config+0x86>
 8005638:	2b03      	cmp	r3, #3
 800563a:	d825      	bhi.n	8005688 <RCCEx_PLLSAI2_Config+0xa4>
 800563c:	2b01      	cmp	r3, #1
 800563e:	d002      	beq.n	8005646 <RCCEx_PLLSAI2_Config+0x62>
 8005640:	2b02      	cmp	r3, #2
 8005642:	d009      	beq.n	8005658 <RCCEx_PLLSAI2_Config+0x74>
 8005644:	e020      	b.n	8005688 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005646:	4b55      	ldr	r3, [pc, #340]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d11d      	bne.n	800568e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005656:	e01a      	b.n	800568e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005658:	4b50      	ldr	r3, [pc, #320]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005660:	2b00      	cmp	r3, #0
 8005662:	d116      	bne.n	8005692 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005668:	e013      	b.n	8005692 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800566a:	4b4c      	ldr	r3, [pc, #304]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10f      	bne.n	8005696 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005676:	4b49      	ldr	r3, [pc, #292]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005686:	e006      	b.n	8005696 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
      break;
 800568c:	e004      	b.n	8005698 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800568e:	bf00      	nop
 8005690:	e002      	b.n	8005698 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005692:	bf00      	nop
 8005694:	e000      	b.n	8005698 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005696:	bf00      	nop
    }

    if(status == HAL_OK)
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10d      	bne.n	80056ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800569e:	4b3f      	ldr	r3, [pc, #252]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6819      	ldr	r1, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	430b      	orrs	r3, r1
 80056b4:	4939      	ldr	r1, [pc, #228]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d167      	bne.n	8005790 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056c0:	4b36      	ldr	r3, [pc, #216]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a35      	ldr	r2, [pc, #212]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056cc:	f7fd fe96 	bl	80033fc <HAL_GetTick>
 80056d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056d2:	e009      	b.n	80056e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056d4:	f7fd fe92 	bl	80033fc <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d902      	bls.n	80056e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	73fb      	strb	r3, [r7, #15]
        break;
 80056e6:	e005      	b.n	80056f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056e8:	4b2c      	ldr	r3, [pc, #176]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1ef      	bne.n	80056d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d14a      	bne.n	8005790 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d111      	bne.n	8005724 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005700:	4b26      	ldr	r3, [pc, #152]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6892      	ldr	r2, [r2, #8]
 8005710:	0211      	lsls	r1, r2, #8
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	68d2      	ldr	r2, [r2, #12]
 8005716:	0912      	lsrs	r2, r2, #4
 8005718:	0452      	lsls	r2, r2, #17
 800571a:	430a      	orrs	r2, r1
 800571c:	491f      	ldr	r1, [pc, #124]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 800571e:	4313      	orrs	r3, r2
 8005720:	614b      	str	r3, [r1, #20]
 8005722:	e011      	b.n	8005748 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005724:	4b1d      	ldr	r3, [pc, #116]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800572c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6892      	ldr	r2, [r2, #8]
 8005734:	0211      	lsls	r1, r2, #8
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6912      	ldr	r2, [r2, #16]
 800573a:	0852      	lsrs	r2, r2, #1
 800573c:	3a01      	subs	r2, #1
 800573e:	0652      	lsls	r2, r2, #25
 8005740:	430a      	orrs	r2, r1
 8005742:	4916      	ldr	r1, [pc, #88]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005744:	4313      	orrs	r3, r2
 8005746:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005748:	4b14      	ldr	r3, [pc, #80]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a13      	ldr	r2, [pc, #76]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 800574e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005752:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005754:	f7fd fe52 	bl	80033fc <HAL_GetTick>
 8005758:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800575a:	e009      	b.n	8005770 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800575c:	f7fd fe4e 	bl	80033fc <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d902      	bls.n	8005770 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	73fb      	strb	r3, [r7, #15]
          break;
 800576e:	e005      	b.n	800577c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005770:	4b0a      	ldr	r3, [pc, #40]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0ef      	beq.n	800575c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005782:	4b06      	ldr	r3, [pc, #24]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005784:	695a      	ldr	r2, [r3, #20]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	4904      	ldr	r1, [pc, #16]	; (800579c <RCCEx_PLLSAI2_Config+0x1b8>)
 800578c:	4313      	orrs	r3, r2
 800578e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40021000 	.word	0x40021000

080057a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e049      	b.n	8005846 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f841 	bl	800584e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3304      	adds	r3, #4
 80057dc:	4619      	mov	r1, r3
 80057de:	4610      	mov	r0, r2
 80057e0:	f000 f9f8 	bl	8005bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	d001      	beq.n	800587c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e04f      	b.n	800591c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a23      	ldr	r2, [pc, #140]	; (8005928 <HAL_TIM_Base_Start_IT+0xc4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01d      	beq.n	80058da <HAL_TIM_Base_Start_IT+0x76>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a6:	d018      	beq.n	80058da <HAL_TIM_Base_Start_IT+0x76>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1f      	ldr	r2, [pc, #124]	; (800592c <HAL_TIM_Base_Start_IT+0xc8>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <HAL_TIM_Base_Start_IT+0x76>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1e      	ldr	r2, [pc, #120]	; (8005930 <HAL_TIM_Base_Start_IT+0xcc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00e      	beq.n	80058da <HAL_TIM_Base_Start_IT+0x76>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1c      	ldr	r2, [pc, #112]	; (8005934 <HAL_TIM_Base_Start_IT+0xd0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d009      	beq.n	80058da <HAL_TIM_Base_Start_IT+0x76>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1b      	ldr	r2, [pc, #108]	; (8005938 <HAL_TIM_Base_Start_IT+0xd4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d004      	beq.n	80058da <HAL_TIM_Base_Start_IT+0x76>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a19      	ldr	r2, [pc, #100]	; (800593c <HAL_TIM_Base_Start_IT+0xd8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d115      	bne.n	8005906 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	4b17      	ldr	r3, [pc, #92]	; (8005940 <HAL_TIM_Base_Start_IT+0xdc>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2b06      	cmp	r3, #6
 80058ea:	d015      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0xb4>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f2:	d011      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005904:	e008      	b.n	8005918 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0201 	orr.w	r2, r2, #1
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	e000      	b.n	800591a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005918:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	40012c00 	.word	0x40012c00
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40013400 	.word	0x40013400
 800593c:	40014000 	.word	0x40014000
 8005940:	00010007 	.word	0x00010007

08005944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b02      	cmp	r3, #2
 8005958:	d122      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b02      	cmp	r3, #2
 8005966:	d11b      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0202 	mvn.w	r2, #2
 8005970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f905 	bl	8005b96 <HAL_TIM_IC_CaptureCallback>
 800598c:	e005      	b.n	800599a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f8f7 	bl	8005b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f908 	bl	8005baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d122      	bne.n	80059f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d11b      	bne.n	80059f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0204 	mvn.w	r2, #4
 80059c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f8db 	bl	8005b96 <HAL_TIM_IC_CaptureCallback>
 80059e0:	e005      	b.n	80059ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f8cd 	bl	8005b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f8de 	bl	8005baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d122      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d11b      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0208 	mvn.w	r2, #8
 8005a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2204      	movs	r2, #4
 8005a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f8b1 	bl	8005b96 <HAL_TIM_IC_CaptureCallback>
 8005a34:	e005      	b.n	8005a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f8a3 	bl	8005b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f8b4 	bl	8005baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0310 	and.w	r3, r3, #16
 8005a52:	2b10      	cmp	r3, #16
 8005a54:	d122      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d11b      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0210 	mvn.w	r2, #16
 8005a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2208      	movs	r2, #8
 8005a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f887 	bl	8005b96 <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f879 	bl	8005b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f88a 	bl	8005baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d10e      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d107      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0201 	mvn.w	r2, #1
 8005ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fb fd58 	bl	8001578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad2:	2b80      	cmp	r3, #128	; 0x80
 8005ad4:	d10e      	bne.n	8005af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae0:	2b80      	cmp	r3, #128	; 0x80
 8005ae2:	d107      	bne.n	8005af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f914 	bl	8005d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b02:	d10e      	bne.n	8005b22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0e:	2b80      	cmp	r3, #128	; 0x80
 8005b10:	d107      	bne.n	8005b22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f907 	bl	8005d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2c:	2b40      	cmp	r3, #64	; 0x40
 8005b2e:	d10e      	bne.n	8005b4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3a:	2b40      	cmp	r3, #64	; 0x40
 8005b3c:	d107      	bne.n	8005b4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f838 	bl	8005bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d10e      	bne.n	8005b7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d107      	bne.n	8005b7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f06f 0220 	mvn.w	r2, #32
 8005b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f8c7 	bl	8005d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
	...

08005bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a40      	ldr	r2, [pc, #256]	; (8005ce8 <TIM_Base_SetConfig+0x114>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d013      	beq.n	8005c14 <TIM_Base_SetConfig+0x40>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf2:	d00f      	beq.n	8005c14 <TIM_Base_SetConfig+0x40>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a3d      	ldr	r2, [pc, #244]	; (8005cec <TIM_Base_SetConfig+0x118>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00b      	beq.n	8005c14 <TIM_Base_SetConfig+0x40>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a3c      	ldr	r2, [pc, #240]	; (8005cf0 <TIM_Base_SetConfig+0x11c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d007      	beq.n	8005c14 <TIM_Base_SetConfig+0x40>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a3b      	ldr	r2, [pc, #236]	; (8005cf4 <TIM_Base_SetConfig+0x120>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d003      	beq.n	8005c14 <TIM_Base_SetConfig+0x40>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a3a      	ldr	r2, [pc, #232]	; (8005cf8 <TIM_Base_SetConfig+0x124>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d108      	bne.n	8005c26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a2f      	ldr	r2, [pc, #188]	; (8005ce8 <TIM_Base_SetConfig+0x114>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d01f      	beq.n	8005c6e <TIM_Base_SetConfig+0x9a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c34:	d01b      	beq.n	8005c6e <TIM_Base_SetConfig+0x9a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a2c      	ldr	r2, [pc, #176]	; (8005cec <TIM_Base_SetConfig+0x118>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d017      	beq.n	8005c6e <TIM_Base_SetConfig+0x9a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a2b      	ldr	r2, [pc, #172]	; (8005cf0 <TIM_Base_SetConfig+0x11c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <TIM_Base_SetConfig+0x9a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a2a      	ldr	r2, [pc, #168]	; (8005cf4 <TIM_Base_SetConfig+0x120>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00f      	beq.n	8005c6e <TIM_Base_SetConfig+0x9a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a29      	ldr	r2, [pc, #164]	; (8005cf8 <TIM_Base_SetConfig+0x124>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00b      	beq.n	8005c6e <TIM_Base_SetConfig+0x9a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a28      	ldr	r2, [pc, #160]	; (8005cfc <TIM_Base_SetConfig+0x128>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d007      	beq.n	8005c6e <TIM_Base_SetConfig+0x9a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a27      	ldr	r2, [pc, #156]	; (8005d00 <TIM_Base_SetConfig+0x12c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_Base_SetConfig+0x9a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a26      	ldr	r2, [pc, #152]	; (8005d04 <TIM_Base_SetConfig+0x130>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d108      	bne.n	8005c80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a10      	ldr	r2, [pc, #64]	; (8005ce8 <TIM_Base_SetConfig+0x114>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00f      	beq.n	8005ccc <TIM_Base_SetConfig+0xf8>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a12      	ldr	r2, [pc, #72]	; (8005cf8 <TIM_Base_SetConfig+0x124>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00b      	beq.n	8005ccc <TIM_Base_SetConfig+0xf8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a11      	ldr	r2, [pc, #68]	; (8005cfc <TIM_Base_SetConfig+0x128>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d007      	beq.n	8005ccc <TIM_Base_SetConfig+0xf8>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a10      	ldr	r2, [pc, #64]	; (8005d00 <TIM_Base_SetConfig+0x12c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_Base_SetConfig+0xf8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a0f      	ldr	r2, [pc, #60]	; (8005d04 <TIM_Base_SetConfig+0x130>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d103      	bne.n	8005cd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	615a      	str	r2, [r3, #20]
}
 8005cda:	bf00      	nop
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40012c00 	.word	0x40012c00
 8005cec:	40000400 	.word	0x40000400
 8005cf0:	40000800 	.word	0x40000800
 8005cf4:	40000c00 	.word	0x40000c00
 8005cf8:	40013400 	.word	0x40013400
 8005cfc:	40014000 	.word	0x40014000
 8005d00:	40014400 	.word	0x40014400
 8005d04:	40014800 	.word	0x40014800

08005d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e040      	b.n	8005dd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fd f9e6 	bl	8003138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2224      	movs	r2, #36	; 0x24
 8005d70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0201 	bic.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fc22 	bl	80065cc <UART_SetConfig>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e022      	b.n	8005dd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fece 	bl	8006b3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 ff55 	bl	8006c80 <UART_CheckIdleState>
 8005dd6:	4603      	mov	r3, r0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08a      	sub	sp, #40	; 0x28
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	f040 8082 	bne.w	8005efe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_UART_Transmit+0x26>
 8005e00:	88fb      	ldrh	r3, [r7, #6]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e07a      	b.n	8005f00 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_UART_Transmit+0x38>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e073      	b.n	8005f00 <HAL_UART_Transmit+0x120>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2221      	movs	r2, #33	; 0x21
 8005e2c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e2e:	f7fd fae5 	bl	80033fc <HAL_GetTick>
 8005e32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	88fa      	ldrh	r2, [r7, #6]
 8005e38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	88fa      	ldrh	r2, [r7, #6]
 8005e40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4c:	d108      	bne.n	8005e60 <HAL_UART_Transmit+0x80>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d104      	bne.n	8005e60 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	61bb      	str	r3, [r7, #24]
 8005e5e:	e003      	b.n	8005e68 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005e70:	e02d      	b.n	8005ece <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2180      	movs	r1, #128	; 0x80
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 ff48 	bl	8006d12 <UART_WaitOnFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e039      	b.n	8005f00 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	881a      	ldrh	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e9e:	b292      	uxth	r2, r2
 8005ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	61bb      	str	r3, [r7, #24]
 8005ea8:	e008      	b.n	8005ebc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	781a      	ldrb	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	b292      	uxth	r2, r2
 8005eb4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1cb      	bne.n	8005e72 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2140      	movs	r1, #64	; 0x40
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 ff14 	bl	8006d12 <UART_WaitOnFlagUntilTimeout>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e005      	b.n	8005f00 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	e000      	b.n	8005f00 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005efe:	2302      	movs	r3, #2
  }
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3720      	adds	r7, #32
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08a      	sub	sp, #40	; 0x28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	4613      	mov	r3, r2
 8005f14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	d142      	bne.n	8005fa4 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <HAL_UART_Receive_DMA+0x22>
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e03b      	b.n	8005fa6 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_UART_Receive_DMA+0x34>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e034      	b.n	8005fa6 <HAL_UART_Receive_DMA+0x9e>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a18      	ldr	r2, [pc, #96]	; (8005fb0 <HAL_UART_Receive_DMA+0xa8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d01f      	beq.n	8005f94 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d018      	beq.n	8005f94 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	623b      	str	r3, [r7, #32]
 8005f82:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	69f9      	ldr	r1, [r7, #28]
 8005f86:	6a3a      	ldr	r2, [r7, #32]
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e6      	bne.n	8005f62 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	461a      	mov	r2, r3
 8005f98:	68b9      	ldr	r1, [r7, #8]
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 ff7e 	bl	8006e9c <UART_Start_Receive_DMA>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	e000      	b.n	8005fa6 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005fa4:	2302      	movs	r3, #2
  }
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3728      	adds	r7, #40	; 0x28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40008000 	.word	0x40008000

08005fb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b0ba      	sub	sp, #232	; 0xe8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005fda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005fde:	f640 030f 	movw	r3, #2063	; 0x80f
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005fe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d115      	bne.n	800601c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00f      	beq.n	800601c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b00      	cmp	r3, #0
 8006006:	d009      	beq.n	800601c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 82a6 	beq.w	800655e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
      }
      return;
 800601a:	e2a0      	b.n	800655e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800601c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 8117 	beq.w	8006254 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006032:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006036:	4b85      	ldr	r3, [pc, #532]	; (800624c <HAL_UART_IRQHandler+0x298>)
 8006038:	4013      	ands	r3, r2
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 810a 	beq.w	8006254 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d011      	beq.n	8006070 <HAL_UART_IRQHandler+0xbc>
 800604c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00b      	beq.n	8006070 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2201      	movs	r2, #1
 800605e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006066:	f043 0201 	orr.w	r2, r3, #1
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d011      	beq.n	80060a0 <HAL_UART_IRQHandler+0xec>
 800607c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2202      	movs	r2, #2
 800608e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006096:	f043 0204 	orr.w	r2, r3, #4
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d011      	beq.n	80060d0 <HAL_UART_IRQHandler+0x11c>
 80060ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00b      	beq.n	80060d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2204      	movs	r2, #4
 80060be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060c6:	f043 0202 	orr.w	r2, r3, #2
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d017      	beq.n	800610c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d105      	bne.n	80060f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80060e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00b      	beq.n	800610c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2208      	movs	r2, #8
 80060fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006102:	f043 0208 	orr.w	r2, r3, #8
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800610c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006114:	2b00      	cmp	r3, #0
 8006116:	d012      	beq.n	800613e <HAL_UART_IRQHandler+0x18a>
 8006118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800611c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00c      	beq.n	800613e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800612c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006134:	f043 0220 	orr.w	r2, r3, #32
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 820c 	beq.w	8006562 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800614a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00d      	beq.n	8006172 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d007      	beq.n	8006172 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006178:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006186:	2b40      	cmp	r3, #64	; 0x40
 8006188:	d005      	beq.n	8006196 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800618a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800618e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006192:	2b00      	cmp	r3, #0
 8006194:	d04f      	beq.n	8006236 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 ff4c 	bl	8007034 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a6:	2b40      	cmp	r3, #64	; 0x40
 80061a8:	d141      	bne.n	800622e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3308      	adds	r3, #8
 80061b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3308      	adds	r3, #8
 80061d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1d9      	bne.n	80061aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d013      	beq.n	8006226 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006202:	4a13      	ldr	r2, [pc, #76]	; (8006250 <HAL_UART_IRQHandler+0x29c>)
 8006204:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620a:	4618      	mov	r0, r3
 800620c:	f7fd fb3a 	bl	8003884 <HAL_DMA_Abort_IT>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d017      	beq.n	8006246 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006220:	4610      	mov	r0, r2
 8006222:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006224:	e00f      	b.n	8006246 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f9ba 	bl	80065a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622c:	e00b      	b.n	8006246 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f9b6 	bl	80065a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006234:	e007      	b.n	8006246 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f9b2 	bl	80065a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006244:	e18d      	b.n	8006562 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006246:	bf00      	nop
    return;
 8006248:	e18b      	b.n	8006562 <HAL_UART_IRQHandler+0x5ae>
 800624a:	bf00      	nop
 800624c:	04000120 	.word	0x04000120
 8006250:	080072d3 	.word	0x080072d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006258:	2b01      	cmp	r3, #1
 800625a:	f040 8146 	bne.w	80064ea <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006262:	f003 0310 	and.w	r3, r3, #16
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 813f 	beq.w	80064ea <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800626c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 8138 	beq.w	80064ea <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2210      	movs	r2, #16
 8006280:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	2b40      	cmp	r3, #64	; 0x40
 800628e:	f040 80b4 	bne.w	80063fa <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800629e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 815f 	beq.w	8006566 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062b2:	429a      	cmp	r2, r3
 80062b4:	f080 8157 	bcs.w	8006566 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f040 8085 	bne.w	80063de <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	461a      	mov	r2, r3
 80062fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006302:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800630a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1da      	bne.n	80062d4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3308      	adds	r3, #8
 8006324:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800632e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3308      	adds	r3, #8
 800633e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006342:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006346:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800634a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e1      	bne.n	800631e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3308      	adds	r3, #8
 8006360:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800636a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800636c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3308      	adds	r3, #8
 800637a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800637e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006380:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006384:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800638c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e3      	bne.n	800635a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ae:	f023 0310 	bic.w	r3, r3, #16
 80063b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80063c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e4      	bne.n	800639e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fd fa15 	bl	8003808 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f8de 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063f8:	e0b5      	b.n	8006566 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006406:	b29b      	uxth	r3, r3
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	f000 80a7 	beq.w	800656a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800641c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 80a2 	beq.w	800656a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	e853 3f00 	ldrex	r3, [r3]
 8006432:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006436:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800643a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006448:	647b      	str	r3, [r7, #68]	; 0x44
 800644a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800644e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e4      	bne.n	8006426 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3308      	adds	r3, #8
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	623b      	str	r3, [r7, #32]
   return(result);
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	f023 0301 	bic.w	r3, r3, #1
 8006472:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3308      	adds	r3, #8
 800647c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006480:	633a      	str	r2, [r7, #48]	; 0x30
 8006482:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006484:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006488:	e841 2300 	strex	r3, r2, [r1]
 800648c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e3      	bne.n	800645c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2220      	movs	r2, #32
 8006498:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0310 	bic.w	r3, r3, #16
 80064ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064c8:	61fb      	str	r3, [r7, #28]
 80064ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	69b9      	ldr	r1, [r7, #24]
 80064ce:	69fa      	ldr	r2, [r7, #28]
 80064d0:	e841 2300 	strex	r3, r2, [r1]
 80064d4:	617b      	str	r3, [r7, #20]
   return(result);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e4      	bne.n	80064a6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f866 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064e8:	e03f      	b.n	800656a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00e      	beq.n	8006514 <HAL_UART_IRQHandler+0x560>
 80064f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d008      	beq.n	8006514 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800650a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 ff20 	bl	8007352 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006512:	e02d      	b.n	8006570 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00e      	beq.n	800653e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006528:	2b00      	cmp	r3, #0
 800652a:	d008      	beq.n	800653e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01c      	beq.n	800656e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	4798      	blx	r3
    }
    return;
 800653c:	e017      	b.n	800656e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800653e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006546:	2b00      	cmp	r3, #0
 8006548:	d012      	beq.n	8006570 <HAL_UART_IRQHandler+0x5bc>
 800654a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00c      	beq.n	8006570 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fed1 	bl	80072fe <UART_EndTransmit_IT>
    return;
 800655c:	e008      	b.n	8006570 <HAL_UART_IRQHandler+0x5bc>
      return;
 800655e:	bf00      	nop
 8006560:	e006      	b.n	8006570 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006562:	bf00      	nop
 8006564:	e004      	b.n	8006570 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006566:	bf00      	nop
 8006568:	e002      	b.n	8006570 <HAL_UART_IRQHandler+0x5bc>
      return;
 800656a:	bf00      	nop
 800656c:	e000      	b.n	8006570 <HAL_UART_IRQHandler+0x5bc>
    return;
 800656e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006570:	37e8      	adds	r7, #232	; 0xe8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop

08006578 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065d0:	b08a      	sub	sp, #40	; 0x28
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	431a      	orrs	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	431a      	orrs	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	4ba4      	ldr	r3, [pc, #656]	; (800688c <UART_SetConfig+0x2c0>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	6812      	ldr	r2, [r2, #0]
 8006602:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006604:	430b      	orrs	r3, r1
 8006606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a99      	ldr	r2, [pc, #612]	; (8006890 <UART_SetConfig+0x2c4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006634:	4313      	orrs	r3, r2
 8006636:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006648:	430a      	orrs	r2, r1
 800664a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a90      	ldr	r2, [pc, #576]	; (8006894 <UART_SetConfig+0x2c8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d126      	bne.n	80066a4 <UART_SetConfig+0xd8>
 8006656:	4b90      	ldr	r3, [pc, #576]	; (8006898 <UART_SetConfig+0x2cc>)
 8006658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665c:	f003 0303 	and.w	r3, r3, #3
 8006660:	2b03      	cmp	r3, #3
 8006662:	d81b      	bhi.n	800669c <UART_SetConfig+0xd0>
 8006664:	a201      	add	r2, pc, #4	; (adr r2, 800666c <UART_SetConfig+0xa0>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	0800667d 	.word	0x0800667d
 8006670:	0800668d 	.word	0x0800668d
 8006674:	08006685 	.word	0x08006685
 8006678:	08006695 	.word	0x08006695
 800667c:	2301      	movs	r3, #1
 800667e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006682:	e116      	b.n	80068b2 <UART_SetConfig+0x2e6>
 8006684:	2302      	movs	r3, #2
 8006686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800668a:	e112      	b.n	80068b2 <UART_SetConfig+0x2e6>
 800668c:	2304      	movs	r3, #4
 800668e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006692:	e10e      	b.n	80068b2 <UART_SetConfig+0x2e6>
 8006694:	2308      	movs	r3, #8
 8006696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800669a:	e10a      	b.n	80068b2 <UART_SetConfig+0x2e6>
 800669c:	2310      	movs	r3, #16
 800669e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066a2:	e106      	b.n	80068b2 <UART_SetConfig+0x2e6>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a7c      	ldr	r2, [pc, #496]	; (800689c <UART_SetConfig+0x2d0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d138      	bne.n	8006720 <UART_SetConfig+0x154>
 80066ae:	4b7a      	ldr	r3, [pc, #488]	; (8006898 <UART_SetConfig+0x2cc>)
 80066b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b4:	f003 030c 	and.w	r3, r3, #12
 80066b8:	2b0c      	cmp	r3, #12
 80066ba:	d82d      	bhi.n	8006718 <UART_SetConfig+0x14c>
 80066bc:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <UART_SetConfig+0xf8>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	080066f9 	.word	0x080066f9
 80066c8:	08006719 	.word	0x08006719
 80066cc:	08006719 	.word	0x08006719
 80066d0:	08006719 	.word	0x08006719
 80066d4:	08006709 	.word	0x08006709
 80066d8:	08006719 	.word	0x08006719
 80066dc:	08006719 	.word	0x08006719
 80066e0:	08006719 	.word	0x08006719
 80066e4:	08006701 	.word	0x08006701
 80066e8:	08006719 	.word	0x08006719
 80066ec:	08006719 	.word	0x08006719
 80066f0:	08006719 	.word	0x08006719
 80066f4:	08006711 	.word	0x08006711
 80066f8:	2300      	movs	r3, #0
 80066fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066fe:	e0d8      	b.n	80068b2 <UART_SetConfig+0x2e6>
 8006700:	2302      	movs	r3, #2
 8006702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006706:	e0d4      	b.n	80068b2 <UART_SetConfig+0x2e6>
 8006708:	2304      	movs	r3, #4
 800670a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800670e:	e0d0      	b.n	80068b2 <UART_SetConfig+0x2e6>
 8006710:	2308      	movs	r3, #8
 8006712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006716:	e0cc      	b.n	80068b2 <UART_SetConfig+0x2e6>
 8006718:	2310      	movs	r3, #16
 800671a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671e:	e0c8      	b.n	80068b2 <UART_SetConfig+0x2e6>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a5e      	ldr	r2, [pc, #376]	; (80068a0 <UART_SetConfig+0x2d4>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d125      	bne.n	8006776 <UART_SetConfig+0x1aa>
 800672a:	4b5b      	ldr	r3, [pc, #364]	; (8006898 <UART_SetConfig+0x2cc>)
 800672c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006730:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006734:	2b30      	cmp	r3, #48	; 0x30
 8006736:	d016      	beq.n	8006766 <UART_SetConfig+0x19a>
 8006738:	2b30      	cmp	r3, #48	; 0x30
 800673a:	d818      	bhi.n	800676e <UART_SetConfig+0x1a2>
 800673c:	2b20      	cmp	r3, #32
 800673e:	d00a      	beq.n	8006756 <UART_SetConfig+0x18a>
 8006740:	2b20      	cmp	r3, #32
 8006742:	d814      	bhi.n	800676e <UART_SetConfig+0x1a2>
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <UART_SetConfig+0x182>
 8006748:	2b10      	cmp	r3, #16
 800674a:	d008      	beq.n	800675e <UART_SetConfig+0x192>
 800674c:	e00f      	b.n	800676e <UART_SetConfig+0x1a2>
 800674e:	2300      	movs	r3, #0
 8006750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006754:	e0ad      	b.n	80068b2 <UART_SetConfig+0x2e6>
 8006756:	2302      	movs	r3, #2
 8006758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800675c:	e0a9      	b.n	80068b2 <UART_SetConfig+0x2e6>
 800675e:	2304      	movs	r3, #4
 8006760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006764:	e0a5      	b.n	80068b2 <UART_SetConfig+0x2e6>
 8006766:	2308      	movs	r3, #8
 8006768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800676c:	e0a1      	b.n	80068b2 <UART_SetConfig+0x2e6>
 800676e:	2310      	movs	r3, #16
 8006770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006774:	e09d      	b.n	80068b2 <UART_SetConfig+0x2e6>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a4a      	ldr	r2, [pc, #296]	; (80068a4 <UART_SetConfig+0x2d8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d125      	bne.n	80067cc <UART_SetConfig+0x200>
 8006780:	4b45      	ldr	r3, [pc, #276]	; (8006898 <UART_SetConfig+0x2cc>)
 8006782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006786:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800678a:	2bc0      	cmp	r3, #192	; 0xc0
 800678c:	d016      	beq.n	80067bc <UART_SetConfig+0x1f0>
 800678e:	2bc0      	cmp	r3, #192	; 0xc0
 8006790:	d818      	bhi.n	80067c4 <UART_SetConfig+0x1f8>
 8006792:	2b80      	cmp	r3, #128	; 0x80
 8006794:	d00a      	beq.n	80067ac <UART_SetConfig+0x1e0>
 8006796:	2b80      	cmp	r3, #128	; 0x80
 8006798:	d814      	bhi.n	80067c4 <UART_SetConfig+0x1f8>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <UART_SetConfig+0x1d8>
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d008      	beq.n	80067b4 <UART_SetConfig+0x1e8>
 80067a2:	e00f      	b.n	80067c4 <UART_SetConfig+0x1f8>
 80067a4:	2300      	movs	r3, #0
 80067a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067aa:	e082      	b.n	80068b2 <UART_SetConfig+0x2e6>
 80067ac:	2302      	movs	r3, #2
 80067ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b2:	e07e      	b.n	80068b2 <UART_SetConfig+0x2e6>
 80067b4:	2304      	movs	r3, #4
 80067b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ba:	e07a      	b.n	80068b2 <UART_SetConfig+0x2e6>
 80067bc:	2308      	movs	r3, #8
 80067be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c2:	e076      	b.n	80068b2 <UART_SetConfig+0x2e6>
 80067c4:	2310      	movs	r3, #16
 80067c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ca:	e072      	b.n	80068b2 <UART_SetConfig+0x2e6>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a35      	ldr	r2, [pc, #212]	; (80068a8 <UART_SetConfig+0x2dc>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d12a      	bne.n	800682c <UART_SetConfig+0x260>
 80067d6:	4b30      	ldr	r3, [pc, #192]	; (8006898 <UART_SetConfig+0x2cc>)
 80067d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067e4:	d01a      	beq.n	800681c <UART_SetConfig+0x250>
 80067e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067ea:	d81b      	bhi.n	8006824 <UART_SetConfig+0x258>
 80067ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f0:	d00c      	beq.n	800680c <UART_SetConfig+0x240>
 80067f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f6:	d815      	bhi.n	8006824 <UART_SetConfig+0x258>
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <UART_SetConfig+0x238>
 80067fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006800:	d008      	beq.n	8006814 <UART_SetConfig+0x248>
 8006802:	e00f      	b.n	8006824 <UART_SetConfig+0x258>
 8006804:	2300      	movs	r3, #0
 8006806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800680a:	e052      	b.n	80068b2 <UART_SetConfig+0x2e6>
 800680c:	2302      	movs	r3, #2
 800680e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006812:	e04e      	b.n	80068b2 <UART_SetConfig+0x2e6>
 8006814:	2304      	movs	r3, #4
 8006816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800681a:	e04a      	b.n	80068b2 <UART_SetConfig+0x2e6>
 800681c:	2308      	movs	r3, #8
 800681e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006822:	e046      	b.n	80068b2 <UART_SetConfig+0x2e6>
 8006824:	2310      	movs	r3, #16
 8006826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800682a:	e042      	b.n	80068b2 <UART_SetConfig+0x2e6>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a17      	ldr	r2, [pc, #92]	; (8006890 <UART_SetConfig+0x2c4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d13a      	bne.n	80068ac <UART_SetConfig+0x2e0>
 8006836:	4b18      	ldr	r3, [pc, #96]	; (8006898 <UART_SetConfig+0x2cc>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006840:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006844:	d01a      	beq.n	800687c <UART_SetConfig+0x2b0>
 8006846:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800684a:	d81b      	bhi.n	8006884 <UART_SetConfig+0x2b8>
 800684c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006850:	d00c      	beq.n	800686c <UART_SetConfig+0x2a0>
 8006852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006856:	d815      	bhi.n	8006884 <UART_SetConfig+0x2b8>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <UART_SetConfig+0x298>
 800685c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006860:	d008      	beq.n	8006874 <UART_SetConfig+0x2a8>
 8006862:	e00f      	b.n	8006884 <UART_SetConfig+0x2b8>
 8006864:	2300      	movs	r3, #0
 8006866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800686a:	e022      	b.n	80068b2 <UART_SetConfig+0x2e6>
 800686c:	2302      	movs	r3, #2
 800686e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006872:	e01e      	b.n	80068b2 <UART_SetConfig+0x2e6>
 8006874:	2304      	movs	r3, #4
 8006876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800687a:	e01a      	b.n	80068b2 <UART_SetConfig+0x2e6>
 800687c:	2308      	movs	r3, #8
 800687e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006882:	e016      	b.n	80068b2 <UART_SetConfig+0x2e6>
 8006884:	2310      	movs	r3, #16
 8006886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800688a:	e012      	b.n	80068b2 <UART_SetConfig+0x2e6>
 800688c:	efff69f3 	.word	0xefff69f3
 8006890:	40008000 	.word	0x40008000
 8006894:	40013800 	.word	0x40013800
 8006898:	40021000 	.word	0x40021000
 800689c:	40004400 	.word	0x40004400
 80068a0:	40004800 	.word	0x40004800
 80068a4:	40004c00 	.word	0x40004c00
 80068a8:	40005000 	.word	0x40005000
 80068ac:	2310      	movs	r3, #16
 80068ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a9f      	ldr	r2, [pc, #636]	; (8006b34 <UART_SetConfig+0x568>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d17a      	bne.n	80069b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d824      	bhi.n	800690e <UART_SetConfig+0x342>
 80068c4:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <UART_SetConfig+0x300>)
 80068c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ca:	bf00      	nop
 80068cc:	080068f1 	.word	0x080068f1
 80068d0:	0800690f 	.word	0x0800690f
 80068d4:	080068f9 	.word	0x080068f9
 80068d8:	0800690f 	.word	0x0800690f
 80068dc:	080068ff 	.word	0x080068ff
 80068e0:	0800690f 	.word	0x0800690f
 80068e4:	0800690f 	.word	0x0800690f
 80068e8:	0800690f 	.word	0x0800690f
 80068ec:	08006907 	.word	0x08006907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068f0:	f7fe f9dc 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 80068f4:	61f8      	str	r0, [r7, #28]
        break;
 80068f6:	e010      	b.n	800691a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068f8:	4b8f      	ldr	r3, [pc, #572]	; (8006b38 <UART_SetConfig+0x56c>)
 80068fa:	61fb      	str	r3, [r7, #28]
        break;
 80068fc:	e00d      	b.n	800691a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068fe:	f7fe f93d 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 8006902:	61f8      	str	r0, [r7, #28]
        break;
 8006904:	e009      	b.n	800691a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800690a:	61fb      	str	r3, [r7, #28]
        break;
 800690c:	e005      	b.n	800691a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006918:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 80fb 	beq.w	8006b18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	4613      	mov	r3, r2
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	4413      	add	r3, r2
 800692c:	69fa      	ldr	r2, [r7, #28]
 800692e:	429a      	cmp	r2, r3
 8006930:	d305      	bcc.n	800693e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	429a      	cmp	r2, r3
 800693c:	d903      	bls.n	8006946 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006944:	e0e8      	b.n	8006b18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	2200      	movs	r2, #0
 800694a:	461c      	mov	r4, r3
 800694c:	4615      	mov	r5, r2
 800694e:	f04f 0200 	mov.w	r2, #0
 8006952:	f04f 0300 	mov.w	r3, #0
 8006956:	022b      	lsls	r3, r5, #8
 8006958:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800695c:	0222      	lsls	r2, r4, #8
 800695e:	68f9      	ldr	r1, [r7, #12]
 8006960:	6849      	ldr	r1, [r1, #4]
 8006962:	0849      	lsrs	r1, r1, #1
 8006964:	2000      	movs	r0, #0
 8006966:	4688      	mov	r8, r1
 8006968:	4681      	mov	r9, r0
 800696a:	eb12 0a08 	adds.w	sl, r2, r8
 800696e:	eb43 0b09 	adc.w	fp, r3, r9
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	603b      	str	r3, [r7, #0]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006980:	4650      	mov	r0, sl
 8006982:	4659      	mov	r1, fp
 8006984:	f7fa f8c2 	bl	8000b0c <__aeabi_uldivmod>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4613      	mov	r3, r2
 800698e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006996:	d308      	bcc.n	80069aa <UART_SetConfig+0x3de>
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699e:	d204      	bcs.n	80069aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	60da      	str	r2, [r3, #12]
 80069a8:	e0b6      	b.n	8006b18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069b0:	e0b2      	b.n	8006b18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ba:	d15e      	bne.n	8006a7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80069bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d828      	bhi.n	8006a16 <UART_SetConfig+0x44a>
 80069c4:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <UART_SetConfig+0x400>)
 80069c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	080069f1 	.word	0x080069f1
 80069d0:	080069f9 	.word	0x080069f9
 80069d4:	08006a01 	.word	0x08006a01
 80069d8:	08006a17 	.word	0x08006a17
 80069dc:	08006a07 	.word	0x08006a07
 80069e0:	08006a17 	.word	0x08006a17
 80069e4:	08006a17 	.word	0x08006a17
 80069e8:	08006a17 	.word	0x08006a17
 80069ec:	08006a0f 	.word	0x08006a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069f0:	f7fe f95c 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 80069f4:	61f8      	str	r0, [r7, #28]
        break;
 80069f6:	e014      	b.n	8006a22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069f8:	f7fe f96e 	bl	8004cd8 <HAL_RCC_GetPCLK2Freq>
 80069fc:	61f8      	str	r0, [r7, #28]
        break;
 80069fe:	e010      	b.n	8006a22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a00:	4b4d      	ldr	r3, [pc, #308]	; (8006b38 <UART_SetConfig+0x56c>)
 8006a02:	61fb      	str	r3, [r7, #28]
        break;
 8006a04:	e00d      	b.n	8006a22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a06:	f7fe f8b9 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 8006a0a:	61f8      	str	r0, [r7, #28]
        break;
 8006a0c:	e009      	b.n	8006a22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a12:	61fb      	str	r3, [r7, #28]
        break;
 8006a14:	e005      	b.n	8006a22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d077      	beq.n	8006b18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	005a      	lsls	r2, r3, #1
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	085b      	lsrs	r3, r3, #1
 8006a32:	441a      	add	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b0f      	cmp	r3, #15
 8006a42:	d916      	bls.n	8006a72 <UART_SetConfig+0x4a6>
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a4a:	d212      	bcs.n	8006a72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	f023 030f 	bic.w	r3, r3, #15
 8006a54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	085b      	lsrs	r3, r3, #1
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	8afb      	ldrh	r3, [r7, #22]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	8afa      	ldrh	r2, [r7, #22]
 8006a6e:	60da      	str	r2, [r3, #12]
 8006a70:	e052      	b.n	8006b18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a78:	e04e      	b.n	8006b18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d827      	bhi.n	8006ad2 <UART_SetConfig+0x506>
 8006a82:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <UART_SetConfig+0x4bc>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006aad 	.word	0x08006aad
 8006a8c:	08006ab5 	.word	0x08006ab5
 8006a90:	08006abd 	.word	0x08006abd
 8006a94:	08006ad3 	.word	0x08006ad3
 8006a98:	08006ac3 	.word	0x08006ac3
 8006a9c:	08006ad3 	.word	0x08006ad3
 8006aa0:	08006ad3 	.word	0x08006ad3
 8006aa4:	08006ad3 	.word	0x08006ad3
 8006aa8:	08006acb 	.word	0x08006acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aac:	f7fe f8fe 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 8006ab0:	61f8      	str	r0, [r7, #28]
        break;
 8006ab2:	e014      	b.n	8006ade <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab4:	f7fe f910 	bl	8004cd8 <HAL_RCC_GetPCLK2Freq>
 8006ab8:	61f8      	str	r0, [r7, #28]
        break;
 8006aba:	e010      	b.n	8006ade <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006abc:	4b1e      	ldr	r3, [pc, #120]	; (8006b38 <UART_SetConfig+0x56c>)
 8006abe:	61fb      	str	r3, [r7, #28]
        break;
 8006ac0:	e00d      	b.n	8006ade <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ac2:	f7fe f85b 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 8006ac6:	61f8      	str	r0, [r7, #28]
        break;
 8006ac8:	e009      	b.n	8006ade <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ace:	61fb      	str	r3, [r7, #28]
        break;
 8006ad0:	e005      	b.n	8006ade <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006adc:	bf00      	nop
    }

    if (pclk != 0U)
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d019      	beq.n	8006b18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	085a      	lsrs	r2, r3, #1
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	441a      	add	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b0f      	cmp	r3, #15
 8006afc:	d909      	bls.n	8006b12 <UART_SetConfig+0x546>
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b04:	d205      	bcs.n	8006b12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60da      	str	r2, [r3, #12]
 8006b10:	e002      	b.n	8006b18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006b24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3728      	adds	r7, #40	; 0x28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b32:	bf00      	nop
 8006b34:	40008000 	.word	0x40008000
 8006b38:	00f42400 	.word	0x00f42400

08006b3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00a      	beq.n	8006b66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00a      	beq.n	8006b88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00a      	beq.n	8006baa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01a      	beq.n	8006c52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c3a:	d10a      	bne.n	8006c52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	605a      	str	r2, [r3, #4]
  }
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c90:	f7fc fbb4 	bl	80033fc <HAL_GetTick>
 8006c94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0308 	and.w	r3, r3, #8
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d10e      	bne.n	8006cc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ca4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f82d 	bl	8006d12 <UART_WaitOnFlagUntilTimeout>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e023      	b.n	8006d0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d10e      	bne.n	8006cee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f817 	bl	8006d12 <UART_WaitOnFlagUntilTimeout>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e00d      	b.n	8006d0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b09c      	sub	sp, #112	; 0x70
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	603b      	str	r3, [r7, #0]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d22:	e0a5      	b.n	8006e70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2a:	f000 80a1 	beq.w	8006e70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d2e:	f7fc fb65 	bl	80033fc <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d302      	bcc.n	8006d44 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d13e      	bne.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d58:	667b      	str	r3, [r7, #100]	; 0x64
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d64:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e6      	bne.n	8006d44 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	663b      	str	r3, [r7, #96]	; 0x60
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d96:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e5      	bne.n	8006d76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2220      	movs	r2, #32
 8006dae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2220      	movs	r2, #32
 8006db4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e067      	b.n	8006e92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d04f      	beq.n	8006e70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dde:	d147      	bne.n	8006e70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006de8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	461a      	mov	r2, r3
 8006e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
 8006e0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e6      	bne.n	8006dea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3308      	adds	r3, #8
 8006e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f023 0301 	bic.w	r3, r3, #1
 8006e32:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3308      	adds	r3, #8
 8006e3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e3c:	623a      	str	r2, [r7, #32]
 8006e3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	69f9      	ldr	r1, [r7, #28]
 8006e42:	6a3a      	ldr	r2, [r7, #32]
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e5      	bne.n	8006e1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2220      	movs	r2, #32
 8006e54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e010      	b.n	8006e92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	69da      	ldr	r2, [r3, #28]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	4013      	ands	r3, r2
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	bf0c      	ite	eq
 8006e80:	2301      	moveq	r3, #1
 8006e82:	2300      	movne	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	461a      	mov	r2, r3
 8006e88:	79fb      	ldrb	r3, [r7, #7]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	f43f af4a 	beq.w	8006d24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3770      	adds	r7, #112	; 0x70
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
	...

08006e9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b096      	sub	sp, #88	; 0x58
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	88fa      	ldrh	r2, [r7, #6]
 8006eb4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2222      	movs	r2, #34	; 0x22
 8006ec4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d02b      	beq.n	8006f26 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed2:	4a42      	ldr	r2, [pc, #264]	; (8006fdc <UART_Start_Receive_DMA+0x140>)
 8006ed4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eda:	4a41      	ldr	r2, [pc, #260]	; (8006fe0 <UART_Start_Receive_DMA+0x144>)
 8006edc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee2:	4a40      	ldr	r2, [pc, #256]	; (8006fe4 <UART_Start_Receive_DMA+0x148>)
 8006ee4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eea:	2200      	movs	r2, #0
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3324      	adds	r3, #36	; 0x24
 8006ef8:	4619      	mov	r1, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efe:	461a      	mov	r2, r3
 8006f00:	88fb      	ldrh	r3, [r7, #6]
 8006f02:	f7fc fc21 	bl	8003748 <HAL_DMA_Start_IT>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00c      	beq.n	8006f26 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2210      	movs	r2, #16
 8006f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e055      	b.n	8006fd2 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d018      	beq.n	8006f68 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
 8006f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f56:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f5c:	e841 2300 	strex	r3, r2, [r1]
 8006f60:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e6      	bne.n	8006f36 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3308      	adds	r3, #8
 8006f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	f043 0301 	orr.w	r3, r3, #1
 8006f7e:	653b      	str	r3, [r7, #80]	; 0x50
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3308      	adds	r3, #8
 8006f86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f88:	637a      	str	r2, [r7, #52]	; 0x34
 8006f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e5      	bne.n	8006f68 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	e853 3f00 	ldrex	r3, [r3]
 8006faa:	613b      	str	r3, [r7, #16]
   return(result);
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3308      	adds	r3, #8
 8006fba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fbc:	623a      	str	r2, [r7, #32]
 8006fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	69f9      	ldr	r1, [r7, #28]
 8006fc2:	6a3a      	ldr	r2, [r7, #32]
 8006fc4:	e841 2300 	strex	r3, r2, [r1]
 8006fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e5      	bne.n	8006f9c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3758      	adds	r7, #88	; 0x58
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	080070fb 	.word	0x080070fb
 8006fe0:	0800721f 	.word	0x0800721f
 8006fe4:	08007257 	.word	0x08007257

08006fe8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b089      	sub	sp, #36	; 0x24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007004:	61fb      	str	r3, [r7, #28]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	6979      	ldr	r1, [r7, #20]
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	613b      	str	r3, [r7, #16]
   return(result);
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e6      	bne.n	8006ff0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007028:	bf00      	nop
 800702a:	3724      	adds	r7, #36	; 0x24
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007034:	b480      	push	{r7}
 8007036:	b095      	sub	sp, #84	; 0x54
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007050:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800705a:	643b      	str	r3, [r7, #64]	; 0x40
 800705c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007060:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e6      	bne.n	800703c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	61fb      	str	r3, [r7, #28]
   return(result);
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	64bb      	str	r3, [r7, #72]	; 0x48
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3308      	adds	r3, #8
 800708c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800708e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007090:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e5      	bne.n	800706e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d118      	bne.n	80070dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f023 0310 	bic.w	r3, r3, #16
 80070be:	647b      	str	r3, [r7, #68]	; 0x44
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c8:	61bb      	str	r3, [r7, #24]
 80070ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	6979      	ldr	r1, [r7, #20]
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	613b      	str	r3, [r7, #16]
   return(result);
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e6      	bne.n	80070aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2220      	movs	r2, #32
 80070e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 80070ee:	bf00      	nop
 80070f0:	3754      	adds	r7, #84	; 0x54
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b09c      	sub	sp, #112	; 0x70
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d170      	bne.n	80071f8 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8007116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007118:	2200      	movs	r2, #0
 800711a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800711e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800712c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800712e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007132:	66bb      	str	r3, [r7, #104]	; 0x68
 8007134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800713c:	65bb      	str	r3, [r7, #88]	; 0x58
 800713e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007140:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007142:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007144:	e841 2300 	strex	r3, r2, [r1]
 8007148:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800714a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e6      	bne.n	800711e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3308      	adds	r3, #8
 8007156:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007162:	f023 0301 	bic.w	r3, r3, #1
 8007166:	667b      	str	r3, [r7, #100]	; 0x64
 8007168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3308      	adds	r3, #8
 800716e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007170:	647a      	str	r2, [r7, #68]	; 0x44
 8007172:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800717e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e5      	bne.n	8007150 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3308      	adds	r3, #8
 800718a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	623b      	str	r3, [r7, #32]
   return(result);
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800719a:	663b      	str	r3, [r7, #96]	; 0x60
 800719c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3308      	adds	r3, #8
 80071a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071a4:	633a      	str	r2, [r7, #48]	; 0x30
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e5      	bne.n	8007184 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ba:	2220      	movs	r2, #32
 80071bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d118      	bne.n	80071f8 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0310 	bic.w	r3, r3, #16
 80071da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	461a      	mov	r2, r3
 80071e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071e4:	61fb      	str	r3, [r7, #28]
 80071e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	69b9      	ldr	r1, [r7, #24]
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	617b      	str	r3, [r7, #20]
   return(result);
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e6      	bne.n	80071c6 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d107      	bne.n	8007210 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007202:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007206:	4619      	mov	r1, r3
 8007208:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800720a:	f7ff f9d3 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800720e:	e002      	b.n	8007216 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8007210:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007212:	f7f9 ffa7 	bl	8001164 <HAL_UART_RxCpltCallback>
}
 8007216:	bf00      	nop
 8007218:	3770      	adds	r7, #112	; 0x70
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b084      	sub	sp, #16
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007230:	2b01      	cmp	r3, #1
 8007232:	d109      	bne.n	8007248 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800723a:	085b      	lsrs	r3, r3, #1
 800723c:	b29b      	uxth	r3, r3
 800723e:	4619      	mov	r1, r3
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff f9b7 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007246:	e002      	b.n	800724e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f7ff f99f 	bl	800658c <HAL_UART_RxHalfCpltCallback>
}
 800724e:	bf00      	nop
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b086      	sub	sp, #24
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007268:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800726e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727a:	2b80      	cmp	r3, #128	; 0x80
 800727c:	d109      	bne.n	8007292 <UART_DMAError+0x3c>
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2b21      	cmp	r3, #33	; 0x21
 8007282:	d106      	bne.n	8007292 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2200      	movs	r2, #0
 8007288:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800728c:	6978      	ldr	r0, [r7, #20]
 800728e:	f7ff feab 	bl	8006fe8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729c:	2b40      	cmp	r3, #64	; 0x40
 800729e:	d109      	bne.n	80072b4 <UART_DMAError+0x5e>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b22      	cmp	r3, #34	; 0x22
 80072a4:	d106      	bne.n	80072b4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80072ae:	6978      	ldr	r0, [r7, #20]
 80072b0:	f7ff fec0 	bl	8007034 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ba:	f043 0210 	orr.w	r2, r3, #16
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072c4:	6978      	ldr	r0, [r7, #20]
 80072c6:	f7ff f96b 	bl	80065a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072ca:	bf00      	nop
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f7ff f955 	bl	80065a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072f6:	bf00      	nop
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b088      	sub	sp, #32
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	60bb      	str	r3, [r7, #8]
   return(result);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800731a:	61fb      	str	r3, [r7, #28]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	6979      	ldr	r1, [r7, #20]
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	613b      	str	r3, [r7, #16]
   return(result);
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e6      	bne.n	8007306 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff f917 	bl	8006578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800734a:	bf00      	nop
 800734c:	3720      	adds	r7, #32
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
	...

08007368 <__NVIC_SetPriority>:
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	4603      	mov	r3, r0
 8007370:	6039      	str	r1, [r7, #0]
 8007372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007378:	2b00      	cmp	r3, #0
 800737a:	db0a      	blt.n	8007392 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	b2da      	uxtb	r2, r3
 8007380:	490c      	ldr	r1, [pc, #48]	; (80073b4 <__NVIC_SetPriority+0x4c>)
 8007382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007386:	0112      	lsls	r2, r2, #4
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	440b      	add	r3, r1
 800738c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007390:	e00a      	b.n	80073a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	b2da      	uxtb	r2, r3
 8007396:	4908      	ldr	r1, [pc, #32]	; (80073b8 <__NVIC_SetPriority+0x50>)
 8007398:	79fb      	ldrb	r3, [r7, #7]
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	3b04      	subs	r3, #4
 80073a0:	0112      	lsls	r2, r2, #4
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	440b      	add	r3, r1
 80073a6:	761a      	strb	r2, [r3, #24]
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	e000e100 	.word	0xe000e100
 80073b8:	e000ed00 	.word	0xe000ed00

080073bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80073bc:	b580      	push	{r7, lr}
 80073be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80073c0:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <SysTick_Handler+0x1c>)
 80073c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80073c4:	f002 f828 	bl	8009418 <xTaskGetSchedulerState>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d001      	beq.n	80073d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80073ce:	f002 ff0b 	bl	800a1e8 <xPortSysTickHandler>
  }
}
 80073d2:	bf00      	nop
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	e000e010 	.word	0xe000e010

080073dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80073dc:	b580      	push	{r7, lr}
 80073de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80073e0:	2100      	movs	r1, #0
 80073e2:	f06f 0004 	mvn.w	r0, #4
 80073e6:	f7ff ffbf 	bl	8007368 <__NVIC_SetPriority>
#endif
}
 80073ea:	bf00      	nop
 80073ec:	bd80      	pop	{r7, pc}
	...

080073f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073f6:	f3ef 8305 	mrs	r3, IPSR
 80073fa:	603b      	str	r3, [r7, #0]
  return(result);
 80073fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007402:	f06f 0305 	mvn.w	r3, #5
 8007406:	607b      	str	r3, [r7, #4]
 8007408:	e00c      	b.n	8007424 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800740a:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <osKernelInitialize+0x44>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d105      	bne.n	800741e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007412:	4b08      	ldr	r3, [pc, #32]	; (8007434 <osKernelInitialize+0x44>)
 8007414:	2201      	movs	r2, #1
 8007416:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007418:	2300      	movs	r3, #0
 800741a:	607b      	str	r3, [r7, #4]
 800741c:	e002      	b.n	8007424 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800741e:	f04f 33ff 	mov.w	r3, #4294967295
 8007422:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007424:	687b      	ldr	r3, [r7, #4]
}
 8007426:	4618      	mov	r0, r3
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	200002fc 	.word	0x200002fc

08007438 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800743e:	f3ef 8305 	mrs	r3, IPSR
 8007442:	603b      	str	r3, [r7, #0]
  return(result);
 8007444:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <osKernelStart+0x1a>
    stat = osErrorISR;
 800744a:	f06f 0305 	mvn.w	r3, #5
 800744e:	607b      	str	r3, [r7, #4]
 8007450:	e010      	b.n	8007474 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007452:	4b0b      	ldr	r3, [pc, #44]	; (8007480 <osKernelStart+0x48>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d109      	bne.n	800746e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800745a:	f7ff ffbf 	bl	80073dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800745e:	4b08      	ldr	r3, [pc, #32]	; (8007480 <osKernelStart+0x48>)
 8007460:	2202      	movs	r2, #2
 8007462:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007464:	f001 fb90 	bl	8008b88 <vTaskStartScheduler>
      stat = osOK;
 8007468:	2300      	movs	r3, #0
 800746a:	607b      	str	r3, [r7, #4]
 800746c:	e002      	b.n	8007474 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800746e:	f04f 33ff 	mov.w	r3, #4294967295
 8007472:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007474:	687b      	ldr	r3, [r7, #4]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	200002fc 	.word	0x200002fc

08007484 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007484:	b580      	push	{r7, lr}
 8007486:	b08e      	sub	sp, #56	; 0x38
 8007488:	af04      	add	r7, sp, #16
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007490:	2300      	movs	r3, #0
 8007492:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007494:	f3ef 8305 	mrs	r3, IPSR
 8007498:	617b      	str	r3, [r7, #20]
  return(result);
 800749a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800749c:	2b00      	cmp	r3, #0
 800749e:	d17e      	bne.n	800759e <osThreadNew+0x11a>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d07b      	beq.n	800759e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80074a6:	2380      	movs	r3, #128	; 0x80
 80074a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80074aa:	2318      	movs	r3, #24
 80074ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80074b2:	f04f 33ff 	mov.w	r3, #4294967295
 80074b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d045      	beq.n	800754a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d002      	beq.n	80074cc <osThreadNew+0x48>
        name = attr->name;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d008      	beq.n	80074f2 <osThreadNew+0x6e>
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	2b38      	cmp	r3, #56	; 0x38
 80074e4:	d805      	bhi.n	80074f2 <osThreadNew+0x6e>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <osThreadNew+0x72>
        return (NULL);
 80074f2:	2300      	movs	r3, #0
 80074f4:	e054      	b.n	80075a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	089b      	lsrs	r3, r3, #2
 8007504:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00e      	beq.n	800752c <osThreadNew+0xa8>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	2b5b      	cmp	r3, #91	; 0x5b
 8007514:	d90a      	bls.n	800752c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800751a:	2b00      	cmp	r3, #0
 800751c:	d006      	beq.n	800752c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <osThreadNew+0xa8>
        mem = 1;
 8007526:	2301      	movs	r3, #1
 8007528:	61bb      	str	r3, [r7, #24]
 800752a:	e010      	b.n	800754e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10c      	bne.n	800754e <osThreadNew+0xca>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d108      	bne.n	800754e <osThreadNew+0xca>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d104      	bne.n	800754e <osThreadNew+0xca>
          mem = 0;
 8007544:	2300      	movs	r3, #0
 8007546:	61bb      	str	r3, [r7, #24]
 8007548:	e001      	b.n	800754e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d110      	bne.n	8007576 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800755c:	9202      	str	r2, [sp, #8]
 800755e:	9301      	str	r3, [sp, #4]
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	6a3a      	ldr	r2, [r7, #32]
 8007568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f001 f936 	bl	80087dc <xTaskCreateStatic>
 8007570:	4603      	mov	r3, r0
 8007572:	613b      	str	r3, [r7, #16]
 8007574:	e013      	b.n	800759e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d110      	bne.n	800759e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	b29a      	uxth	r2, r3
 8007580:	f107 0310 	add.w	r3, r7, #16
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f001 f981 	bl	8008896 <xTaskCreate>
 8007594:	4603      	mov	r3, r0
 8007596:	2b01      	cmp	r3, #1
 8007598:	d001      	beq.n	800759e <osThreadNew+0x11a>
            hTask = NULL;
 800759a:	2300      	movs	r3, #0
 800759c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800759e:	693b      	ldr	r3, [r7, #16]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3728      	adds	r7, #40	; 0x28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075b0:	f3ef 8305 	mrs	r3, IPSR
 80075b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80075b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <osDelay+0x1c>
    stat = osErrorISR;
 80075bc:	f06f 0305 	mvn.w	r3, #5
 80075c0:	60fb      	str	r3, [r7, #12]
 80075c2:	e007      	b.n	80075d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 faa6 	bl	8008b20 <vTaskDelay>
    }
  }

  return (stat);
 80075d4:	68fb      	ldr	r3, [r7, #12]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80075de:	b580      	push	{r7, lr}
 80075e0:	b08a      	sub	sp, #40	; 0x28
 80075e2:	af02      	add	r7, sp, #8
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075ee:	f3ef 8305 	mrs	r3, IPSR
 80075f2:	613b      	str	r3, [r7, #16]
  return(result);
 80075f4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d175      	bne.n	80076e6 <osSemaphoreNew+0x108>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d072      	beq.n	80076e6 <osSemaphoreNew+0x108>
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	429a      	cmp	r2, r3
 8007606:	d86e      	bhi.n	80076e6 <osSemaphoreNew+0x108>
    mem = -1;
 8007608:	f04f 33ff 	mov.w	r3, #4294967295
 800760c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d015      	beq.n	8007640 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d006      	beq.n	800762a <osSemaphoreNew+0x4c>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	2b4f      	cmp	r3, #79	; 0x4f
 8007622:	d902      	bls.n	800762a <osSemaphoreNew+0x4c>
        mem = 1;
 8007624:	2301      	movs	r3, #1
 8007626:	61bb      	str	r3, [r7, #24]
 8007628:	e00c      	b.n	8007644 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d108      	bne.n	8007644 <osSemaphoreNew+0x66>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d104      	bne.n	8007644 <osSemaphoreNew+0x66>
          mem = 0;
 800763a:	2300      	movs	r3, #0
 800763c:	61bb      	str	r3, [r7, #24]
 800763e:	e001      	b.n	8007644 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764a:	d04c      	beq.n	80076e6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d128      	bne.n	80076a4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d10a      	bne.n	800766e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	2203      	movs	r2, #3
 800765e:	9200      	str	r2, [sp, #0]
 8007660:	2200      	movs	r2, #0
 8007662:	2100      	movs	r1, #0
 8007664:	2001      	movs	r0, #1
 8007666:	f000 f993 	bl	8007990 <xQueueGenericCreateStatic>
 800766a:	61f8      	str	r0, [r7, #28]
 800766c:	e005      	b.n	800767a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800766e:	2203      	movs	r2, #3
 8007670:	2100      	movs	r1, #0
 8007672:	2001      	movs	r0, #1
 8007674:	f000 fa04 	bl	8007a80 <xQueueGenericCreate>
 8007678:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d022      	beq.n	80076c6 <osSemaphoreNew+0xe8>
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d01f      	beq.n	80076c6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007686:	2300      	movs	r3, #0
 8007688:	2200      	movs	r2, #0
 800768a:	2100      	movs	r1, #0
 800768c:	69f8      	ldr	r0, [r7, #28]
 800768e:	f000 fabf 	bl	8007c10 <xQueueGenericSend>
 8007692:	4603      	mov	r3, r0
 8007694:	2b01      	cmp	r3, #1
 8007696:	d016      	beq.n	80076c6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007698:	69f8      	ldr	r0, [r7, #28]
 800769a:	f000 fecb 	bl	8008434 <vQueueDelete>
            hSemaphore = NULL;
 800769e:	2300      	movs	r3, #0
 80076a0:	61fb      	str	r3, [r7, #28]
 80076a2:	e010      	b.n	80076c6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d108      	bne.n	80076bc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	461a      	mov	r2, r3
 80076b0:	68b9      	ldr	r1, [r7, #8]
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 fa41 	bl	8007b3a <xQueueCreateCountingSemaphoreStatic>
 80076b8:	61f8      	str	r0, [r7, #28]
 80076ba:	e004      	b.n	80076c6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80076bc:	68b9      	ldr	r1, [r7, #8]
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 fa72 	bl	8007ba8 <xQueueCreateCountingSemaphore>
 80076c4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00c      	beq.n	80076e6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <osSemaphoreNew+0xfc>
          name = attr->name;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	617b      	str	r3, [r7, #20]
 80076d8:	e001      	b.n	80076de <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80076de:	6979      	ldr	r1, [r7, #20]
 80076e0:	69f8      	ldr	r0, [r7, #28]
 80076e2:	f000 fff3 	bl	80086cc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80076e6:	69fb      	ldr	r3, [r7, #28]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3720      	adds	r7, #32
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4a07      	ldr	r2, [pc, #28]	; (800771c <vApplicationGetIdleTaskMemory+0x2c>)
 8007700:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	4a06      	ldr	r2, [pc, #24]	; (8007720 <vApplicationGetIdleTaskMemory+0x30>)
 8007706:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2280      	movs	r2, #128	; 0x80
 800770c:	601a      	str	r2, [r3, #0]
}
 800770e:	bf00      	nop
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	20000300 	.word	0x20000300
 8007720:	2000035c 	.word	0x2000035c

08007724 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4a07      	ldr	r2, [pc, #28]	; (8007750 <vApplicationGetTimerTaskMemory+0x2c>)
 8007734:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	4a06      	ldr	r2, [pc, #24]	; (8007754 <vApplicationGetTimerTaskMemory+0x30>)
 800773a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007742:	601a      	str	r2, [r3, #0]
}
 8007744:	bf00      	nop
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	2000055c 	.word	0x2000055c
 8007754:	200005b8 	.word	0x200005b8

08007758 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f103 0208 	add.w	r2, r3, #8
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f04f 32ff 	mov.w	r2, #4294967295
 8007770:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f103 0208 	add.w	r2, r3, #8
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f103 0208 	add.w	r2, r3, #8
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077a6:	bf00      	nop
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077b2:	b480      	push	{r7}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	601a      	str	r2, [r3, #0]
}
 80077ee:	bf00      	nop
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077fa:	b480      	push	{r7}
 80077fc:	b085      	sub	sp, #20
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007810:	d103      	bne.n	800781a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	e00c      	b.n	8007834 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	3308      	adds	r3, #8
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	e002      	b.n	8007828 <vListInsert+0x2e>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	429a      	cmp	r2, r3
 8007832:	d2f6      	bcs.n	8007822 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	601a      	str	r2, [r3, #0]
}
 8007860:	bf00      	nop
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6892      	ldr	r2, [r2, #8]
 8007882:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6852      	ldr	r2, [r2, #4]
 800788c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	429a      	cmp	r2, r3
 8007896:	d103      	bne.n	80078a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	1e5a      	subs	r2, r3, #1
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80078ea:	f002 fbeb 	bl	800a0c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f6:	68f9      	ldr	r1, [r7, #12]
 80078f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078fa:	fb01 f303 	mul.w	r3, r1, r3
 80078fe:	441a      	add	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791a:	3b01      	subs	r3, #1
 800791c:	68f9      	ldr	r1, [r7, #12]
 800791e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007920:	fb01 f303 	mul.w	r3, r1, r3
 8007924:	441a      	add	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	22ff      	movs	r2, #255	; 0xff
 800792e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	22ff      	movs	r2, #255	; 0xff
 8007936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d114      	bne.n	800796a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d01a      	beq.n	800797e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3310      	adds	r3, #16
 800794c:	4618      	mov	r0, r3
 800794e:	f001 fba5 	bl	800909c <xTaskRemoveFromEventList>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d012      	beq.n	800797e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007958:	4b0c      	ldr	r3, [pc, #48]	; (800798c <xQueueGenericReset+0xcc>)
 800795a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	e009      	b.n	800797e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3310      	adds	r3, #16
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff fef2 	bl	8007758 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	3324      	adds	r3, #36	; 0x24
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff feed 	bl	8007758 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800797e:	f002 fbd1 	bl	800a124 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007982:	2301      	movs	r3, #1
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	e000ed04 	.word	0xe000ed04

08007990 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08e      	sub	sp, #56	; 0x38
 8007994:	af02      	add	r7, sp, #8
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10a      	bne.n	80079ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079b6:	bf00      	nop
 80079b8:	e7fe      	b.n	80079b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079d2:	bf00      	nop
 80079d4:	e7fe      	b.n	80079d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <xQueueGenericCreateStatic+0x52>
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <xQueueGenericCreateStatic+0x56>
 80079e2:	2301      	movs	r3, #1
 80079e4:	e000      	b.n	80079e8 <xQueueGenericCreateStatic+0x58>
 80079e6:	2300      	movs	r3, #0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10a      	bne.n	8007a02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	623b      	str	r3, [r7, #32]
}
 80079fe:	bf00      	nop
 8007a00:	e7fe      	b.n	8007a00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d102      	bne.n	8007a0e <xQueueGenericCreateStatic+0x7e>
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <xQueueGenericCreateStatic+0x82>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e000      	b.n	8007a14 <xQueueGenericCreateStatic+0x84>
 8007a12:	2300      	movs	r3, #0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	61fb      	str	r3, [r7, #28]
}
 8007a2a:	bf00      	nop
 8007a2c:	e7fe      	b.n	8007a2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a2e:	2350      	movs	r3, #80	; 0x50
 8007a30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2b50      	cmp	r3, #80	; 0x50
 8007a36:	d00a      	beq.n	8007a4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	61bb      	str	r3, [r7, #24]
}
 8007a4a:	bf00      	nop
 8007a4c:	e7fe      	b.n	8007a4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00d      	beq.n	8007a76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	68b9      	ldr	r1, [r7, #8]
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 f83f 	bl	8007af4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3730      	adds	r7, #48	; 0x30
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b08a      	sub	sp, #40	; 0x28
 8007a84:	af02      	add	r7, sp, #8
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10a      	bne.n	8007aaa <xQueueGenericCreate+0x2a>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	613b      	str	r3, [r7, #16]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	fb02 f303 	mul.w	r3, r2, r3
 8007ab2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	3350      	adds	r3, #80	; 0x50
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f002 fc25 	bl	800a308 <pvPortMalloc>
 8007abe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d011      	beq.n	8007aea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	3350      	adds	r3, #80	; 0x50
 8007ace:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ad8:	79fa      	ldrb	r2, [r7, #7]
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 f805 	bl	8007af4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007aea:	69bb      	ldr	r3, [r7, #24]
	}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3720      	adds	r7, #32
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d103      	bne.n	8007b10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	e002      	b.n	8007b16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b22:	2101      	movs	r1, #1
 8007b24:	69b8      	ldr	r0, [r7, #24]
 8007b26:	f7ff fecb 	bl	80078c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	78fa      	ldrb	r2, [r7, #3]
 8007b2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b32:	bf00      	nop
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b08a      	sub	sp, #40	; 0x28
 8007b3e:	af02      	add	r7, sp, #8
 8007b40:	60f8      	str	r0, [r7, #12]
 8007b42:	60b9      	str	r1, [r7, #8]
 8007b44:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10a      	bne.n	8007b62 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	61bb      	str	r3, [r7, #24]
}
 8007b5e:	bf00      	nop
 8007b60:	e7fe      	b.n	8007b60 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d90a      	bls.n	8007b80 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	617b      	str	r3, [r7, #20]
}
 8007b7c:	bf00      	nop
 8007b7e:	e7fe      	b.n	8007b7e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007b80:	2302      	movs	r3, #2
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	2100      	movs	r1, #0
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f7ff ff00 	bl	8007990 <xQueueGenericCreateStatic>
 8007b90:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007b9e:	69fb      	ldr	r3, [r7, #28]
	}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3720      	adds	r7, #32
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10a      	bne.n	8007bce <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	613b      	str	r3, [r7, #16]
}
 8007bca:	bf00      	nop
 8007bcc:	e7fe      	b.n	8007bcc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d90a      	bls.n	8007bec <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	60fb      	str	r3, [r7, #12]
}
 8007be8:	bf00      	nop
 8007bea:	e7fe      	b.n	8007bea <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007bec:	2202      	movs	r2, #2
 8007bee:	2100      	movs	r1, #0
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7ff ff45 	bl	8007a80 <xQueueGenericCreate>
 8007bf6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007c04:	697b      	ldr	r3, [r7, #20]
	}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08e      	sub	sp, #56	; 0x38
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10a      	bne.n	8007c42 <xQueueGenericSend+0x32>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d103      	bne.n	8007c50 <xQueueGenericSend+0x40>
 8007c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <xQueueGenericSend+0x44>
 8007c50:	2301      	movs	r3, #1
 8007c52:	e000      	b.n	8007c56 <xQueueGenericSend+0x46>
 8007c54:	2300      	movs	r3, #0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <xQueueGenericSend+0x60>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c6c:	bf00      	nop
 8007c6e:	e7fe      	b.n	8007c6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d103      	bne.n	8007c7e <xQueueGenericSend+0x6e>
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d101      	bne.n	8007c82 <xQueueGenericSend+0x72>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e000      	b.n	8007c84 <xQueueGenericSend+0x74>
 8007c82:	2300      	movs	r3, #0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10a      	bne.n	8007c9e <xQueueGenericSend+0x8e>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	623b      	str	r3, [r7, #32]
}
 8007c9a:	bf00      	nop
 8007c9c:	e7fe      	b.n	8007c9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c9e:	f001 fbbb 	bl	8009418 <xTaskGetSchedulerState>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d102      	bne.n	8007cae <xQueueGenericSend+0x9e>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <xQueueGenericSend+0xa2>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e000      	b.n	8007cb4 <xQueueGenericSend+0xa4>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <xQueueGenericSend+0xbe>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	61fb      	str	r3, [r7, #28]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cce:	f002 f9f9 	bl	800a0c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d302      	bcc.n	8007ce4 <xQueueGenericSend+0xd4>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d129      	bne.n	8007d38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	68b9      	ldr	r1, [r7, #8]
 8007ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cea:	f000 fbde 	bl	80084aa <prvCopyDataToQueue>
 8007cee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d010      	beq.n	8007d1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	3324      	adds	r3, #36	; 0x24
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f001 f9cd 	bl	800909c <xTaskRemoveFromEventList>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d013      	beq.n	8007d30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d08:	4b3f      	ldr	r3, [pc, #252]	; (8007e08 <xQueueGenericSend+0x1f8>)
 8007d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	e00a      	b.n	8007d30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d007      	beq.n	8007d30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d20:	4b39      	ldr	r3, [pc, #228]	; (8007e08 <xQueueGenericSend+0x1f8>)
 8007d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d30:	f002 f9f8 	bl	800a124 <vPortExitCritical>
				return pdPASS;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e063      	b.n	8007e00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d103      	bne.n	8007d46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d3e:	f002 f9f1 	bl	800a124 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	e05c      	b.n	8007e00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d106      	bne.n	8007d5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d4c:	f107 0314 	add.w	r3, r7, #20
 8007d50:	4618      	mov	r0, r3
 8007d52:	f001 fa07 	bl	8009164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d56:	2301      	movs	r3, #1
 8007d58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d5a:	f002 f9e3 	bl	800a124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d5e:	f000 ff79 	bl	8008c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d62:	f002 f9af 	bl	800a0c4 <vPortEnterCritical>
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d6c:	b25b      	sxtb	r3, r3
 8007d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d72:	d103      	bne.n	8007d7c <xQueueGenericSend+0x16c>
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d82:	b25b      	sxtb	r3, r3
 8007d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d88:	d103      	bne.n	8007d92 <xQueueGenericSend+0x182>
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d92:	f002 f9c7 	bl	800a124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d96:	1d3a      	adds	r2, r7, #4
 8007d98:	f107 0314 	add.w	r3, r7, #20
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f001 f9f6 	bl	8009190 <xTaskCheckForTimeOut>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d124      	bne.n	8007df4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007daa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dac:	f000 fc75 	bl	800869a <prvIsQueueFull>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d018      	beq.n	8007de8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	3310      	adds	r3, #16
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f001 f91c 	bl	8008ffc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dc6:	f000 fc00 	bl	80085ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007dca:	f000 ff51 	bl	8008c70 <xTaskResumeAll>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f47f af7c 	bne.w	8007cce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007dd6:	4b0c      	ldr	r3, [pc, #48]	; (8007e08 <xQueueGenericSend+0x1f8>)
 8007dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	e772      	b.n	8007cce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dea:	f000 fbee 	bl	80085ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dee:	f000 ff3f 	bl	8008c70 <xTaskResumeAll>
 8007df2:	e76c      	b.n	8007cce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007df6:	f000 fbe8 	bl	80085ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dfa:	f000 ff39 	bl	8008c70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007dfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3738      	adds	r7, #56	; 0x38
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	e000ed04 	.word	0xe000ed04

08007e0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b090      	sub	sp, #64	; 0x40
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10a      	bne.n	8007e3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e36:	bf00      	nop
 8007e38:	e7fe      	b.n	8007e38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d103      	bne.n	8007e48 <xQueueGenericSendFromISR+0x3c>
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <xQueueGenericSendFromISR+0x40>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e000      	b.n	8007e4e <xQueueGenericSendFromISR+0x42>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10a      	bne.n	8007e68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e64:	bf00      	nop
 8007e66:	e7fe      	b.n	8007e66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d103      	bne.n	8007e76 <xQueueGenericSendFromISR+0x6a>
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d101      	bne.n	8007e7a <xQueueGenericSendFromISR+0x6e>
 8007e76:	2301      	movs	r3, #1
 8007e78:	e000      	b.n	8007e7c <xQueueGenericSendFromISR+0x70>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10a      	bne.n	8007e96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	623b      	str	r3, [r7, #32]
}
 8007e92:	bf00      	nop
 8007e94:	e7fe      	b.n	8007e94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e96:	f002 f9f7 	bl	800a288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e9a:	f3ef 8211 	mrs	r2, BASEPRI
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	61fa      	str	r2, [r7, #28]
 8007eb0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007eb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007eb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d302      	bcc.n	8007ec8 <xQueueGenericSendFromISR+0xbc>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d12f      	bne.n	8007f28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	68b9      	ldr	r1, [r7, #8]
 8007edc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ede:	f000 fae4 	bl	80084aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ee2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eea:	d112      	bne.n	8007f12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d016      	beq.n	8007f22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef6:	3324      	adds	r3, #36	; 0x24
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f001 f8cf 	bl	800909c <xTaskRemoveFromEventList>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00e      	beq.n	8007f22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00b      	beq.n	8007f22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	e007      	b.n	8007f22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f16:	3301      	adds	r3, #1
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	b25a      	sxtb	r2, r3
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f22:	2301      	movs	r3, #1
 8007f24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007f26:	e001      	b.n	8007f2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3740      	adds	r7, #64	; 0x40
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b08e      	sub	sp, #56	; 0x38
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10a      	bne.n	8007f6c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	623b      	str	r3, [r7, #32]
}
 8007f68:	bf00      	nop
 8007f6a:	e7fe      	b.n	8007f6a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00a      	beq.n	8007f8a <xQueueGiveFromISR+0x48>
	__asm volatile
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	61fb      	str	r3, [r7, #28]
}
 8007f86:	bf00      	nop
 8007f88:	e7fe      	b.n	8007f88 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d103      	bne.n	8007f9a <xQueueGiveFromISR+0x58>
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <xQueueGiveFromISR+0x5c>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e000      	b.n	8007fa0 <xQueueGiveFromISR+0x5e>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10a      	bne.n	8007fba <xQueueGiveFromISR+0x78>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	61bb      	str	r3, [r7, #24]
}
 8007fb6:	bf00      	nop
 8007fb8:	e7fe      	b.n	8007fb8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fba:	f002 f965 	bl	800a288 <vPortValidateInterruptPriority>
	__asm volatile
 8007fbe:	f3ef 8211 	mrs	r2, BASEPRI
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	617a      	str	r2, [r7, #20]
 8007fd4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007fd6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d22b      	bcs.n	8008042 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ffc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008004:	d112      	bne.n	800802c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	2b00      	cmp	r3, #0
 800800c:	d016      	beq.n	800803c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	3324      	adds	r3, #36	; 0x24
 8008012:	4618      	mov	r0, r3
 8008014:	f001 f842 	bl	800909c <xTaskRemoveFromEventList>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00e      	beq.n	800803c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00b      	beq.n	800803c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2201      	movs	r2, #1
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	e007      	b.n	800803c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800802c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008030:	3301      	adds	r3, #1
 8008032:	b2db      	uxtb	r3, r3
 8008034:	b25a      	sxtb	r2, r3
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800803c:	2301      	movs	r3, #1
 800803e:	637b      	str	r3, [r7, #52]	; 0x34
 8008040:	e001      	b.n	8008046 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008042:	2300      	movs	r3, #0
 8008044:	637b      	str	r3, [r7, #52]	; 0x34
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f383 8811 	msr	BASEPRI, r3
}
 8008050:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008054:	4618      	mov	r0, r3
 8008056:	3738      	adds	r7, #56	; 0x38
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b08c      	sub	sp, #48	; 0x30
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008068:	2300      	movs	r3, #0
 800806a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10a      	bne.n	800808c <xQueueReceive+0x30>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	623b      	str	r3, [r7, #32]
}
 8008088:	bf00      	nop
 800808a:	e7fe      	b.n	800808a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d103      	bne.n	800809a <xQueueReceive+0x3e>
 8008092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <xQueueReceive+0x42>
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <xQueueReceive+0x44>
 800809e:	2300      	movs	r3, #0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10a      	bne.n	80080ba <xQueueReceive+0x5e>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	61fb      	str	r3, [r7, #28]
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080ba:	f001 f9ad 	bl	8009418 <xTaskGetSchedulerState>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d102      	bne.n	80080ca <xQueueReceive+0x6e>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <xQueueReceive+0x72>
 80080ca:	2301      	movs	r3, #1
 80080cc:	e000      	b.n	80080d0 <xQueueReceive+0x74>
 80080ce:	2300      	movs	r3, #0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10a      	bne.n	80080ea <xQueueReceive+0x8e>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	61bb      	str	r3, [r7, #24]
}
 80080e6:	bf00      	nop
 80080e8:	e7fe      	b.n	80080e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080ea:	f001 ffeb 	bl	800a0c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d01f      	beq.n	800813a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080fa:	68b9      	ldr	r1, [r7, #8]
 80080fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080fe:	f000 fa3e 	bl	800857e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	1e5a      	subs	r2, r3, #1
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008108:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800810a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00f      	beq.n	8008132 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	3310      	adds	r3, #16
 8008116:	4618      	mov	r0, r3
 8008118:	f000 ffc0 	bl	800909c <xTaskRemoveFromEventList>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d007      	beq.n	8008132 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008122:	4b3d      	ldr	r3, [pc, #244]	; (8008218 <xQueueReceive+0x1bc>)
 8008124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008132:	f001 fff7 	bl	800a124 <vPortExitCritical>
				return pdPASS;
 8008136:	2301      	movs	r3, #1
 8008138:	e069      	b.n	800820e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d103      	bne.n	8008148 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008140:	f001 fff0 	bl	800a124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008144:	2300      	movs	r3, #0
 8008146:	e062      	b.n	800820e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814a:	2b00      	cmp	r3, #0
 800814c:	d106      	bne.n	800815c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800814e:	f107 0310 	add.w	r3, r7, #16
 8008152:	4618      	mov	r0, r3
 8008154:	f001 f806 	bl	8009164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008158:	2301      	movs	r3, #1
 800815a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800815c:	f001 ffe2 	bl	800a124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008160:	f000 fd78 	bl	8008c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008164:	f001 ffae 	bl	800a0c4 <vPortEnterCritical>
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800816e:	b25b      	sxtb	r3, r3
 8008170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008174:	d103      	bne.n	800817e <xQueueReceive+0x122>
 8008176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008184:	b25b      	sxtb	r3, r3
 8008186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818a:	d103      	bne.n	8008194 <xQueueReceive+0x138>
 800818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008194:	f001 ffc6 	bl	800a124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008198:	1d3a      	adds	r2, r7, #4
 800819a:	f107 0310 	add.w	r3, r7, #16
 800819e:	4611      	mov	r1, r2
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 fff5 	bl	8009190 <xTaskCheckForTimeOut>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d123      	bne.n	80081f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ae:	f000 fa5e 	bl	800866e <prvIsQueueEmpty>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d017      	beq.n	80081e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	3324      	adds	r3, #36	; 0x24
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	4611      	mov	r1, r2
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 ff1b 	bl	8008ffc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081c8:	f000 f9ff 	bl	80085ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081cc:	f000 fd50 	bl	8008c70 <xTaskResumeAll>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d189      	bne.n	80080ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80081d6:	4b10      	ldr	r3, [pc, #64]	; (8008218 <xQueueReceive+0x1bc>)
 80081d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	e780      	b.n	80080ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ea:	f000 f9ee 	bl	80085ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081ee:	f000 fd3f 	bl	8008c70 <xTaskResumeAll>
 80081f2:	e77a      	b.n	80080ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081f6:	f000 f9e8 	bl	80085ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081fa:	f000 fd39 	bl	8008c70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008200:	f000 fa35 	bl	800866e <prvIsQueueEmpty>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	f43f af6f 	beq.w	80080ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800820c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800820e:	4618      	mov	r0, r3
 8008210:	3730      	adds	r7, #48	; 0x30
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	e000ed04 	.word	0xe000ed04

0800821c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08e      	sub	sp, #56	; 0x38
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008226:	2300      	movs	r3, #0
 8008228:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800822e:	2300      	movs	r3, #0
 8008230:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10a      	bne.n	800824e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	623b      	str	r3, [r7, #32]
}
 800824a:	bf00      	nop
 800824c:	e7fe      	b.n	800824c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800824e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00a      	beq.n	800826c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	61fb      	str	r3, [r7, #28]
}
 8008268:	bf00      	nop
 800826a:	e7fe      	b.n	800826a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800826c:	f001 f8d4 	bl	8009418 <xTaskGetSchedulerState>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d102      	bne.n	800827c <xQueueSemaphoreTake+0x60>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <xQueueSemaphoreTake+0x64>
 800827c:	2301      	movs	r3, #1
 800827e:	e000      	b.n	8008282 <xQueueSemaphoreTake+0x66>
 8008280:	2300      	movs	r3, #0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10a      	bne.n	800829c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	61bb      	str	r3, [r7, #24]
}
 8008298:	bf00      	nop
 800829a:	e7fe      	b.n	800829a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800829c:	f001 ff12 	bl	800a0c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80082a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d024      	beq.n	80082f6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80082ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ae:	1e5a      	subs	r2, r3, #1
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d104      	bne.n	80082c6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80082bc:	f001 fa22 	bl	8009704 <pvTaskIncrementMutexHeldCount>
 80082c0:	4602      	mov	r2, r0
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00f      	beq.n	80082ee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	3310      	adds	r3, #16
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fee2 	bl	800909c <xTaskRemoveFromEventList>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d007      	beq.n	80082ee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082de:	4b54      	ldr	r3, [pc, #336]	; (8008430 <xQueueSemaphoreTake+0x214>)
 80082e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082ee:	f001 ff19 	bl	800a124 <vPortExitCritical>
				return pdPASS;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e097      	b.n	8008426 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d111      	bne.n	8008320 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80082fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00a      	beq.n	8008318 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	617b      	str	r3, [r7, #20]
}
 8008314:	bf00      	nop
 8008316:	e7fe      	b.n	8008316 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008318:	f001 ff04 	bl	800a124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800831c:	2300      	movs	r3, #0
 800831e:	e082      	b.n	8008426 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008322:	2b00      	cmp	r3, #0
 8008324:	d106      	bne.n	8008334 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008326:	f107 030c 	add.w	r3, r7, #12
 800832a:	4618      	mov	r0, r3
 800832c:	f000 ff1a 	bl	8009164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008330:	2301      	movs	r3, #1
 8008332:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008334:	f001 fef6 	bl	800a124 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008338:	f000 fc8c 	bl	8008c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800833c:	f001 fec2 	bl	800a0c4 <vPortEnterCritical>
 8008340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008346:	b25b      	sxtb	r3, r3
 8008348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834c:	d103      	bne.n	8008356 <xQueueSemaphoreTake+0x13a>
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800835c:	b25b      	sxtb	r3, r3
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008362:	d103      	bne.n	800836c <xQueueSemaphoreTake+0x150>
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800836c:	f001 feda 	bl	800a124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008370:	463a      	mov	r2, r7
 8008372:	f107 030c 	add.w	r3, r7, #12
 8008376:	4611      	mov	r1, r2
 8008378:	4618      	mov	r0, r3
 800837a:	f000 ff09 	bl	8009190 <xTaskCheckForTimeOut>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d132      	bne.n	80083ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008386:	f000 f972 	bl	800866e <prvIsQueueEmpty>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d026      	beq.n	80083de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d109      	bne.n	80083ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008398:	f001 fe94 	bl	800a0c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 f857 	bl	8009454 <xTaskPriorityInherit>
 80083a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80083a8:	f001 febc 	bl	800a124 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ae:	3324      	adds	r3, #36	; 0x24
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	4611      	mov	r1, r2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 fe21 	bl	8008ffc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083bc:	f000 f905 	bl	80085ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083c0:	f000 fc56 	bl	8008c70 <xTaskResumeAll>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f47f af68 	bne.w	800829c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80083cc:	4b18      	ldr	r3, [pc, #96]	; (8008430 <xQueueSemaphoreTake+0x214>)
 80083ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	e75e      	b.n	800829c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80083de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083e0:	f000 f8f3 	bl	80085ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083e4:	f000 fc44 	bl	8008c70 <xTaskResumeAll>
 80083e8:	e758      	b.n	800829c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80083ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083ec:	f000 f8ed 	bl	80085ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083f0:	f000 fc3e 	bl	8008c70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083f6:	f000 f93a 	bl	800866e <prvIsQueueEmpty>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f43f af4d 	beq.w	800829c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00d      	beq.n	8008424 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008408:	f001 fe5c 	bl	800a0c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800840c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800840e:	f000 f834 	bl	800847a <prvGetDisinheritPriorityAfterTimeout>
 8008412:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800841a:	4618      	mov	r0, r3
 800841c:	f001 f8f0 	bl	8009600 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008420:	f001 fe80 	bl	800a124 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008426:	4618      	mov	r0, r3
 8008428:	3738      	adds	r7, #56	; 0x38
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	e000ed04 	.word	0xe000ed04

08008434 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10a      	bne.n	800845c <vQueueDelete+0x28>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	60bb      	str	r3, [r7, #8]
}
 8008458:	bf00      	nop
 800845a:	e7fe      	b.n	800845a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 f95f 	bl	8008720 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008468:	2b00      	cmp	r3, #0
 800846a:	d102      	bne.n	8008472 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f002 f817 	bl	800a4a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008472:	bf00      	nop
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800847a:	b480      	push	{r7}
 800847c:	b085      	sub	sp, #20
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	2b00      	cmp	r3, #0
 8008488:	d006      	beq.n	8008498 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	e001      	b.n	800849c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008498:	2300      	movs	r3, #0
 800849a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800849c:	68fb      	ldr	r3, [r7, #12]
	}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b086      	sub	sp, #24
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084b6:	2300      	movs	r3, #0
 80084b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10d      	bne.n	80084e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d14d      	bne.n	800856c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f001 f825 	bl	8009524 <xTaskPriorityDisinherit>
 80084da:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	609a      	str	r2, [r3, #8]
 80084e2:	e043      	b.n	800856c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d119      	bne.n	800851e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6858      	ldr	r0, [r3, #4]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f2:	461a      	mov	r2, r3
 80084f4:	68b9      	ldr	r1, [r7, #8]
 80084f6:	f002 f915 	bl	800a724 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008502:	441a      	add	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	429a      	cmp	r2, r3
 8008512:	d32b      	bcc.n	800856c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	605a      	str	r2, [r3, #4]
 800851c:	e026      	b.n	800856c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	68d8      	ldr	r0, [r3, #12]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	461a      	mov	r2, r3
 8008528:	68b9      	ldr	r1, [r7, #8]
 800852a:	f002 f8fb 	bl	800a724 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	68da      	ldr	r2, [r3, #12]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	425b      	negs	r3, r3
 8008538:	441a      	add	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	68da      	ldr	r2, [r3, #12]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	429a      	cmp	r2, r3
 8008548:	d207      	bcs.n	800855a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	689a      	ldr	r2, [r3, #8]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008552:	425b      	negs	r3, r3
 8008554:	441a      	add	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b02      	cmp	r3, #2
 800855e:	d105      	bne.n	800856c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d002      	beq.n	800856c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	3b01      	subs	r3, #1
 800856a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008574:	697b      	ldr	r3, [r7, #20]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3718      	adds	r7, #24
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858c:	2b00      	cmp	r3, #0
 800858e:	d018      	beq.n	80085c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008598:	441a      	add	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d303      	bcc.n	80085b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68d9      	ldr	r1, [r3, #12]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ba:	461a      	mov	r2, r3
 80085bc:	6838      	ldr	r0, [r7, #0]
 80085be:	f002 f8b1 	bl	800a724 <memcpy>
	}
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b084      	sub	sp, #16
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085d2:	f001 fd77 	bl	800a0c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085de:	e011      	b.n	8008604 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d012      	beq.n	800860e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	3324      	adds	r3, #36	; 0x24
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 fd55 	bl	800909c <xTaskRemoveFromEventList>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085f8:	f000 fe2c 	bl	8009254 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	3b01      	subs	r3, #1
 8008600:	b2db      	uxtb	r3, r3
 8008602:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008608:	2b00      	cmp	r3, #0
 800860a:	dce9      	bgt.n	80085e0 <prvUnlockQueue+0x16>
 800860c:	e000      	b.n	8008610 <prvUnlockQueue+0x46>
					break;
 800860e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	22ff      	movs	r2, #255	; 0xff
 8008614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008618:	f001 fd84 	bl	800a124 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800861c:	f001 fd52 	bl	800a0c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008626:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008628:	e011      	b.n	800864e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d012      	beq.n	8008658 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	3310      	adds	r3, #16
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fd30 	bl	800909c <xTaskRemoveFromEventList>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008642:	f000 fe07 	bl	8009254 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008646:	7bbb      	ldrb	r3, [r7, #14]
 8008648:	3b01      	subs	r3, #1
 800864a:	b2db      	uxtb	r3, r3
 800864c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800864e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008652:	2b00      	cmp	r3, #0
 8008654:	dce9      	bgt.n	800862a <prvUnlockQueue+0x60>
 8008656:	e000      	b.n	800865a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008658:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	22ff      	movs	r2, #255	; 0xff
 800865e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008662:	f001 fd5f 	bl	800a124 <vPortExitCritical>
}
 8008666:	bf00      	nop
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008676:	f001 fd25 	bl	800a0c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867e:	2b00      	cmp	r3, #0
 8008680:	d102      	bne.n	8008688 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008682:	2301      	movs	r3, #1
 8008684:	60fb      	str	r3, [r7, #12]
 8008686:	e001      	b.n	800868c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008688:	2300      	movs	r3, #0
 800868a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800868c:	f001 fd4a 	bl	800a124 <vPortExitCritical>

	return xReturn;
 8008690:	68fb      	ldr	r3, [r7, #12]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b084      	sub	sp, #16
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086a2:	f001 fd0f 	bl	800a0c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d102      	bne.n	80086b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086b2:	2301      	movs	r3, #1
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	e001      	b.n	80086bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086b8:	2300      	movs	r3, #0
 80086ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086bc:	f001 fd32 	bl	800a124 <vPortExitCritical>

	return xReturn;
 80086c0:	68fb      	ldr	r3, [r7, #12]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	e014      	b.n	8008706 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086dc:	4a0f      	ldr	r2, [pc, #60]	; (800871c <vQueueAddToRegistry+0x50>)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10b      	bne.n	8008700 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086e8:	490c      	ldr	r1, [pc, #48]	; (800871c <vQueueAddToRegistry+0x50>)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086f2:	4a0a      	ldr	r2, [pc, #40]	; (800871c <vQueueAddToRegistry+0x50>)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	4413      	add	r3, r2
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80086fe:	e006      	b.n	800870e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3301      	adds	r3, #1
 8008704:	60fb      	str	r3, [r7, #12]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b07      	cmp	r3, #7
 800870a:	d9e7      	bls.n	80086dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800870c:	bf00      	nop
 800870e:	bf00      	nop
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	200009b8 	.word	0x200009b8

08008720 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008728:	2300      	movs	r3, #0
 800872a:	60fb      	str	r3, [r7, #12]
 800872c:	e016      	b.n	800875c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800872e:	4a10      	ldr	r2, [pc, #64]	; (8008770 <vQueueUnregisterQueue+0x50>)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	00db      	lsls	r3, r3, #3
 8008734:	4413      	add	r3, r2
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	429a      	cmp	r2, r3
 800873c:	d10b      	bne.n	8008756 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800873e:	4a0c      	ldr	r2, [pc, #48]	; (8008770 <vQueueUnregisterQueue+0x50>)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2100      	movs	r1, #0
 8008744:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008748:	4a09      	ldr	r2, [pc, #36]	; (8008770 <vQueueUnregisterQueue+0x50>)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	00db      	lsls	r3, r3, #3
 800874e:	4413      	add	r3, r2
 8008750:	2200      	movs	r2, #0
 8008752:	605a      	str	r2, [r3, #4]
				break;
 8008754:	e006      	b.n	8008764 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3301      	adds	r3, #1
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b07      	cmp	r3, #7
 8008760:	d9e5      	bls.n	800872e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008762:	bf00      	nop
 8008764:	bf00      	nop
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	200009b8 	.word	0x200009b8

08008774 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008784:	f001 fc9e 	bl	800a0c4 <vPortEnterCritical>
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800878e:	b25b      	sxtb	r3, r3
 8008790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008794:	d103      	bne.n	800879e <vQueueWaitForMessageRestricted+0x2a>
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087a4:	b25b      	sxtb	r3, r3
 80087a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087aa:	d103      	bne.n	80087b4 <vQueueWaitForMessageRestricted+0x40>
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087b4:	f001 fcb6 	bl	800a124 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d106      	bne.n	80087ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	3324      	adds	r3, #36	; 0x24
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	68b9      	ldr	r1, [r7, #8]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 fc3b 	bl	8009044 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80087ce:	6978      	ldr	r0, [r7, #20]
 80087d0:	f7ff fefb 	bl	80085ca <prvUnlockQueue>
	}
 80087d4:	bf00      	nop
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b08e      	sub	sp, #56	; 0x38
 80087e0:	af04      	add	r7, sp, #16
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10a      	bne.n	8008806 <xTaskCreateStatic+0x2a>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	623b      	str	r3, [r7, #32]
}
 8008802:	bf00      	nop
 8008804:	e7fe      	b.n	8008804 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10a      	bne.n	8008822 <xTaskCreateStatic+0x46>
	__asm volatile
 800880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	61fb      	str	r3, [r7, #28]
}
 800881e:	bf00      	nop
 8008820:	e7fe      	b.n	8008820 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008822:	235c      	movs	r3, #92	; 0x5c
 8008824:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	2b5c      	cmp	r3, #92	; 0x5c
 800882a:	d00a      	beq.n	8008842 <xTaskCreateStatic+0x66>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	61bb      	str	r3, [r7, #24]
}
 800883e:	bf00      	nop
 8008840:	e7fe      	b.n	8008840 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008842:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008846:	2b00      	cmp	r3, #0
 8008848:	d01e      	beq.n	8008888 <xTaskCreateStatic+0xac>
 800884a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884c:	2b00      	cmp	r3, #0
 800884e:	d01b      	beq.n	8008888 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008858:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	2202      	movs	r2, #2
 800885e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008862:	2300      	movs	r3, #0
 8008864:	9303      	str	r3, [sp, #12]
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	9302      	str	r3, [sp, #8]
 800886a:	f107 0314 	add.w	r3, r7, #20
 800886e:	9301      	str	r3, [sp, #4]
 8008870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	68b9      	ldr	r1, [r7, #8]
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f000 f850 	bl	8008920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008882:	f000 f8dd 	bl	8008a40 <prvAddNewTaskToReadyList>
 8008886:	e001      	b.n	800888c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008888:	2300      	movs	r3, #0
 800888a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800888c:	697b      	ldr	r3, [r7, #20]
	}
 800888e:	4618      	mov	r0, r3
 8008890:	3728      	adds	r7, #40	; 0x28
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008896:	b580      	push	{r7, lr}
 8008898:	b08c      	sub	sp, #48	; 0x30
 800889a:	af04      	add	r7, sp, #16
 800889c:	60f8      	str	r0, [r7, #12]
 800889e:	60b9      	str	r1, [r7, #8]
 80088a0:	603b      	str	r3, [r7, #0]
 80088a2:	4613      	mov	r3, r2
 80088a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088a6:	88fb      	ldrh	r3, [r7, #6]
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4618      	mov	r0, r3
 80088ac:	f001 fd2c 	bl	800a308 <pvPortMalloc>
 80088b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00e      	beq.n	80088d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088b8:	205c      	movs	r0, #92	; 0x5c
 80088ba:	f001 fd25 	bl	800a308 <pvPortMalloc>
 80088be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	631a      	str	r2, [r3, #48]	; 0x30
 80088cc:	e005      	b.n	80088da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088ce:	6978      	ldr	r0, [r7, #20]
 80088d0:	f001 fde6 	bl	800a4a0 <vPortFree>
 80088d4:	e001      	b.n	80088da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088d6:	2300      	movs	r3, #0
 80088d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d017      	beq.n	8008910 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088e8:	88fa      	ldrh	r2, [r7, #6]
 80088ea:	2300      	movs	r3, #0
 80088ec:	9303      	str	r3, [sp, #12]
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	9302      	str	r3, [sp, #8]
 80088f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	68b9      	ldr	r1, [r7, #8]
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 f80e 	bl	8008920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008904:	69f8      	ldr	r0, [r7, #28]
 8008906:	f000 f89b 	bl	8008a40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800890a:	2301      	movs	r3, #1
 800890c:	61bb      	str	r3, [r7, #24]
 800890e:	e002      	b.n	8008916 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008910:	f04f 33ff 	mov.w	r3, #4294967295
 8008914:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008916:	69bb      	ldr	r3, [r7, #24]
	}
 8008918:	4618      	mov	r0, r3
 800891a:	3720      	adds	r7, #32
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	461a      	mov	r2, r3
 8008938:	21a5      	movs	r1, #165	; 0xa5
 800893a:	f001 ff01 	bl	800a740 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008948:	3b01      	subs	r3, #1
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	f023 0307 	bic.w	r3, r3, #7
 8008956:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	f003 0307 	and.w	r3, r3, #7
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00a      	beq.n	8008978 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	617b      	str	r3, [r7, #20]
}
 8008974:	bf00      	nop
 8008976:	e7fe      	b.n	8008976 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d01f      	beq.n	80089be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800897e:	2300      	movs	r3, #0
 8008980:	61fb      	str	r3, [r7, #28]
 8008982:	e012      	b.n	80089aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	4413      	add	r3, r2
 800898a:	7819      	ldrb	r1, [r3, #0]
 800898c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	4413      	add	r3, r2
 8008992:	3334      	adds	r3, #52	; 0x34
 8008994:	460a      	mov	r2, r1
 8008996:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	4413      	add	r3, r2
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d006      	beq.n	80089b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	3301      	adds	r3, #1
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	2b0f      	cmp	r3, #15
 80089ae:	d9e9      	bls.n	8008984 <prvInitialiseNewTask+0x64>
 80089b0:	e000      	b.n	80089b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80089b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089bc:	e003      	b.n	80089c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c8:	2b37      	cmp	r3, #55	; 0x37
 80089ca:	d901      	bls.n	80089d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089cc:	2337      	movs	r3, #55	; 0x37
 80089ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80089dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089de:	2200      	movs	r2, #0
 80089e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e4:	3304      	adds	r3, #4
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe fed6 	bl	8007798 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ee:	3318      	adds	r3, #24
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe fed1 	bl	8007798 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80089f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0e:	2200      	movs	r2, #0
 8008a10:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	68f9      	ldr	r1, [r7, #12]
 8008a1e:	69b8      	ldr	r0, [r7, #24]
 8008a20:	f001 fa26 	bl	8009e70 <pxPortInitialiseStack>
 8008a24:	4602      	mov	r2, r0
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a36:	bf00      	nop
 8008a38:	3720      	adds	r7, #32
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
	...

08008a40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a48:	f001 fb3c 	bl	800a0c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a4c:	4b2d      	ldr	r3, [pc, #180]	; (8008b04 <prvAddNewTaskToReadyList+0xc4>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3301      	adds	r3, #1
 8008a52:	4a2c      	ldr	r2, [pc, #176]	; (8008b04 <prvAddNewTaskToReadyList+0xc4>)
 8008a54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a56:	4b2c      	ldr	r3, [pc, #176]	; (8008b08 <prvAddNewTaskToReadyList+0xc8>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d109      	bne.n	8008a72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a5e:	4a2a      	ldr	r2, [pc, #168]	; (8008b08 <prvAddNewTaskToReadyList+0xc8>)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a64:	4b27      	ldr	r3, [pc, #156]	; (8008b04 <prvAddNewTaskToReadyList+0xc4>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d110      	bne.n	8008a8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a6c:	f000 fc16 	bl	800929c <prvInitialiseTaskLists>
 8008a70:	e00d      	b.n	8008a8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a72:	4b26      	ldr	r3, [pc, #152]	; (8008b0c <prvAddNewTaskToReadyList+0xcc>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d109      	bne.n	8008a8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a7a:	4b23      	ldr	r3, [pc, #140]	; (8008b08 <prvAddNewTaskToReadyList+0xc8>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d802      	bhi.n	8008a8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a88:	4a1f      	ldr	r2, [pc, #124]	; (8008b08 <prvAddNewTaskToReadyList+0xc8>)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a8e:	4b20      	ldr	r3, [pc, #128]	; (8008b10 <prvAddNewTaskToReadyList+0xd0>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3301      	adds	r3, #1
 8008a94:	4a1e      	ldr	r2, [pc, #120]	; (8008b10 <prvAddNewTaskToReadyList+0xd0>)
 8008a96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a98:	4b1d      	ldr	r3, [pc, #116]	; (8008b10 <prvAddNewTaskToReadyList+0xd0>)
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa4:	4b1b      	ldr	r3, [pc, #108]	; (8008b14 <prvAddNewTaskToReadyList+0xd4>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d903      	bls.n	8008ab4 <prvAddNewTaskToReadyList+0x74>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab0:	4a18      	ldr	r2, [pc, #96]	; (8008b14 <prvAddNewTaskToReadyList+0xd4>)
 8008ab2:	6013      	str	r3, [r2, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab8:	4613      	mov	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4a15      	ldr	r2, [pc, #84]	; (8008b18 <prvAddNewTaskToReadyList+0xd8>)
 8008ac2:	441a      	add	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4610      	mov	r0, r2
 8008acc:	f7fe fe71 	bl	80077b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ad0:	f001 fb28 	bl	800a124 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ad4:	4b0d      	ldr	r3, [pc, #52]	; (8008b0c <prvAddNewTaskToReadyList+0xcc>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00e      	beq.n	8008afa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008adc:	4b0a      	ldr	r3, [pc, #40]	; (8008b08 <prvAddNewTaskToReadyList+0xc8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d207      	bcs.n	8008afa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008aea:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <prvAddNewTaskToReadyList+0xdc>)
 8008aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20000ecc 	.word	0x20000ecc
 8008b08:	200009f8 	.word	0x200009f8
 8008b0c:	20000ed8 	.word	0x20000ed8
 8008b10:	20000ee8 	.word	0x20000ee8
 8008b14:	20000ed4 	.word	0x20000ed4
 8008b18:	200009fc 	.word	0x200009fc
 8008b1c:	e000ed04 	.word	0xe000ed04

08008b20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d017      	beq.n	8008b62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b32:	4b13      	ldr	r3, [pc, #76]	; (8008b80 <vTaskDelay+0x60>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00a      	beq.n	8008b50 <vTaskDelay+0x30>
	__asm volatile
 8008b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	60bb      	str	r3, [r7, #8]
}
 8008b4c:	bf00      	nop
 8008b4e:	e7fe      	b.n	8008b4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b50:	f000 f880 	bl	8008c54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b54:	2100      	movs	r1, #0
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fde8 	bl	800972c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b5c:	f000 f888 	bl	8008c70 <xTaskResumeAll>
 8008b60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d107      	bne.n	8008b78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b68:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <vTaskDelay+0x64>)
 8008b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b6e:	601a      	str	r2, [r3, #0]
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b78:	bf00      	nop
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	20000ef4 	.word	0x20000ef4
 8008b84:	e000ed04 	.word	0xe000ed04

08008b88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08a      	sub	sp, #40	; 0x28
 8008b8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b96:	463a      	mov	r2, r7
 8008b98:	1d39      	adds	r1, r7, #4
 8008b9a:	f107 0308 	add.w	r3, r7, #8
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe fda6 	bl	80076f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	9202      	str	r2, [sp, #8]
 8008bac:	9301      	str	r3, [sp, #4]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	460a      	mov	r2, r1
 8008bb6:	4921      	ldr	r1, [pc, #132]	; (8008c3c <vTaskStartScheduler+0xb4>)
 8008bb8:	4821      	ldr	r0, [pc, #132]	; (8008c40 <vTaskStartScheduler+0xb8>)
 8008bba:	f7ff fe0f 	bl	80087dc <xTaskCreateStatic>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	4a20      	ldr	r2, [pc, #128]	; (8008c44 <vTaskStartScheduler+0xbc>)
 8008bc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008bc4:	4b1f      	ldr	r3, [pc, #124]	; (8008c44 <vTaskStartScheduler+0xbc>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	617b      	str	r3, [r7, #20]
 8008bd0:	e001      	b.n	8008bd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d102      	bne.n	8008be2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008bdc:	f000 fdfa 	bl	80097d4 <xTimerCreateTimerTask>
 8008be0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d116      	bne.n	8008c16 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	613b      	str	r3, [r7, #16]
}
 8008bfa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bfc:	4b12      	ldr	r3, [pc, #72]	; (8008c48 <vTaskStartScheduler+0xc0>)
 8008bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008c02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c04:	4b11      	ldr	r3, [pc, #68]	; (8008c4c <vTaskStartScheduler+0xc4>)
 8008c06:	2201      	movs	r2, #1
 8008c08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c0a:	4b11      	ldr	r3, [pc, #68]	; (8008c50 <vTaskStartScheduler+0xc8>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c10:	f001 f9b6 	bl	8009f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c14:	e00e      	b.n	8008c34 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1c:	d10a      	bne.n	8008c34 <vTaskStartScheduler+0xac>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	60fb      	str	r3, [r7, #12]
}
 8008c30:	bf00      	nop
 8008c32:	e7fe      	b.n	8008c32 <vTaskStartScheduler+0xaa>
}
 8008c34:	bf00      	nop
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	0800a818 	.word	0x0800a818
 8008c40:	0800926d 	.word	0x0800926d
 8008c44:	20000ef0 	.word	0x20000ef0
 8008c48:	20000eec 	.word	0x20000eec
 8008c4c:	20000ed8 	.word	0x20000ed8
 8008c50:	20000ed0 	.word	0x20000ed0

08008c54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c54:	b480      	push	{r7}
 8008c56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c58:	4b04      	ldr	r3, [pc, #16]	; (8008c6c <vTaskSuspendAll+0x18>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	4a03      	ldr	r2, [pc, #12]	; (8008c6c <vTaskSuspendAll+0x18>)
 8008c60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c62:	bf00      	nop
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	20000ef4 	.word	0x20000ef4

08008c70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c7e:	4b42      	ldr	r3, [pc, #264]	; (8008d88 <xTaskResumeAll+0x118>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <xTaskResumeAll+0x2c>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	603b      	str	r3, [r7, #0]
}
 8008c98:	bf00      	nop
 8008c9a:	e7fe      	b.n	8008c9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c9c:	f001 fa12 	bl	800a0c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ca0:	4b39      	ldr	r3, [pc, #228]	; (8008d88 <xTaskResumeAll+0x118>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	4a38      	ldr	r2, [pc, #224]	; (8008d88 <xTaskResumeAll+0x118>)
 8008ca8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008caa:	4b37      	ldr	r3, [pc, #220]	; (8008d88 <xTaskResumeAll+0x118>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d162      	bne.n	8008d78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008cb2:	4b36      	ldr	r3, [pc, #216]	; (8008d8c <xTaskResumeAll+0x11c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d05e      	beq.n	8008d78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cba:	e02f      	b.n	8008d1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cbc:	4b34      	ldr	r3, [pc, #208]	; (8008d90 <xTaskResumeAll+0x120>)
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3318      	adds	r3, #24
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fe fdcf 	bl	800786c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fdca 	bl	800786c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cdc:	4b2d      	ldr	r3, [pc, #180]	; (8008d94 <xTaskResumeAll+0x124>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d903      	bls.n	8008cec <xTaskResumeAll+0x7c>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce8:	4a2a      	ldr	r2, [pc, #168]	; (8008d94 <xTaskResumeAll+0x124>)
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4a27      	ldr	r2, [pc, #156]	; (8008d98 <xTaskResumeAll+0x128>)
 8008cfa:	441a      	add	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7fe fd55 	bl	80077b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0c:	4b23      	ldr	r3, [pc, #140]	; (8008d9c <xTaskResumeAll+0x12c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d302      	bcc.n	8008d1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008d16:	4b22      	ldr	r3, [pc, #136]	; (8008da0 <xTaskResumeAll+0x130>)
 8008d18:	2201      	movs	r2, #1
 8008d1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d1c:	4b1c      	ldr	r3, [pc, #112]	; (8008d90 <xTaskResumeAll+0x120>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1cb      	bne.n	8008cbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d2a:	f000 fb55 	bl	80093d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d2e:	4b1d      	ldr	r3, [pc, #116]	; (8008da4 <xTaskResumeAll+0x134>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d010      	beq.n	8008d5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d3a:	f000 f847 	bl	8008dcc <xTaskIncrementTick>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d002      	beq.n	8008d4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008d44:	4b16      	ldr	r3, [pc, #88]	; (8008da0 <xTaskResumeAll+0x130>)
 8008d46:	2201      	movs	r2, #1
 8008d48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1f1      	bne.n	8008d3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008d56:	4b13      	ldr	r3, [pc, #76]	; (8008da4 <xTaskResumeAll+0x134>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d5c:	4b10      	ldr	r3, [pc, #64]	; (8008da0 <xTaskResumeAll+0x130>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d009      	beq.n	8008d78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d64:	2301      	movs	r3, #1
 8008d66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d68:	4b0f      	ldr	r3, [pc, #60]	; (8008da8 <xTaskResumeAll+0x138>)
 8008d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d78:	f001 f9d4 	bl	800a124 <vPortExitCritical>

	return xAlreadyYielded;
 8008d7c:	68bb      	ldr	r3, [r7, #8]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	20000ef4 	.word	0x20000ef4
 8008d8c:	20000ecc 	.word	0x20000ecc
 8008d90:	20000e8c 	.word	0x20000e8c
 8008d94:	20000ed4 	.word	0x20000ed4
 8008d98:	200009fc 	.word	0x200009fc
 8008d9c:	200009f8 	.word	0x200009f8
 8008da0:	20000ee0 	.word	0x20000ee0
 8008da4:	20000edc 	.word	0x20000edc
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008db2:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <xTaskGetTickCount+0x1c>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008db8:	687b      	ldr	r3, [r7, #4]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	20000ed0 	.word	0x20000ed0

08008dcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dd6:	4b4f      	ldr	r3, [pc, #316]	; (8008f14 <xTaskIncrementTick+0x148>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f040 808f 	bne.w	8008efe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008de0:	4b4d      	ldr	r3, [pc, #308]	; (8008f18 <xTaskIncrementTick+0x14c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3301      	adds	r3, #1
 8008de6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008de8:	4a4b      	ldr	r2, [pc, #300]	; (8008f18 <xTaskIncrementTick+0x14c>)
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d120      	bne.n	8008e36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008df4:	4b49      	ldr	r3, [pc, #292]	; (8008f1c <xTaskIncrementTick+0x150>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00a      	beq.n	8008e14 <xTaskIncrementTick+0x48>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	603b      	str	r3, [r7, #0]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <xTaskIncrementTick+0x46>
 8008e14:	4b41      	ldr	r3, [pc, #260]	; (8008f1c <xTaskIncrementTick+0x150>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	60fb      	str	r3, [r7, #12]
 8008e1a:	4b41      	ldr	r3, [pc, #260]	; (8008f20 <xTaskIncrementTick+0x154>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a3f      	ldr	r2, [pc, #252]	; (8008f1c <xTaskIncrementTick+0x150>)
 8008e20:	6013      	str	r3, [r2, #0]
 8008e22:	4a3f      	ldr	r2, [pc, #252]	; (8008f20 <xTaskIncrementTick+0x154>)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	4b3e      	ldr	r3, [pc, #248]	; (8008f24 <xTaskIncrementTick+0x158>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	4a3d      	ldr	r2, [pc, #244]	; (8008f24 <xTaskIncrementTick+0x158>)
 8008e30:	6013      	str	r3, [r2, #0]
 8008e32:	f000 fad1 	bl	80093d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e36:	4b3c      	ldr	r3, [pc, #240]	; (8008f28 <xTaskIncrementTick+0x15c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d349      	bcc.n	8008ed4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e40:	4b36      	ldr	r3, [pc, #216]	; (8008f1c <xTaskIncrementTick+0x150>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d104      	bne.n	8008e54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e4a:	4b37      	ldr	r3, [pc, #220]	; (8008f28 <xTaskIncrementTick+0x15c>)
 8008e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e50:	601a      	str	r2, [r3, #0]
					break;
 8008e52:	e03f      	b.n	8008ed4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e54:	4b31      	ldr	r3, [pc, #196]	; (8008f1c <xTaskIncrementTick+0x150>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d203      	bcs.n	8008e74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e6c:	4a2e      	ldr	r2, [pc, #184]	; (8008f28 <xTaskIncrementTick+0x15c>)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e72:	e02f      	b.n	8008ed4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fe fcf7 	bl	800786c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d004      	beq.n	8008e90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	3318      	adds	r3, #24
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe fcee 	bl	800786c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e94:	4b25      	ldr	r3, [pc, #148]	; (8008f2c <xTaskIncrementTick+0x160>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d903      	bls.n	8008ea4 <xTaskIncrementTick+0xd8>
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea0:	4a22      	ldr	r2, [pc, #136]	; (8008f2c <xTaskIncrementTick+0x160>)
 8008ea2:	6013      	str	r3, [r2, #0]
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4a1f      	ldr	r2, [pc, #124]	; (8008f30 <xTaskIncrementTick+0x164>)
 8008eb2:	441a      	add	r2, r3
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	4619      	mov	r1, r3
 8008eba:	4610      	mov	r0, r2
 8008ebc:	f7fe fc79 	bl	80077b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec4:	4b1b      	ldr	r3, [pc, #108]	; (8008f34 <xTaskIncrementTick+0x168>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d3b8      	bcc.n	8008e40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ed2:	e7b5      	b.n	8008e40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ed4:	4b17      	ldr	r3, [pc, #92]	; (8008f34 <xTaskIncrementTick+0x168>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eda:	4915      	ldr	r1, [pc, #84]	; (8008f30 <xTaskIncrementTick+0x164>)
 8008edc:	4613      	mov	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	440b      	add	r3, r1
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d901      	bls.n	8008ef0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008eec:	2301      	movs	r3, #1
 8008eee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ef0:	4b11      	ldr	r3, [pc, #68]	; (8008f38 <xTaskIncrementTick+0x16c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d007      	beq.n	8008f08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	617b      	str	r3, [r7, #20]
 8008efc:	e004      	b.n	8008f08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008efe:	4b0f      	ldr	r3, [pc, #60]	; (8008f3c <xTaskIncrementTick+0x170>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3301      	adds	r3, #1
 8008f04:	4a0d      	ldr	r2, [pc, #52]	; (8008f3c <xTaskIncrementTick+0x170>)
 8008f06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f08:	697b      	ldr	r3, [r7, #20]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20000ef4 	.word	0x20000ef4
 8008f18:	20000ed0 	.word	0x20000ed0
 8008f1c:	20000e84 	.word	0x20000e84
 8008f20:	20000e88 	.word	0x20000e88
 8008f24:	20000ee4 	.word	0x20000ee4
 8008f28:	20000eec 	.word	0x20000eec
 8008f2c:	20000ed4 	.word	0x20000ed4
 8008f30:	200009fc 	.word	0x200009fc
 8008f34:	200009f8 	.word	0x200009f8
 8008f38:	20000ee0 	.word	0x20000ee0
 8008f3c:	20000edc 	.word	0x20000edc

08008f40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f46:	4b28      	ldr	r3, [pc, #160]	; (8008fe8 <vTaskSwitchContext+0xa8>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f4e:	4b27      	ldr	r3, [pc, #156]	; (8008fec <vTaskSwitchContext+0xac>)
 8008f50:	2201      	movs	r2, #1
 8008f52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f54:	e041      	b.n	8008fda <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008f56:	4b25      	ldr	r3, [pc, #148]	; (8008fec <vTaskSwitchContext+0xac>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f5c:	4b24      	ldr	r3, [pc, #144]	; (8008ff0 <vTaskSwitchContext+0xb0>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	e010      	b.n	8008f86 <vTaskSwitchContext+0x46>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10a      	bne.n	8008f80 <vTaskSwitchContext+0x40>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	607b      	str	r3, [r7, #4]
}
 8008f7c:	bf00      	nop
 8008f7e:	e7fe      	b.n	8008f7e <vTaskSwitchContext+0x3e>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3b01      	subs	r3, #1
 8008f84:	60fb      	str	r3, [r7, #12]
 8008f86:	491b      	ldr	r1, [pc, #108]	; (8008ff4 <vTaskSwitchContext+0xb4>)
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	440b      	add	r3, r1
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d0e4      	beq.n	8008f64 <vTaskSwitchContext+0x24>
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4a13      	ldr	r2, [pc, #76]	; (8008ff4 <vTaskSwitchContext+0xb4>)
 8008fa6:	4413      	add	r3, r2
 8008fa8:	60bb      	str	r3, [r7, #8]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	605a      	str	r2, [r3, #4]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	3308      	adds	r3, #8
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d104      	bne.n	8008fca <vTaskSwitchContext+0x8a>
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	605a      	str	r2, [r3, #4]
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	4a09      	ldr	r2, [pc, #36]	; (8008ff8 <vTaskSwitchContext+0xb8>)
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	4a06      	ldr	r2, [pc, #24]	; (8008ff0 <vTaskSwitchContext+0xb0>)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6013      	str	r3, [r2, #0]
}
 8008fda:	bf00      	nop
 8008fdc:	3714      	adds	r7, #20
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	20000ef4 	.word	0x20000ef4
 8008fec:	20000ee0 	.word	0x20000ee0
 8008ff0:	20000ed4 	.word	0x20000ed4
 8008ff4:	200009fc 	.word	0x200009fc
 8008ff8:	200009f8 	.word	0x200009f8

08008ffc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10a      	bne.n	8009022 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	60fb      	str	r3, [r7, #12]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009022:	4b07      	ldr	r3, [pc, #28]	; (8009040 <vTaskPlaceOnEventList+0x44>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3318      	adds	r3, #24
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7fe fbe5 	bl	80077fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009030:	2101      	movs	r1, #1
 8009032:	6838      	ldr	r0, [r7, #0]
 8009034:	f000 fb7a 	bl	800972c <prvAddCurrentTaskToDelayedList>
}
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	200009f8 	.word	0x200009f8

08009044 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10a      	bne.n	800906c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	617b      	str	r3, [r7, #20]
}
 8009068:	bf00      	nop
 800906a:	e7fe      	b.n	800906a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800906c:	4b0a      	ldr	r3, [pc, #40]	; (8009098 <vTaskPlaceOnEventListRestricted+0x54>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3318      	adds	r3, #24
 8009072:	4619      	mov	r1, r3
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f7fe fb9c 	bl	80077b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d002      	beq.n	8009086 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009080:	f04f 33ff 	mov.w	r3, #4294967295
 8009084:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009086:	6879      	ldr	r1, [r7, #4]
 8009088:	68b8      	ldr	r0, [r7, #8]
 800908a:	f000 fb4f 	bl	800972c <prvAddCurrentTaskToDelayedList>
	}
 800908e:	bf00      	nop
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	200009f8 	.word	0x200009f8

0800909c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10a      	bne.n	80090c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	60fb      	str	r3, [r7, #12]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	3318      	adds	r3, #24
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fe fbcd 	bl	800786c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090d2:	4b1e      	ldr	r3, [pc, #120]	; (800914c <xTaskRemoveFromEventList+0xb0>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d11d      	bne.n	8009116 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	3304      	adds	r3, #4
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fe fbc4 	bl	800786c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e8:	4b19      	ldr	r3, [pc, #100]	; (8009150 <xTaskRemoveFromEventList+0xb4>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d903      	bls.n	80090f8 <xTaskRemoveFromEventList+0x5c>
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	4a16      	ldr	r2, [pc, #88]	; (8009150 <xTaskRemoveFromEventList+0xb4>)
 80090f6:	6013      	str	r3, [r2, #0]
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fc:	4613      	mov	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4a13      	ldr	r2, [pc, #76]	; (8009154 <xTaskRemoveFromEventList+0xb8>)
 8009106:	441a      	add	r2, r3
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	3304      	adds	r3, #4
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f7fe fb4f 	bl	80077b2 <vListInsertEnd>
 8009114:	e005      	b.n	8009122 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	3318      	adds	r3, #24
 800911a:	4619      	mov	r1, r3
 800911c:	480e      	ldr	r0, [pc, #56]	; (8009158 <xTaskRemoveFromEventList+0xbc>)
 800911e:	f7fe fb48 	bl	80077b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009126:	4b0d      	ldr	r3, [pc, #52]	; (800915c <xTaskRemoveFromEventList+0xc0>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912c:	429a      	cmp	r2, r3
 800912e:	d905      	bls.n	800913c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009130:	2301      	movs	r3, #1
 8009132:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009134:	4b0a      	ldr	r3, [pc, #40]	; (8009160 <xTaskRemoveFromEventList+0xc4>)
 8009136:	2201      	movs	r2, #1
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	e001      	b.n	8009140 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800913c:	2300      	movs	r3, #0
 800913e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009140:	697b      	ldr	r3, [r7, #20]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20000ef4 	.word	0x20000ef4
 8009150:	20000ed4 	.word	0x20000ed4
 8009154:	200009fc 	.word	0x200009fc
 8009158:	20000e8c 	.word	0x20000e8c
 800915c:	200009f8 	.word	0x200009f8
 8009160:	20000ee0 	.word	0x20000ee0

08009164 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800916c:	4b06      	ldr	r3, [pc, #24]	; (8009188 <vTaskInternalSetTimeOutState+0x24>)
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <vTaskInternalSetTimeOutState+0x28>)
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	605a      	str	r2, [r3, #4]
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	20000ee4 	.word	0x20000ee4
 800918c:	20000ed0 	.word	0x20000ed0

08009190 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b088      	sub	sp, #32
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10a      	bne.n	80091b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	613b      	str	r3, [r7, #16]
}
 80091b2:	bf00      	nop
 80091b4:	e7fe      	b.n	80091b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10a      	bne.n	80091d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	60fb      	str	r3, [r7, #12]
}
 80091ce:	bf00      	nop
 80091d0:	e7fe      	b.n	80091d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80091d2:	f000 ff77 	bl	800a0c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091d6:	4b1d      	ldr	r3, [pc, #116]	; (800924c <xTaskCheckForTimeOut+0xbc>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ee:	d102      	bne.n	80091f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091f0:	2300      	movs	r3, #0
 80091f2:	61fb      	str	r3, [r7, #28]
 80091f4:	e023      	b.n	800923e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	4b15      	ldr	r3, [pc, #84]	; (8009250 <xTaskCheckForTimeOut+0xc0>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d007      	beq.n	8009212 <xTaskCheckForTimeOut+0x82>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	69ba      	ldr	r2, [r7, #24]
 8009208:	429a      	cmp	r2, r3
 800920a:	d302      	bcc.n	8009212 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800920c:	2301      	movs	r3, #1
 800920e:	61fb      	str	r3, [r7, #28]
 8009210:	e015      	b.n	800923e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	429a      	cmp	r2, r3
 800921a:	d20b      	bcs.n	8009234 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	1ad2      	subs	r2, r2, r3
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7ff ff9b 	bl	8009164 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800922e:	2300      	movs	r3, #0
 8009230:	61fb      	str	r3, [r7, #28]
 8009232:	e004      	b.n	800923e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2200      	movs	r2, #0
 8009238:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800923a:	2301      	movs	r3, #1
 800923c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800923e:	f000 ff71 	bl	800a124 <vPortExitCritical>

	return xReturn;
 8009242:	69fb      	ldr	r3, [r7, #28]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3720      	adds	r7, #32
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20000ed0 	.word	0x20000ed0
 8009250:	20000ee4 	.word	0x20000ee4

08009254 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009254:	b480      	push	{r7}
 8009256:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009258:	4b03      	ldr	r3, [pc, #12]	; (8009268 <vTaskMissedYield+0x14>)
 800925a:	2201      	movs	r2, #1
 800925c:	601a      	str	r2, [r3, #0]
}
 800925e:	bf00      	nop
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	20000ee0 	.word	0x20000ee0

0800926c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009274:	f000 f852 	bl	800931c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009278:	4b06      	ldr	r3, [pc, #24]	; (8009294 <prvIdleTask+0x28>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d9f9      	bls.n	8009274 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009280:	4b05      	ldr	r3, [pc, #20]	; (8009298 <prvIdleTask+0x2c>)
 8009282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009290:	e7f0      	b.n	8009274 <prvIdleTask+0x8>
 8009292:	bf00      	nop
 8009294:	200009fc 	.word	0x200009fc
 8009298:	e000ed04 	.word	0xe000ed04

0800929c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092a2:	2300      	movs	r3, #0
 80092a4:	607b      	str	r3, [r7, #4]
 80092a6:	e00c      	b.n	80092c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4a12      	ldr	r2, [pc, #72]	; (80092fc <prvInitialiseTaskLists+0x60>)
 80092b4:	4413      	add	r3, r2
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fe fa4e 	bl	8007758 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	3301      	adds	r3, #1
 80092c0:	607b      	str	r3, [r7, #4]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2b37      	cmp	r3, #55	; 0x37
 80092c6:	d9ef      	bls.n	80092a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092c8:	480d      	ldr	r0, [pc, #52]	; (8009300 <prvInitialiseTaskLists+0x64>)
 80092ca:	f7fe fa45 	bl	8007758 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092ce:	480d      	ldr	r0, [pc, #52]	; (8009304 <prvInitialiseTaskLists+0x68>)
 80092d0:	f7fe fa42 	bl	8007758 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092d4:	480c      	ldr	r0, [pc, #48]	; (8009308 <prvInitialiseTaskLists+0x6c>)
 80092d6:	f7fe fa3f 	bl	8007758 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092da:	480c      	ldr	r0, [pc, #48]	; (800930c <prvInitialiseTaskLists+0x70>)
 80092dc:	f7fe fa3c 	bl	8007758 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092e0:	480b      	ldr	r0, [pc, #44]	; (8009310 <prvInitialiseTaskLists+0x74>)
 80092e2:	f7fe fa39 	bl	8007758 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092e6:	4b0b      	ldr	r3, [pc, #44]	; (8009314 <prvInitialiseTaskLists+0x78>)
 80092e8:	4a05      	ldr	r2, [pc, #20]	; (8009300 <prvInitialiseTaskLists+0x64>)
 80092ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092ec:	4b0a      	ldr	r3, [pc, #40]	; (8009318 <prvInitialiseTaskLists+0x7c>)
 80092ee:	4a05      	ldr	r2, [pc, #20]	; (8009304 <prvInitialiseTaskLists+0x68>)
 80092f0:	601a      	str	r2, [r3, #0]
}
 80092f2:	bf00      	nop
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	200009fc 	.word	0x200009fc
 8009300:	20000e5c 	.word	0x20000e5c
 8009304:	20000e70 	.word	0x20000e70
 8009308:	20000e8c 	.word	0x20000e8c
 800930c:	20000ea0 	.word	0x20000ea0
 8009310:	20000eb8 	.word	0x20000eb8
 8009314:	20000e84 	.word	0x20000e84
 8009318:	20000e88 	.word	0x20000e88

0800931c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009322:	e019      	b.n	8009358 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009324:	f000 fece 	bl	800a0c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009328:	4b10      	ldr	r3, [pc, #64]	; (800936c <prvCheckTasksWaitingTermination+0x50>)
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	3304      	adds	r3, #4
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe fa99 	bl	800786c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800933a:	4b0d      	ldr	r3, [pc, #52]	; (8009370 <prvCheckTasksWaitingTermination+0x54>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3b01      	subs	r3, #1
 8009340:	4a0b      	ldr	r2, [pc, #44]	; (8009370 <prvCheckTasksWaitingTermination+0x54>)
 8009342:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009344:	4b0b      	ldr	r3, [pc, #44]	; (8009374 <prvCheckTasksWaitingTermination+0x58>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3b01      	subs	r3, #1
 800934a:	4a0a      	ldr	r2, [pc, #40]	; (8009374 <prvCheckTasksWaitingTermination+0x58>)
 800934c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800934e:	f000 fee9 	bl	800a124 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f810 	bl	8009378 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009358:	4b06      	ldr	r3, [pc, #24]	; (8009374 <prvCheckTasksWaitingTermination+0x58>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e1      	bne.n	8009324 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009360:	bf00      	nop
 8009362:	bf00      	nop
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20000ea0 	.word	0x20000ea0
 8009370:	20000ecc 	.word	0x20000ecc
 8009374:	20000eb4 	.word	0x20000eb4

08009378 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009386:	2b00      	cmp	r3, #0
 8009388:	d108      	bne.n	800939c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938e:	4618      	mov	r0, r3
 8009390:	f001 f886 	bl	800a4a0 <vPortFree>
				vPortFree( pxTCB );
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f001 f883 	bl	800a4a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800939a:	e018      	b.n	80093ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d103      	bne.n	80093ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f001 f87a 	bl	800a4a0 <vPortFree>
	}
 80093ac:	e00f      	b.n	80093ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d00a      	beq.n	80093ce <prvDeleteTCB+0x56>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	60fb      	str	r3, [r7, #12]
}
 80093ca:	bf00      	nop
 80093cc:	e7fe      	b.n	80093cc <prvDeleteTCB+0x54>
	}
 80093ce:	bf00      	nop
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
	...

080093d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093de:	4b0c      	ldr	r3, [pc, #48]	; (8009410 <prvResetNextTaskUnblockTime+0x38>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d104      	bne.n	80093f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093e8:	4b0a      	ldr	r3, [pc, #40]	; (8009414 <prvResetNextTaskUnblockTime+0x3c>)
 80093ea:	f04f 32ff 	mov.w	r2, #4294967295
 80093ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093f0:	e008      	b.n	8009404 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093f2:	4b07      	ldr	r3, [pc, #28]	; (8009410 <prvResetNextTaskUnblockTime+0x38>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	4a04      	ldr	r2, [pc, #16]	; (8009414 <prvResetNextTaskUnblockTime+0x3c>)
 8009402:	6013      	str	r3, [r2, #0]
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr
 8009410:	20000e84 	.word	0x20000e84
 8009414:	20000eec 	.word	0x20000eec

08009418 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800941e:	4b0b      	ldr	r3, [pc, #44]	; (800944c <xTaskGetSchedulerState+0x34>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d102      	bne.n	800942c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009426:	2301      	movs	r3, #1
 8009428:	607b      	str	r3, [r7, #4]
 800942a:	e008      	b.n	800943e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800942c:	4b08      	ldr	r3, [pc, #32]	; (8009450 <xTaskGetSchedulerState+0x38>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d102      	bne.n	800943a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009434:	2302      	movs	r3, #2
 8009436:	607b      	str	r3, [r7, #4]
 8009438:	e001      	b.n	800943e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800943a:	2300      	movs	r3, #0
 800943c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800943e:	687b      	ldr	r3, [r7, #4]
	}
 8009440:	4618      	mov	r0, r3
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	20000ed8 	.word	0x20000ed8
 8009450:	20000ef4 	.word	0x20000ef4

08009454 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009460:	2300      	movs	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d051      	beq.n	800950e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946e:	4b2a      	ldr	r3, [pc, #168]	; (8009518 <xTaskPriorityInherit+0xc4>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009474:	429a      	cmp	r2, r3
 8009476:	d241      	bcs.n	80094fc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	2b00      	cmp	r3, #0
 800947e:	db06      	blt.n	800948e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009480:	4b25      	ldr	r3, [pc, #148]	; (8009518 <xTaskPriorityInherit+0xc4>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009486:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	6959      	ldr	r1, [r3, #20]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4a1f      	ldr	r2, [pc, #124]	; (800951c <xTaskPriorityInherit+0xc8>)
 80094a0:	4413      	add	r3, r2
 80094a2:	4299      	cmp	r1, r3
 80094a4:	d122      	bne.n	80094ec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	3304      	adds	r3, #4
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe f9de 	bl	800786c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094b0:	4b19      	ldr	r3, [pc, #100]	; (8009518 <xTaskPriorityInherit+0xc4>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094be:	4b18      	ldr	r3, [pc, #96]	; (8009520 <xTaskPriorityInherit+0xcc>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d903      	bls.n	80094ce <xTaskPriorityInherit+0x7a>
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ca:	4a15      	ldr	r2, [pc, #84]	; (8009520 <xTaskPriorityInherit+0xcc>)
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4a10      	ldr	r2, [pc, #64]	; (800951c <xTaskPriorityInherit+0xc8>)
 80094dc:	441a      	add	r2, r3
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4619      	mov	r1, r3
 80094e4:	4610      	mov	r0, r2
 80094e6:	f7fe f964 	bl	80077b2 <vListInsertEnd>
 80094ea:	e004      	b.n	80094f6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094ec:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <xTaskPriorityInherit+0xc4>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80094f6:	2301      	movs	r3, #1
 80094f8:	60fb      	str	r3, [r7, #12]
 80094fa:	e008      	b.n	800950e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009500:	4b05      	ldr	r3, [pc, #20]	; (8009518 <xTaskPriorityInherit+0xc4>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009506:	429a      	cmp	r2, r3
 8009508:	d201      	bcs.n	800950e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800950a:	2301      	movs	r3, #1
 800950c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800950e:	68fb      	ldr	r3, [r7, #12]
	}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	200009f8 	.word	0x200009f8
 800951c:	200009fc 	.word	0x200009fc
 8009520:	20000ed4 	.word	0x20000ed4

08009524 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009530:	2300      	movs	r3, #0
 8009532:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d056      	beq.n	80095e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800953a:	4b2e      	ldr	r3, [pc, #184]	; (80095f4 <xTaskPriorityDisinherit+0xd0>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	429a      	cmp	r2, r3
 8009542:	d00a      	beq.n	800955a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009548:	f383 8811 	msr	BASEPRI, r3
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	f3bf 8f4f 	dsb	sy
 8009554:	60fb      	str	r3, [r7, #12]
}
 8009556:	bf00      	nop
 8009558:	e7fe      	b.n	8009558 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10a      	bne.n	8009578 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	60bb      	str	r3, [r7, #8]
}
 8009574:	bf00      	nop
 8009576:	e7fe      	b.n	8009576 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800957c:	1e5a      	subs	r2, r3, #1
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800958a:	429a      	cmp	r2, r3
 800958c:	d02c      	beq.n	80095e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009592:	2b00      	cmp	r3, #0
 8009594:	d128      	bne.n	80095e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	3304      	adds	r3, #4
 800959a:	4618      	mov	r0, r3
 800959c:	f7fe f966 	bl	800786c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b8:	4b0f      	ldr	r3, [pc, #60]	; (80095f8 <xTaskPriorityDisinherit+0xd4>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d903      	bls.n	80095c8 <xTaskPriorityDisinherit+0xa4>
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c4:	4a0c      	ldr	r2, [pc, #48]	; (80095f8 <xTaskPriorityDisinherit+0xd4>)
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095cc:	4613      	mov	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4413      	add	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4a09      	ldr	r2, [pc, #36]	; (80095fc <xTaskPriorityDisinherit+0xd8>)
 80095d6:	441a      	add	r2, r3
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	3304      	adds	r3, #4
 80095dc:	4619      	mov	r1, r3
 80095de:	4610      	mov	r0, r2
 80095e0:	f7fe f8e7 	bl	80077b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80095e4:	2301      	movs	r3, #1
 80095e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095e8:	697b      	ldr	r3, [r7, #20]
	}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3718      	adds	r7, #24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	200009f8 	.word	0x200009f8
 80095f8:	20000ed4 	.word	0x20000ed4
 80095fc:	200009fc 	.word	0x200009fc

08009600 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800960e:	2301      	movs	r3, #1
 8009610:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d06a      	beq.n	80096ee <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10a      	bne.n	8009636 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	60fb      	str	r3, [r7, #12]
}
 8009632:	bf00      	nop
 8009634:	e7fe      	b.n	8009634 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d902      	bls.n	8009646 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	61fb      	str	r3, [r7, #28]
 8009644:	e002      	b.n	800964c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800964a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009650:	69fa      	ldr	r2, [r7, #28]
 8009652:	429a      	cmp	r2, r3
 8009654:	d04b      	beq.n	80096ee <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	429a      	cmp	r2, r3
 800965e:	d146      	bne.n	80096ee <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009660:	4b25      	ldr	r3, [pc, #148]	; (80096f8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	69ba      	ldr	r2, [r7, #24]
 8009666:	429a      	cmp	r2, r3
 8009668:	d10a      	bne.n	8009680 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	60bb      	str	r3, [r7, #8]
}
 800967c:	bf00      	nop
 800967e:	e7fe      	b.n	800967e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009684:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	69fa      	ldr	r2, [r7, #28]
 800968a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	2b00      	cmp	r3, #0
 8009692:	db04      	blt.n	800969e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	6959      	ldr	r1, [r3, #20]
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4a13      	ldr	r2, [pc, #76]	; (80096fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80096ae:	4413      	add	r3, r2
 80096b0:	4299      	cmp	r1, r3
 80096b2:	d11c      	bne.n	80096ee <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	3304      	adds	r3, #4
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fe f8d7 	bl	800786c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c2:	4b0f      	ldr	r3, [pc, #60]	; (8009700 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d903      	bls.n	80096d2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ce:	4a0c      	ldr	r2, [pc, #48]	; (8009700 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80096d0:	6013      	str	r3, [r2, #0]
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4a07      	ldr	r2, [pc, #28]	; (80096fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80096e0:	441a      	add	r2, r3
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	3304      	adds	r3, #4
 80096e6:	4619      	mov	r1, r3
 80096e8:	4610      	mov	r0, r2
 80096ea:	f7fe f862 	bl	80077b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096ee:	bf00      	nop
 80096f0:	3720      	adds	r7, #32
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	200009f8 	.word	0x200009f8
 80096fc:	200009fc 	.word	0x200009fc
 8009700:	20000ed4 	.word	0x20000ed4

08009704 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009708:	4b07      	ldr	r3, [pc, #28]	; (8009728 <pvTaskIncrementMutexHeldCount+0x24>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d004      	beq.n	800971a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009710:	4b05      	ldr	r3, [pc, #20]	; (8009728 <pvTaskIncrementMutexHeldCount+0x24>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009716:	3201      	adds	r2, #1
 8009718:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800971a:	4b03      	ldr	r3, [pc, #12]	; (8009728 <pvTaskIncrementMutexHeldCount+0x24>)
 800971c:	681b      	ldr	r3, [r3, #0]
	}
 800971e:	4618      	mov	r0, r3
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	200009f8 	.word	0x200009f8

0800972c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009736:	4b21      	ldr	r3, [pc, #132]	; (80097bc <prvAddCurrentTaskToDelayedList+0x90>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800973c:	4b20      	ldr	r3, [pc, #128]	; (80097c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3304      	adds	r3, #4
 8009742:	4618      	mov	r0, r3
 8009744:	f7fe f892 	bl	800786c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974e:	d10a      	bne.n	8009766 <prvAddCurrentTaskToDelayedList+0x3a>
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d007      	beq.n	8009766 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009756:	4b1a      	ldr	r3, [pc, #104]	; (80097c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	3304      	adds	r3, #4
 800975c:	4619      	mov	r1, r3
 800975e:	4819      	ldr	r0, [pc, #100]	; (80097c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009760:	f7fe f827 	bl	80077b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009764:	e026      	b.n	80097b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4413      	add	r3, r2
 800976c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800976e:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	429a      	cmp	r2, r3
 800977c:	d209      	bcs.n	8009792 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800977e:	4b12      	ldr	r3, [pc, #72]	; (80097c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	4b0f      	ldr	r3, [pc, #60]	; (80097c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3304      	adds	r3, #4
 8009788:	4619      	mov	r1, r3
 800978a:	4610      	mov	r0, r2
 800978c:	f7fe f835 	bl	80077fa <vListInsert>
}
 8009790:	e010      	b.n	80097b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009792:	4b0e      	ldr	r3, [pc, #56]	; (80097cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	4b0a      	ldr	r3, [pc, #40]	; (80097c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3304      	adds	r3, #4
 800979c:	4619      	mov	r1, r3
 800979e:	4610      	mov	r0, r2
 80097a0:	f7fe f82b 	bl	80077fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80097a4:	4b0a      	ldr	r3, [pc, #40]	; (80097d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d202      	bcs.n	80097b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80097ae:	4a08      	ldr	r2, [pc, #32]	; (80097d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	6013      	str	r3, [r2, #0]
}
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	20000ed0 	.word	0x20000ed0
 80097c0:	200009f8 	.word	0x200009f8
 80097c4:	20000eb8 	.word	0x20000eb8
 80097c8:	20000e88 	.word	0x20000e88
 80097cc:	20000e84 	.word	0x20000e84
 80097d0:	20000eec 	.word	0x20000eec

080097d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b08a      	sub	sp, #40	; 0x28
 80097d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80097da:	2300      	movs	r3, #0
 80097dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80097de:	f000 fb07 	bl	8009df0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80097e2:	4b1c      	ldr	r3, [pc, #112]	; (8009854 <xTimerCreateTimerTask+0x80>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d021      	beq.n	800982e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80097ea:	2300      	movs	r3, #0
 80097ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80097f2:	1d3a      	adds	r2, r7, #4
 80097f4:	f107 0108 	add.w	r1, r7, #8
 80097f8:	f107 030c 	add.w	r3, r7, #12
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fd ff91 	bl	8007724 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	9202      	str	r2, [sp, #8]
 800980a:	9301      	str	r3, [sp, #4]
 800980c:	2302      	movs	r3, #2
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	2300      	movs	r3, #0
 8009812:	460a      	mov	r2, r1
 8009814:	4910      	ldr	r1, [pc, #64]	; (8009858 <xTimerCreateTimerTask+0x84>)
 8009816:	4811      	ldr	r0, [pc, #68]	; (800985c <xTimerCreateTimerTask+0x88>)
 8009818:	f7fe ffe0 	bl	80087dc <xTaskCreateStatic>
 800981c:	4603      	mov	r3, r0
 800981e:	4a10      	ldr	r2, [pc, #64]	; (8009860 <xTimerCreateTimerTask+0x8c>)
 8009820:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009822:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <xTimerCreateTimerTask+0x8c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800982a:	2301      	movs	r3, #1
 800982c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10a      	bne.n	800984a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009838:	f383 8811 	msr	BASEPRI, r3
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	613b      	str	r3, [r7, #16]
}
 8009846:	bf00      	nop
 8009848:	e7fe      	b.n	8009848 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800984a:	697b      	ldr	r3, [r7, #20]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	20000f28 	.word	0x20000f28
 8009858:	0800a820 	.word	0x0800a820
 800985c:	08009999 	.word	0x08009999
 8009860:	20000f2c 	.word	0x20000f2c

08009864 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b08a      	sub	sp, #40	; 0x28
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
 8009870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009872:	2300      	movs	r3, #0
 8009874:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10a      	bne.n	8009892 <xTimerGenericCommand+0x2e>
	__asm volatile
 800987c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	623b      	str	r3, [r7, #32]
}
 800988e:	bf00      	nop
 8009890:	e7fe      	b.n	8009890 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009892:	4b1a      	ldr	r3, [pc, #104]	; (80098fc <xTimerGenericCommand+0x98>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d02a      	beq.n	80098f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	2b05      	cmp	r3, #5
 80098aa:	dc18      	bgt.n	80098de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80098ac:	f7ff fdb4 	bl	8009418 <xTaskGetSchedulerState>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d109      	bne.n	80098ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80098b6:	4b11      	ldr	r3, [pc, #68]	; (80098fc <xTimerGenericCommand+0x98>)
 80098b8:	6818      	ldr	r0, [r3, #0]
 80098ba:	f107 0110 	add.w	r1, r7, #16
 80098be:	2300      	movs	r3, #0
 80098c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098c2:	f7fe f9a5 	bl	8007c10 <xQueueGenericSend>
 80098c6:	6278      	str	r0, [r7, #36]	; 0x24
 80098c8:	e012      	b.n	80098f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80098ca:	4b0c      	ldr	r3, [pc, #48]	; (80098fc <xTimerGenericCommand+0x98>)
 80098cc:	6818      	ldr	r0, [r3, #0]
 80098ce:	f107 0110 	add.w	r1, r7, #16
 80098d2:	2300      	movs	r3, #0
 80098d4:	2200      	movs	r2, #0
 80098d6:	f7fe f99b 	bl	8007c10 <xQueueGenericSend>
 80098da:	6278      	str	r0, [r7, #36]	; 0x24
 80098dc:	e008      	b.n	80098f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80098de:	4b07      	ldr	r3, [pc, #28]	; (80098fc <xTimerGenericCommand+0x98>)
 80098e0:	6818      	ldr	r0, [r3, #0]
 80098e2:	f107 0110 	add.w	r1, r7, #16
 80098e6:	2300      	movs	r3, #0
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	f7fe fa8f 	bl	8007e0c <xQueueGenericSendFromISR>
 80098ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3728      	adds	r7, #40	; 0x28
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	20000f28 	.word	0x20000f28

08009900 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b088      	sub	sp, #32
 8009904:	af02      	add	r7, sp, #8
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800990a:	4b22      	ldr	r3, [pc, #136]	; (8009994 <prvProcessExpiredTimer+0x94>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	3304      	adds	r3, #4
 8009918:	4618      	mov	r0, r3
 800991a:	f7fd ffa7 	bl	800786c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009924:	f003 0304 	and.w	r3, r3, #4
 8009928:	2b00      	cmp	r3, #0
 800992a:	d022      	beq.n	8009972 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	699a      	ldr	r2, [r3, #24]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	18d1      	adds	r1, r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	6978      	ldr	r0, [r7, #20]
 800993a:	f000 f8d1 	bl	8009ae0 <prvInsertTimerInActiveList>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d01f      	beq.n	8009984 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009944:	2300      	movs	r3, #0
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	2300      	movs	r3, #0
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	2100      	movs	r1, #0
 800994e:	6978      	ldr	r0, [r7, #20]
 8009950:	f7ff ff88 	bl	8009864 <xTimerGenericCommand>
 8009954:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d113      	bne.n	8009984 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	60fb      	str	r3, [r7, #12]
}
 800996e:	bf00      	nop
 8009970:	e7fe      	b.n	8009970 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009978:	f023 0301 	bic.w	r3, r3, #1
 800997c:	b2da      	uxtb	r2, r3
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	6a1b      	ldr	r3, [r3, #32]
 8009988:	6978      	ldr	r0, [r7, #20]
 800998a:	4798      	blx	r3
}
 800998c:	bf00      	nop
 800998e:	3718      	adds	r7, #24
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	20000f20 	.word	0x20000f20

08009998 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099a0:	f107 0308 	add.w	r3, r7, #8
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 f857 	bl	8009a58 <prvGetNextExpireTime>
 80099aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	4619      	mov	r1, r3
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 f803 	bl	80099bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80099b6:	f000 f8d5 	bl	8009b64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099ba:	e7f1      	b.n	80099a0 <prvTimerTask+0x8>

080099bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80099c6:	f7ff f945 	bl	8008c54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099ca:	f107 0308 	add.w	r3, r7, #8
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 f866 	bl	8009aa0 <prvSampleTimeNow>
 80099d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d130      	bne.n	8009a3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10a      	bne.n	80099f8 <prvProcessTimerOrBlockTask+0x3c>
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d806      	bhi.n	80099f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80099ea:	f7ff f941 	bl	8008c70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80099ee:	68f9      	ldr	r1, [r7, #12]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f7ff ff85 	bl	8009900 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80099f6:	e024      	b.n	8009a42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d008      	beq.n	8009a10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80099fe:	4b13      	ldr	r3, [pc, #76]	; (8009a4c <prvProcessTimerOrBlockTask+0x90>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d101      	bne.n	8009a0c <prvProcessTimerOrBlockTask+0x50>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e000      	b.n	8009a0e <prvProcessTimerOrBlockTask+0x52>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a10:	4b0f      	ldr	r3, [pc, #60]	; (8009a50 <prvProcessTimerOrBlockTask+0x94>)
 8009a12:	6818      	ldr	r0, [r3, #0]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	1ad3      	subs	r3, r2, r3
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	f7fe fea9 	bl	8008774 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a22:	f7ff f925 	bl	8008c70 <xTaskResumeAll>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d10a      	bne.n	8009a42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a2c:	4b09      	ldr	r3, [pc, #36]	; (8009a54 <prvProcessTimerOrBlockTask+0x98>)
 8009a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	f3bf 8f6f 	isb	sy
}
 8009a3c:	e001      	b.n	8009a42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a3e:	f7ff f917 	bl	8008c70 <xTaskResumeAll>
}
 8009a42:	bf00      	nop
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20000f24 	.word	0x20000f24
 8009a50:	20000f28 	.word	0x20000f28
 8009a54:	e000ed04 	.word	0xe000ed04

08009a58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a60:	4b0e      	ldr	r3, [pc, #56]	; (8009a9c <prvGetNextExpireTime+0x44>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d101      	bne.n	8009a6e <prvGetNextExpireTime+0x16>
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	e000      	b.n	8009a70 <prvGetNextExpireTime+0x18>
 8009a6e:	2200      	movs	r2, #0
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d105      	bne.n	8009a88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a7c:	4b07      	ldr	r3, [pc, #28]	; (8009a9c <prvGetNextExpireTime+0x44>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	60fb      	str	r3, [r7, #12]
 8009a86:	e001      	b.n	8009a8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	20000f20 	.word	0x20000f20

08009aa0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009aa8:	f7ff f980 	bl	8008dac <xTaskGetTickCount>
 8009aac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009aae:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <prvSampleTimeNow+0x3c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d205      	bcs.n	8009ac4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ab8:	f000 f936 	bl	8009d28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	e002      	b.n	8009aca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009aca:	4a04      	ldr	r2, [pc, #16]	; (8009adc <prvSampleTimeNow+0x3c>)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	20000f30 	.word	0x20000f30

08009ae0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
 8009aec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009aee:	2300      	movs	r3, #0
 8009af0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d812      	bhi.n	8009b2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	1ad2      	subs	r2, r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d302      	bcc.n	8009b1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b14:	2301      	movs	r3, #1
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	e01b      	b.n	8009b52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b1a:	4b10      	ldr	r3, [pc, #64]	; (8009b5c <prvInsertTimerInActiveList+0x7c>)
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3304      	adds	r3, #4
 8009b22:	4619      	mov	r1, r3
 8009b24:	4610      	mov	r0, r2
 8009b26:	f7fd fe68 	bl	80077fa <vListInsert>
 8009b2a:	e012      	b.n	8009b52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d206      	bcs.n	8009b42 <prvInsertTimerInActiveList+0x62>
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d302      	bcc.n	8009b42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	617b      	str	r3, [r7, #20]
 8009b40:	e007      	b.n	8009b52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b42:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <prvInsertTimerInActiveList+0x80>)
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3304      	adds	r3, #4
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	f7fd fe54 	bl	80077fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b52:	697b      	ldr	r3, [r7, #20]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	20000f24 	.word	0x20000f24
 8009b60:	20000f20 	.word	0x20000f20

08009b64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08e      	sub	sp, #56	; 0x38
 8009b68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b6a:	e0ca      	b.n	8009d02 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	da18      	bge.n	8009ba4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b72:	1d3b      	adds	r3, r7, #4
 8009b74:	3304      	adds	r3, #4
 8009b76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10a      	bne.n	8009b94 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	61fb      	str	r3, [r7, #28]
}
 8009b90:	bf00      	nop
 8009b92:	e7fe      	b.n	8009b92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b9a:	6850      	ldr	r0, [r2, #4]
 8009b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b9e:	6892      	ldr	r2, [r2, #8]
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f2c0 80aa 	blt.w	8009d00 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb2:	695b      	ldr	r3, [r3, #20]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d004      	beq.n	8009bc2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bba:	3304      	adds	r3, #4
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7fd fe55 	bl	800786c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bc2:	463b      	mov	r3, r7
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7ff ff6b 	bl	8009aa0 <prvSampleTimeNow>
 8009bca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b09      	cmp	r3, #9
 8009bd0:	f200 8097 	bhi.w	8009d02 <prvProcessReceivedCommands+0x19e>
 8009bd4:	a201      	add	r2, pc, #4	; (adr r2, 8009bdc <prvProcessReceivedCommands+0x78>)
 8009bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bda:	bf00      	nop
 8009bdc:	08009c05 	.word	0x08009c05
 8009be0:	08009c05 	.word	0x08009c05
 8009be4:	08009c05 	.word	0x08009c05
 8009be8:	08009c79 	.word	0x08009c79
 8009bec:	08009c8d 	.word	0x08009c8d
 8009bf0:	08009cd7 	.word	0x08009cd7
 8009bf4:	08009c05 	.word	0x08009c05
 8009bf8:	08009c05 	.word	0x08009c05
 8009bfc:	08009c79 	.word	0x08009c79
 8009c00:	08009c8d 	.word	0x08009c8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c0a:	f043 0301 	orr.w	r3, r3, #1
 8009c0e:	b2da      	uxtb	r2, r3
 8009c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	18d1      	adds	r1, r2, r3
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c24:	f7ff ff5c 	bl	8009ae0 <prvInsertTimerInActiveList>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d069      	beq.n	8009d02 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d05e      	beq.n	8009d02 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	441a      	add	r2, r3
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	2300      	movs	r3, #0
 8009c52:	2100      	movs	r1, #0
 8009c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c56:	f7ff fe05 	bl	8009864 <xTimerGenericCommand>
 8009c5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d14f      	bne.n	8009d02 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	61bb      	str	r3, [r7, #24]
}
 8009c74:	bf00      	nop
 8009c76:	e7fe      	b.n	8009c76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c7e:	f023 0301 	bic.w	r3, r3, #1
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009c8a:	e03a      	b.n	8009d02 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c92:	f043 0301 	orr.w	r3, r3, #1
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10a      	bne.n	8009cc2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	617b      	str	r3, [r7, #20]
}
 8009cbe:	bf00      	nop
 8009cc0:	e7fe      	b.n	8009cc0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	699a      	ldr	r2, [r3, #24]
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc8:	18d1      	adds	r1, r2, r3
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cd0:	f7ff ff06 	bl	8009ae0 <prvInsertTimerInActiveList>
					break;
 8009cd4:	e015      	b.n	8009d02 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cdc:	f003 0302 	and.w	r3, r3, #2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d103      	bne.n	8009cec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ce6:	f000 fbdb 	bl	800a4a0 <vPortFree>
 8009cea:	e00a      	b.n	8009d02 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cf2:	f023 0301 	bic.w	r3, r3, #1
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009cfe:	e000      	b.n	8009d02 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009d00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d02:	4b08      	ldr	r3, [pc, #32]	; (8009d24 <prvProcessReceivedCommands+0x1c0>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	1d39      	adds	r1, r7, #4
 8009d08:	2200      	movs	r2, #0
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fe f9a6 	bl	800805c <xQueueReceive>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f47f af2a 	bne.w	8009b6c <prvProcessReceivedCommands+0x8>
	}
}
 8009d18:	bf00      	nop
 8009d1a:	bf00      	nop
 8009d1c:	3730      	adds	r7, #48	; 0x30
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	20000f28 	.word	0x20000f28

08009d28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b088      	sub	sp, #32
 8009d2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d2e:	e048      	b.n	8009dc2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d30:	4b2d      	ldr	r3, [pc, #180]	; (8009de8 <prvSwitchTimerLists+0xc0>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d3a:	4b2b      	ldr	r3, [pc, #172]	; (8009de8 <prvSwitchTimerLists+0xc0>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	3304      	adds	r3, #4
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fd fd8f 	bl	800786c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d5c:	f003 0304 	and.w	r3, r3, #4
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d02e      	beq.n	8009dc2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d90e      	bls.n	8009d94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d82:	4b19      	ldr	r3, [pc, #100]	; (8009de8 <prvSwitchTimerLists+0xc0>)
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	3304      	adds	r3, #4
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	f7fd fd34 	bl	80077fa <vListInsert>
 8009d92:	e016      	b.n	8009dc2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d94:	2300      	movs	r3, #0
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f7ff fd60 	bl	8009864 <xTimerGenericCommand>
 8009da4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10a      	bne.n	8009dc2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	603b      	str	r3, [r7, #0]
}
 8009dbe:	bf00      	nop
 8009dc0:	e7fe      	b.n	8009dc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dc2:	4b09      	ldr	r3, [pc, #36]	; (8009de8 <prvSwitchTimerLists+0xc0>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1b1      	bne.n	8009d30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009dcc:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <prvSwitchTimerLists+0xc0>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009dd2:	4b06      	ldr	r3, [pc, #24]	; (8009dec <prvSwitchTimerLists+0xc4>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a04      	ldr	r2, [pc, #16]	; (8009de8 <prvSwitchTimerLists+0xc0>)
 8009dd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009dda:	4a04      	ldr	r2, [pc, #16]	; (8009dec <prvSwitchTimerLists+0xc4>)
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	6013      	str	r3, [r2, #0]
}
 8009de0:	bf00      	nop
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20000f20 	.word	0x20000f20
 8009dec:	20000f24 	.word	0x20000f24

08009df0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009df6:	f000 f965 	bl	800a0c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009dfa:	4b15      	ldr	r3, [pc, #84]	; (8009e50 <prvCheckForValidListAndQueue+0x60>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d120      	bne.n	8009e44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e02:	4814      	ldr	r0, [pc, #80]	; (8009e54 <prvCheckForValidListAndQueue+0x64>)
 8009e04:	f7fd fca8 	bl	8007758 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e08:	4813      	ldr	r0, [pc, #76]	; (8009e58 <prvCheckForValidListAndQueue+0x68>)
 8009e0a:	f7fd fca5 	bl	8007758 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e0e:	4b13      	ldr	r3, [pc, #76]	; (8009e5c <prvCheckForValidListAndQueue+0x6c>)
 8009e10:	4a10      	ldr	r2, [pc, #64]	; (8009e54 <prvCheckForValidListAndQueue+0x64>)
 8009e12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e14:	4b12      	ldr	r3, [pc, #72]	; (8009e60 <prvCheckForValidListAndQueue+0x70>)
 8009e16:	4a10      	ldr	r2, [pc, #64]	; (8009e58 <prvCheckForValidListAndQueue+0x68>)
 8009e18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	4b11      	ldr	r3, [pc, #68]	; (8009e64 <prvCheckForValidListAndQueue+0x74>)
 8009e20:	4a11      	ldr	r2, [pc, #68]	; (8009e68 <prvCheckForValidListAndQueue+0x78>)
 8009e22:	2110      	movs	r1, #16
 8009e24:	200a      	movs	r0, #10
 8009e26:	f7fd fdb3 	bl	8007990 <xQueueGenericCreateStatic>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	4a08      	ldr	r2, [pc, #32]	; (8009e50 <prvCheckForValidListAndQueue+0x60>)
 8009e2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e30:	4b07      	ldr	r3, [pc, #28]	; (8009e50 <prvCheckForValidListAndQueue+0x60>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d005      	beq.n	8009e44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e38:	4b05      	ldr	r3, [pc, #20]	; (8009e50 <prvCheckForValidListAndQueue+0x60>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	490b      	ldr	r1, [pc, #44]	; (8009e6c <prvCheckForValidListAndQueue+0x7c>)
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fe fc44 	bl	80086cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e44:	f000 f96e 	bl	800a124 <vPortExitCritical>
}
 8009e48:	bf00      	nop
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	20000f28 	.word	0x20000f28
 8009e54:	20000ef8 	.word	0x20000ef8
 8009e58:	20000f0c 	.word	0x20000f0c
 8009e5c:	20000f20 	.word	0x20000f20
 8009e60:	20000f24 	.word	0x20000f24
 8009e64:	20000fd4 	.word	0x20000fd4
 8009e68:	20000f34 	.word	0x20000f34
 8009e6c:	0800a828 	.word	0x0800a828

08009e70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3b04      	subs	r3, #4
 8009e80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3b04      	subs	r3, #4
 8009e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	f023 0201 	bic.w	r2, r3, #1
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3b04      	subs	r3, #4
 8009e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ea0:	4a0c      	ldr	r2, [pc, #48]	; (8009ed4 <pxPortInitialiseStack+0x64>)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	3b14      	subs	r3, #20
 8009eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	3b04      	subs	r3, #4
 8009eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f06f 0202 	mvn.w	r2, #2
 8009ebe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	3b20      	subs	r3, #32
 8009ec4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	08009ed9 	.word	0x08009ed9

08009ed8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ee2:	4b12      	ldr	r3, [pc, #72]	; (8009f2c <prvTaskExitError+0x54>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eea:	d00a      	beq.n	8009f02 <prvTaskExitError+0x2a>
	__asm volatile
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	60fb      	str	r3, [r7, #12]
}
 8009efe:	bf00      	nop
 8009f00:	e7fe      	b.n	8009f00 <prvTaskExitError+0x28>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	60bb      	str	r3, [r7, #8]
}
 8009f14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f16:	bf00      	nop
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d0fc      	beq.n	8009f18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f1e:	bf00      	nop
 8009f20:	bf00      	nop
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	2000000c 	.word	0x2000000c

08009f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f30:	4b07      	ldr	r3, [pc, #28]	; (8009f50 <pxCurrentTCBConst2>)
 8009f32:	6819      	ldr	r1, [r3, #0]
 8009f34:	6808      	ldr	r0, [r1, #0]
 8009f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3a:	f380 8809 	msr	PSP, r0
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f04f 0000 	mov.w	r0, #0
 8009f46:	f380 8811 	msr	BASEPRI, r0
 8009f4a:	4770      	bx	lr
 8009f4c:	f3af 8000 	nop.w

08009f50 <pxCurrentTCBConst2>:
 8009f50:	200009f8 	.word	0x200009f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop

08009f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f58:	4808      	ldr	r0, [pc, #32]	; (8009f7c <prvPortStartFirstTask+0x24>)
 8009f5a:	6800      	ldr	r0, [r0, #0]
 8009f5c:	6800      	ldr	r0, [r0, #0]
 8009f5e:	f380 8808 	msr	MSP, r0
 8009f62:	f04f 0000 	mov.w	r0, #0
 8009f66:	f380 8814 	msr	CONTROL, r0
 8009f6a:	b662      	cpsie	i
 8009f6c:	b661      	cpsie	f
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	df00      	svc	0
 8009f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f7a:	bf00      	nop
 8009f7c:	e000ed08 	.word	0xe000ed08

08009f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f86:	4b46      	ldr	r3, [pc, #280]	; (800a0a0 <xPortStartScheduler+0x120>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a46      	ldr	r2, [pc, #280]	; (800a0a4 <xPortStartScheduler+0x124>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d10a      	bne.n	8009fa6 <xPortStartScheduler+0x26>
	__asm volatile
 8009f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	613b      	str	r3, [r7, #16]
}
 8009fa2:	bf00      	nop
 8009fa4:	e7fe      	b.n	8009fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009fa6:	4b3e      	ldr	r3, [pc, #248]	; (800a0a0 <xPortStartScheduler+0x120>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a3f      	ldr	r2, [pc, #252]	; (800a0a8 <xPortStartScheduler+0x128>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d10a      	bne.n	8009fc6 <xPortStartScheduler+0x46>
	__asm volatile
 8009fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	60fb      	str	r3, [r7, #12]
}
 8009fc2:	bf00      	nop
 8009fc4:	e7fe      	b.n	8009fc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009fc6:	4b39      	ldr	r3, [pc, #228]	; (800a0ac <xPortStartScheduler+0x12c>)
 8009fc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	22ff      	movs	r2, #255	; 0xff
 8009fd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009fe0:	78fb      	ldrb	r3, [r7, #3]
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	4b31      	ldr	r3, [pc, #196]	; (800a0b0 <xPortStartScheduler+0x130>)
 8009fec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fee:	4b31      	ldr	r3, [pc, #196]	; (800a0b4 <xPortStartScheduler+0x134>)
 8009ff0:	2207      	movs	r2, #7
 8009ff2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ff4:	e009      	b.n	800a00a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ff6:	4b2f      	ldr	r3, [pc, #188]	; (800a0b4 <xPortStartScheduler+0x134>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	4a2d      	ldr	r2, [pc, #180]	; (800a0b4 <xPortStartScheduler+0x134>)
 8009ffe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a000:	78fb      	ldrb	r3, [r7, #3]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	005b      	lsls	r3, r3, #1
 800a006:	b2db      	uxtb	r3, r3
 800a008:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a00a:	78fb      	ldrb	r3, [r7, #3]
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a012:	2b80      	cmp	r3, #128	; 0x80
 800a014:	d0ef      	beq.n	8009ff6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a016:	4b27      	ldr	r3, [pc, #156]	; (800a0b4 <xPortStartScheduler+0x134>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f1c3 0307 	rsb	r3, r3, #7
 800a01e:	2b04      	cmp	r3, #4
 800a020:	d00a      	beq.n	800a038 <xPortStartScheduler+0xb8>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	60bb      	str	r3, [r7, #8]
}
 800a034:	bf00      	nop
 800a036:	e7fe      	b.n	800a036 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a038:	4b1e      	ldr	r3, [pc, #120]	; (800a0b4 <xPortStartScheduler+0x134>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	021b      	lsls	r3, r3, #8
 800a03e:	4a1d      	ldr	r2, [pc, #116]	; (800a0b4 <xPortStartScheduler+0x134>)
 800a040:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a042:	4b1c      	ldr	r3, [pc, #112]	; (800a0b4 <xPortStartScheduler+0x134>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a04a:	4a1a      	ldr	r2, [pc, #104]	; (800a0b4 <xPortStartScheduler+0x134>)
 800a04c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	b2da      	uxtb	r2, r3
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a056:	4b18      	ldr	r3, [pc, #96]	; (800a0b8 <xPortStartScheduler+0x138>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a17      	ldr	r2, [pc, #92]	; (800a0b8 <xPortStartScheduler+0x138>)
 800a05c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a060:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a062:	4b15      	ldr	r3, [pc, #84]	; (800a0b8 <xPortStartScheduler+0x138>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a14      	ldr	r2, [pc, #80]	; (800a0b8 <xPortStartScheduler+0x138>)
 800a068:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a06c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a06e:	f000 f8dd 	bl	800a22c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a072:	4b12      	ldr	r3, [pc, #72]	; (800a0bc <xPortStartScheduler+0x13c>)
 800a074:	2200      	movs	r2, #0
 800a076:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a078:	f000 f8fc 	bl	800a274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a07c:	4b10      	ldr	r3, [pc, #64]	; (800a0c0 <xPortStartScheduler+0x140>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a0f      	ldr	r2, [pc, #60]	; (800a0c0 <xPortStartScheduler+0x140>)
 800a082:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a086:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a088:	f7ff ff66 	bl	8009f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a08c:	f7fe ff58 	bl	8008f40 <vTaskSwitchContext>
	prvTaskExitError();
 800a090:	f7ff ff22 	bl	8009ed8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3718      	adds	r7, #24
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	e000ed00 	.word	0xe000ed00
 800a0a4:	410fc271 	.word	0x410fc271
 800a0a8:	410fc270 	.word	0x410fc270
 800a0ac:	e000e400 	.word	0xe000e400
 800a0b0:	20001024 	.word	0x20001024
 800a0b4:	20001028 	.word	0x20001028
 800a0b8:	e000ed20 	.word	0xe000ed20
 800a0bc:	2000000c 	.word	0x2000000c
 800a0c0:	e000ef34 	.word	0xe000ef34

0800a0c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	607b      	str	r3, [r7, #4]
}
 800a0dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0de:	4b0f      	ldr	r3, [pc, #60]	; (800a11c <vPortEnterCritical+0x58>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	4a0d      	ldr	r2, [pc, #52]	; (800a11c <vPortEnterCritical+0x58>)
 800a0e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0e8:	4b0c      	ldr	r3, [pc, #48]	; (800a11c <vPortEnterCritical+0x58>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d10f      	bne.n	800a110 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0f0:	4b0b      	ldr	r3, [pc, #44]	; (800a120 <vPortEnterCritical+0x5c>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00a      	beq.n	800a110 <vPortEnterCritical+0x4c>
	__asm volatile
 800a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	603b      	str	r3, [r7, #0]
}
 800a10c:	bf00      	nop
 800a10e:	e7fe      	b.n	800a10e <vPortEnterCritical+0x4a>
	}
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	2000000c 	.word	0x2000000c
 800a120:	e000ed04 	.word	0xe000ed04

0800a124 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a12a:	4b12      	ldr	r3, [pc, #72]	; (800a174 <vPortExitCritical+0x50>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10a      	bne.n	800a148 <vPortExitCritical+0x24>
	__asm volatile
 800a132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	607b      	str	r3, [r7, #4]
}
 800a144:	bf00      	nop
 800a146:	e7fe      	b.n	800a146 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a148:	4b0a      	ldr	r3, [pc, #40]	; (800a174 <vPortExitCritical+0x50>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	4a09      	ldr	r2, [pc, #36]	; (800a174 <vPortExitCritical+0x50>)
 800a150:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a152:	4b08      	ldr	r3, [pc, #32]	; (800a174 <vPortExitCritical+0x50>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d105      	bne.n	800a166 <vPortExitCritical+0x42>
 800a15a:	2300      	movs	r3, #0
 800a15c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	f383 8811 	msr	BASEPRI, r3
}
 800a164:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a166:	bf00      	nop
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	2000000c 	.word	0x2000000c
	...

0800a180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a180:	f3ef 8009 	mrs	r0, PSP
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	4b15      	ldr	r3, [pc, #84]	; (800a1e0 <pxCurrentTCBConst>)
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	f01e 0f10 	tst.w	lr, #16
 800a190:	bf08      	it	eq
 800a192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19a:	6010      	str	r0, [r2, #0]
 800a19c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a1a4:	f380 8811 	msr	BASEPRI, r0
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f7fe fec6 	bl	8008f40 <vTaskSwitchContext>
 800a1b4:	f04f 0000 	mov.w	r0, #0
 800a1b8:	f380 8811 	msr	BASEPRI, r0
 800a1bc:	bc09      	pop	{r0, r3}
 800a1be:	6819      	ldr	r1, [r3, #0]
 800a1c0:	6808      	ldr	r0, [r1, #0]
 800a1c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c6:	f01e 0f10 	tst.w	lr, #16
 800a1ca:	bf08      	it	eq
 800a1cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a1d0:	f380 8809 	msr	PSP, r0
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	f3af 8000 	nop.w

0800a1e0 <pxCurrentTCBConst>:
 800a1e0:	200009f8 	.word	0x200009f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1e4:	bf00      	nop
 800a1e6:	bf00      	nop

0800a1e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	607b      	str	r3, [r7, #4]
}
 800a200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a202:	f7fe fde3 	bl	8008dcc <xTaskIncrementTick>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d003      	beq.n	800a214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a20c:	4b06      	ldr	r3, [pc, #24]	; (800a228 <xPortSysTickHandler+0x40>)
 800a20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	2300      	movs	r3, #0
 800a216:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	f383 8811 	msr	BASEPRI, r3
}
 800a21e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a220:	bf00      	nop
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	e000ed04 	.word	0xe000ed04

0800a22c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a22c:	b480      	push	{r7}
 800a22e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a230:	4b0b      	ldr	r3, [pc, #44]	; (800a260 <vPortSetupTimerInterrupt+0x34>)
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a236:	4b0b      	ldr	r3, [pc, #44]	; (800a264 <vPortSetupTimerInterrupt+0x38>)
 800a238:	2200      	movs	r2, #0
 800a23a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a23c:	4b0a      	ldr	r3, [pc, #40]	; (800a268 <vPortSetupTimerInterrupt+0x3c>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a0a      	ldr	r2, [pc, #40]	; (800a26c <vPortSetupTimerInterrupt+0x40>)
 800a242:	fba2 2303 	umull	r2, r3, r2, r3
 800a246:	099b      	lsrs	r3, r3, #6
 800a248:	4a09      	ldr	r2, [pc, #36]	; (800a270 <vPortSetupTimerInterrupt+0x44>)
 800a24a:	3b01      	subs	r3, #1
 800a24c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a24e:	4b04      	ldr	r3, [pc, #16]	; (800a260 <vPortSetupTimerInterrupt+0x34>)
 800a250:	2207      	movs	r2, #7
 800a252:	601a      	str	r2, [r3, #0]
}
 800a254:	bf00      	nop
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	e000e010 	.word	0xe000e010
 800a264:	e000e018 	.word	0xe000e018
 800a268:	20000000 	.word	0x20000000
 800a26c:	10624dd3 	.word	0x10624dd3
 800a270:	e000e014 	.word	0xe000e014

0800a274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a284 <vPortEnableVFP+0x10>
 800a278:	6801      	ldr	r1, [r0, #0]
 800a27a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a27e:	6001      	str	r1, [r0, #0]
 800a280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a282:	bf00      	nop
 800a284:	e000ed88 	.word	0xe000ed88

0800a288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a288:	b480      	push	{r7}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a28e:	f3ef 8305 	mrs	r3, IPSR
 800a292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b0f      	cmp	r3, #15
 800a298:	d914      	bls.n	800a2c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a29a:	4a17      	ldr	r2, [pc, #92]	; (800a2f8 <vPortValidateInterruptPriority+0x70>)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	4413      	add	r3, r2
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2a4:	4b15      	ldr	r3, [pc, #84]	; (800a2fc <vPortValidateInterruptPriority+0x74>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	7afa      	ldrb	r2, [r7, #11]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d20a      	bcs.n	800a2c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	607b      	str	r3, [r7, #4]
}
 800a2c0:	bf00      	nop
 800a2c2:	e7fe      	b.n	800a2c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a2c4:	4b0e      	ldr	r3, [pc, #56]	; (800a300 <vPortValidateInterruptPriority+0x78>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a2cc:	4b0d      	ldr	r3, [pc, #52]	; (800a304 <vPortValidateInterruptPriority+0x7c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d90a      	bls.n	800a2ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	603b      	str	r3, [r7, #0]
}
 800a2e6:	bf00      	nop
 800a2e8:	e7fe      	b.n	800a2e8 <vPortValidateInterruptPriority+0x60>
	}
 800a2ea:	bf00      	nop
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	e000e3f0 	.word	0xe000e3f0
 800a2fc:	20001024 	.word	0x20001024
 800a300:	e000ed0c 	.word	0xe000ed0c
 800a304:	20001028 	.word	0x20001028

0800a308 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08a      	sub	sp, #40	; 0x28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a310:	2300      	movs	r3, #0
 800a312:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a314:	f7fe fc9e 	bl	8008c54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a318:	4b5b      	ldr	r3, [pc, #364]	; (800a488 <pvPortMalloc+0x180>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a320:	f000 f920 	bl	800a564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a324:	4b59      	ldr	r3, [pc, #356]	; (800a48c <pvPortMalloc+0x184>)
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4013      	ands	r3, r2
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f040 8093 	bne.w	800a458 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d01d      	beq.n	800a374 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a338:	2208      	movs	r2, #8
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4413      	add	r3, r2
 800a33e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f003 0307 	and.w	r3, r3, #7
 800a346:	2b00      	cmp	r3, #0
 800a348:	d014      	beq.n	800a374 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f023 0307 	bic.w	r3, r3, #7
 800a350:	3308      	adds	r3, #8
 800a352:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f003 0307 	and.w	r3, r3, #7
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00a      	beq.n	800a374 <pvPortMalloc+0x6c>
	__asm volatile
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	617b      	str	r3, [r7, #20]
}
 800a370:	bf00      	nop
 800a372:	e7fe      	b.n	800a372 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d06e      	beq.n	800a458 <pvPortMalloc+0x150>
 800a37a:	4b45      	ldr	r3, [pc, #276]	; (800a490 <pvPortMalloc+0x188>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	429a      	cmp	r2, r3
 800a382:	d869      	bhi.n	800a458 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a384:	4b43      	ldr	r3, [pc, #268]	; (800a494 <pvPortMalloc+0x18c>)
 800a386:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a388:	4b42      	ldr	r3, [pc, #264]	; (800a494 <pvPortMalloc+0x18c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a38e:	e004      	b.n	800a39a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d903      	bls.n	800a3ac <pvPortMalloc+0xa4>
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1f1      	bne.n	800a390 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3ac:	4b36      	ldr	r3, [pc, #216]	; (800a488 <pvPortMalloc+0x180>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d050      	beq.n	800a458 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3b6:	6a3b      	ldr	r3, [r7, #32]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2208      	movs	r2, #8
 800a3bc:	4413      	add	r3, r2
 800a3be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
 800a3c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	1ad2      	subs	r2, r2, r3
 800a3d0:	2308      	movs	r3, #8
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d91f      	bls.n	800a418 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a3d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4413      	add	r3, r2
 800a3de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	f003 0307 	and.w	r3, r3, #7
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00a      	beq.n	800a400 <pvPortMalloc+0xf8>
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	613b      	str	r3, [r7, #16]
}
 800a3fc:	bf00      	nop
 800a3fe:	e7fe      	b.n	800a3fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	1ad2      	subs	r2, r2, r3
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a412:	69b8      	ldr	r0, [r7, #24]
 800a414:	f000 f908 	bl	800a628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a418:	4b1d      	ldr	r3, [pc, #116]	; (800a490 <pvPortMalloc+0x188>)
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	4a1b      	ldr	r2, [pc, #108]	; (800a490 <pvPortMalloc+0x188>)
 800a424:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a426:	4b1a      	ldr	r3, [pc, #104]	; (800a490 <pvPortMalloc+0x188>)
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	4b1b      	ldr	r3, [pc, #108]	; (800a498 <pvPortMalloc+0x190>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d203      	bcs.n	800a43a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a432:	4b17      	ldr	r3, [pc, #92]	; (800a490 <pvPortMalloc+0x188>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a18      	ldr	r2, [pc, #96]	; (800a498 <pvPortMalloc+0x190>)
 800a438:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	4b13      	ldr	r3, [pc, #76]	; (800a48c <pvPortMalloc+0x184>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	431a      	orrs	r2, r3
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	2200      	movs	r2, #0
 800a44c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a44e:	4b13      	ldr	r3, [pc, #76]	; (800a49c <pvPortMalloc+0x194>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3301      	adds	r3, #1
 800a454:	4a11      	ldr	r2, [pc, #68]	; (800a49c <pvPortMalloc+0x194>)
 800a456:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a458:	f7fe fc0a 	bl	8008c70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00a      	beq.n	800a47c <pvPortMalloc+0x174>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	60fb      	str	r3, [r7, #12]
}
 800a478:	bf00      	nop
 800a47a:	e7fe      	b.n	800a47a <pvPortMalloc+0x172>
	return pvReturn;
 800a47c:	69fb      	ldr	r3, [r7, #28]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3728      	adds	r7, #40	; 0x28
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	20003744 	.word	0x20003744
 800a48c:	20003758 	.word	0x20003758
 800a490:	20003748 	.word	0x20003748
 800a494:	2000373c 	.word	0x2000373c
 800a498:	2000374c 	.word	0x2000374c
 800a49c:	20003750 	.word	0x20003750

0800a4a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d04d      	beq.n	800a54e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4b2:	2308      	movs	r3, #8
 800a4b4:	425b      	negs	r3, r3
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	4b24      	ldr	r3, [pc, #144]	; (800a558 <vPortFree+0xb8>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10a      	bne.n	800a4e4 <vPortFree+0x44>
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	60fb      	str	r3, [r7, #12]
}
 800a4e0:	bf00      	nop
 800a4e2:	e7fe      	b.n	800a4e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00a      	beq.n	800a502 <vPortFree+0x62>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	60bb      	str	r3, [r7, #8]
}
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	4b14      	ldr	r3, [pc, #80]	; (800a558 <vPortFree+0xb8>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4013      	ands	r3, r2
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d01e      	beq.n	800a54e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d11a      	bne.n	800a54e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	4b0e      	ldr	r3, [pc, #56]	; (800a558 <vPortFree+0xb8>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	43db      	mvns	r3, r3
 800a522:	401a      	ands	r2, r3
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a528:	f7fe fb94 	bl	8008c54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	4b0a      	ldr	r3, [pc, #40]	; (800a55c <vPortFree+0xbc>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4413      	add	r3, r2
 800a536:	4a09      	ldr	r2, [pc, #36]	; (800a55c <vPortFree+0xbc>)
 800a538:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a53a:	6938      	ldr	r0, [r7, #16]
 800a53c:	f000 f874 	bl	800a628 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a540:	4b07      	ldr	r3, [pc, #28]	; (800a560 <vPortFree+0xc0>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	3301      	adds	r3, #1
 800a546:	4a06      	ldr	r2, [pc, #24]	; (800a560 <vPortFree+0xc0>)
 800a548:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a54a:	f7fe fb91 	bl	8008c70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a54e:	bf00      	nop
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	20003758 	.word	0x20003758
 800a55c:	20003748 	.word	0x20003748
 800a560:	20003754 	.word	0x20003754

0800a564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a56a:	f242 7310 	movw	r3, #10000	; 0x2710
 800a56e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a570:	4b27      	ldr	r3, [pc, #156]	; (800a610 <prvHeapInit+0xac>)
 800a572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f003 0307 	and.w	r3, r3, #7
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00c      	beq.n	800a598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	3307      	adds	r3, #7
 800a582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f023 0307 	bic.w	r3, r3, #7
 800a58a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	4a1f      	ldr	r2, [pc, #124]	; (800a610 <prvHeapInit+0xac>)
 800a594:	4413      	add	r3, r2
 800a596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a59c:	4a1d      	ldr	r2, [pc, #116]	; (800a614 <prvHeapInit+0xb0>)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a5a2:	4b1c      	ldr	r3, [pc, #112]	; (800a614 <prvHeapInit+0xb0>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a5b0:	2208      	movs	r2, #8
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	1a9b      	subs	r3, r3, r2
 800a5b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f023 0307 	bic.w	r3, r3, #7
 800a5be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4a15      	ldr	r2, [pc, #84]	; (800a618 <prvHeapInit+0xb4>)
 800a5c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5c6:	4b14      	ldr	r3, [pc, #80]	; (800a618 <prvHeapInit+0xb4>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5ce:	4b12      	ldr	r3, [pc, #72]	; (800a618 <prvHeapInit+0xb4>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	1ad2      	subs	r2, r2, r3
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5e4:	4b0c      	ldr	r3, [pc, #48]	; (800a618 <prvHeapInit+0xb4>)
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	4a0a      	ldr	r2, [pc, #40]	; (800a61c <prvHeapInit+0xb8>)
 800a5f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	4a09      	ldr	r2, [pc, #36]	; (800a620 <prvHeapInit+0xbc>)
 800a5fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5fc:	4b09      	ldr	r3, [pc, #36]	; (800a624 <prvHeapInit+0xc0>)
 800a5fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a602:	601a      	str	r2, [r3, #0]
}
 800a604:	bf00      	nop
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr
 800a610:	2000102c 	.word	0x2000102c
 800a614:	2000373c 	.word	0x2000373c
 800a618:	20003744 	.word	0x20003744
 800a61c:	2000374c 	.word	0x2000374c
 800a620:	20003748 	.word	0x20003748
 800a624:	20003758 	.word	0x20003758

0800a628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a630:	4b28      	ldr	r3, [pc, #160]	; (800a6d4 <prvInsertBlockIntoFreeList+0xac>)
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	e002      	b.n	800a63c <prvInsertBlockIntoFreeList+0x14>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	429a      	cmp	r2, r3
 800a644:	d8f7      	bhi.n	800a636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	4413      	add	r3, r2
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	429a      	cmp	r2, r3
 800a656:	d108      	bne.n	800a66a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	441a      	add	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	441a      	add	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d118      	bne.n	800a6b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	4b15      	ldr	r3, [pc, #84]	; (800a6d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	429a      	cmp	r2, r3
 800a688:	d00d      	beq.n	800a6a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	685a      	ldr	r2, [r3, #4]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	441a      	add	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	601a      	str	r2, [r3, #0]
 800a6a4:	e008      	b.n	800a6b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6a6:	4b0c      	ldr	r3, [pc, #48]	; (800a6d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	e003      	b.n	800a6b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d002      	beq.n	800a6c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6c6:	bf00      	nop
 800a6c8:	3714      	adds	r7, #20
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	2000373c 	.word	0x2000373c
 800a6d8:	20003744 	.word	0x20003744

0800a6dc <__libc_init_array>:
 800a6dc:	b570      	push	{r4, r5, r6, lr}
 800a6de:	4d0d      	ldr	r5, [pc, #52]	; (800a714 <__libc_init_array+0x38>)
 800a6e0:	4c0d      	ldr	r4, [pc, #52]	; (800a718 <__libc_init_array+0x3c>)
 800a6e2:	1b64      	subs	r4, r4, r5
 800a6e4:	10a4      	asrs	r4, r4, #2
 800a6e6:	2600      	movs	r6, #0
 800a6e8:	42a6      	cmp	r6, r4
 800a6ea:	d109      	bne.n	800a700 <__libc_init_array+0x24>
 800a6ec:	4d0b      	ldr	r5, [pc, #44]	; (800a71c <__libc_init_array+0x40>)
 800a6ee:	4c0c      	ldr	r4, [pc, #48]	; (800a720 <__libc_init_array+0x44>)
 800a6f0:	f000 f82e 	bl	800a750 <_init>
 800a6f4:	1b64      	subs	r4, r4, r5
 800a6f6:	10a4      	asrs	r4, r4, #2
 800a6f8:	2600      	movs	r6, #0
 800a6fa:	42a6      	cmp	r6, r4
 800a6fc:	d105      	bne.n	800a70a <__libc_init_array+0x2e>
 800a6fe:	bd70      	pop	{r4, r5, r6, pc}
 800a700:	f855 3b04 	ldr.w	r3, [r5], #4
 800a704:	4798      	blx	r3
 800a706:	3601      	adds	r6, #1
 800a708:	e7ee      	b.n	800a6e8 <__libc_init_array+0xc>
 800a70a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a70e:	4798      	blx	r3
 800a710:	3601      	adds	r6, #1
 800a712:	e7f2      	b.n	800a6fa <__libc_init_array+0x1e>
 800a714:	0800a960 	.word	0x0800a960
 800a718:	0800a960 	.word	0x0800a960
 800a71c:	0800a960 	.word	0x0800a960
 800a720:	0800a964 	.word	0x0800a964

0800a724 <memcpy>:
 800a724:	440a      	add	r2, r1
 800a726:	4291      	cmp	r1, r2
 800a728:	f100 33ff 	add.w	r3, r0, #4294967295
 800a72c:	d100      	bne.n	800a730 <memcpy+0xc>
 800a72e:	4770      	bx	lr
 800a730:	b510      	push	{r4, lr}
 800a732:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a73a:	4291      	cmp	r1, r2
 800a73c:	d1f9      	bne.n	800a732 <memcpy+0xe>
 800a73e:	bd10      	pop	{r4, pc}

0800a740 <memset>:
 800a740:	4402      	add	r2, r0
 800a742:	4603      	mov	r3, r0
 800a744:	4293      	cmp	r3, r2
 800a746:	d100      	bne.n	800a74a <memset+0xa>
 800a748:	4770      	bx	lr
 800a74a:	f803 1b01 	strb.w	r1, [r3], #1
 800a74e:	e7f9      	b.n	800a744 <memset+0x4>

0800a750 <_init>:
 800a750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a752:	bf00      	nop
 800a754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a756:	bc08      	pop	{r3}
 800a758:	469e      	mov	lr, r3
 800a75a:	4770      	bx	lr

0800a75c <_fini>:
 800a75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75e:	bf00      	nop
 800a760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a762:	bc08      	pop	{r3}
 800a764:	469e      	mov	lr, r3
 800a766:	4770      	bx	lr
